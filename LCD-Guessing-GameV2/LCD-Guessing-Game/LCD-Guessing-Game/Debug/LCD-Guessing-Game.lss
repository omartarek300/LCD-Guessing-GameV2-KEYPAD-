
LCD-Guessing-Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00001296  0000132a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000ca  008000ca  00001394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bf6  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc3  00000000  00000000  000031be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011e5  00000000  00000000  00003d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004fc  00000000  00000000  00004f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077e  00000000  00000000  00005464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fbd  00000000  00000000  00005be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006b9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__vector_4>
      14:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__vector_5>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__vector_7>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 0a 04 	jmp	0x814	; 0x814 <__vector_9>
      28:	0c 94 31 04 	jmp	0x862	; 0x862 <__vector_10>
      2c:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <__vector_11>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	43 01       	movw	r8, r6
      56:	61 01       	movw	r12, r2
      58:	45 01       	movw	r8, r10
      5a:	47 01       	movw	r8, r14
      5c:	49 01       	movw	r8, r18
      5e:	4b 01       	movw	r8, r22
      60:	4d 01       	movw	r8, r26
      62:	4f 01       	movw	r8, r30
      64:	51 01       	movw	r10, r2
      66:	53 01       	movw	r10, r6
      68:	55 01       	movw	r10, r10
      6a:	57 01       	movw	r10, r14
      6c:	59 01       	movw	r10, r18
      6e:	5b 01       	movw	r10, r22
      70:	5d 01       	movw	r10, r26
      72:	5f 01       	movw	r10, r30
      74:	5d 06       	cpc	r5, r29
      76:	67 06       	cpc	r6, r23
      78:	71 06       	cpc	r7, r17
      7a:	7b 06       	cpc	r7, r27
      7c:	8f 06       	cpc	r8, r31
      7e:	85 06       	cpc	r8, r21
      80:	99 06       	cpc	r9, r25
      82:	a3 06       	cpc	r10, r19
      84:	c8 06       	cpc	r12, r24
      86:	d2 06       	cpc	r13, r18
      88:	dc 06       	cpc	r13, r28
      8a:	e6 06       	cpc	r14, r22
      8c:	fa 06       	cpc	r15, r26
      8e:	f0 06       	cpc	r15, r16
      90:	04 07       	cpc	r16, r20
      92:	0e 07       	cpc	r16, r30

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e6 e9       	ldi	r30, 0x96	; 150
      a8:	f2 e1       	ldi	r31, 0x12	; 18
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	aa 3c       	cpi	r26, 0xCA	; 202
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	aa ec       	ldi	r26, 0xCA	; 202
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a6 3d       	cpi	r26, 0xD6	; 214
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 24 03 	call	0x648	; 0x648 <main>
      ca:	0c 94 49 09 	jmp	0x1292	; 0x1292 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <app_init>:
 * Created: 9/15/2021 11:38:38 PM
 *  Author: Omar
 */ 
#include "App.h"
void app_init()
{
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	00 d0       	rcall	.+0      	; 0xd8 <app_init+0x6>
      d8:	00 d0       	rcall	.+0      	; 0xda <app_init+0x8>
      da:	1f 92       	push	r1
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
	config timer_configs = {timer1, compare, f_cpu_clk_1024, ticks}; // initialize timer1
      e0:	85 e0       	ldi	r24, 0x05	; 5
      e2:	e4 e6       	ldi	r30, 0x64	; 100
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	de 01       	movw	r26, r28
      e8:	11 96       	adiw	r26, 0x01	; 1
      ea:	01 90       	ld	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	8a 95       	dec	r24
      f0:	e1 f7       	brne	.-8      	; 0xea <app_init+0x18>
	initiate_timer(&timer_configs);
      f2:	ce 01       	movw	r24, r28
      f4:	01 96       	adiw	r24, 0x01	; 1
      f6:	0e 94 21 03 	call	0x642	; 0x642 <initiate_timer>
	
	lcd_config lcd_conf = {PD,PA,ctrl_pins,data_pins}; // initialize LCD
	LCD_init(lcd_conf);
      fa:	63 e0       	ldi	r22, 0x03	; 3
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	87 e0       	ldi	r24, 0x07	; 7
     100:	90 ef       	ldi	r25, 0xF0	; 240
     102:	0e 94 28 02 	call	0x450	; 0x450 <LCD_init>
	
	keypad_init(PC);
     106:	82 e0       	ldi	r24, 0x02	; 2
     108:	0e 94 32 01 	call	0x264	; 0x264 <keypad_init>
	
	user_number = 0; //initial value
     10c:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <user_number>
	random_variable = random_num(min,max);
     110:	0e 94 d6 08 	call	0x11ac	; 0x11ac <rand>
     114:	6f e0       	ldi	r22, 0x0F	; 15
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__divmodhi4>
     11c:	8f 5f       	subi	r24, 0xFF	; 255
     11e:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <random_variable>
}
     122:	0f 90       	pop	r0
     124:	0f 90       	pop	r0
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	0f 90       	pop	r0
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <get_user_press>:

void get_user_press()
{
	 key = get_key();
     132:	0e 94 a1 01 	call	0x342	; 0x342 <get_key>
     136:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <key>
	if(key != enter)
     13a:	8d 30       	cpi	r24, 0x0D	; 13
     13c:	91 f0       	breq	.+36     	; 0x162 <get_user_press+0x30>
	{
		user_number *= 10; // upgrade number value
     13e:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <user_number>
     142:	99 0f       	add	r25, r25
     144:	29 2f       	mov	r18, r25
     146:	22 0f       	add	r18, r18
     148:	22 0f       	add	r18, r18
     14a:	92 0f       	add	r25, r18
		user_number += key;
     14c:	89 0f       	add	r24, r25
     14e:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <user_number>
		go_to_row_column(second_row,7);
     152:	67 e0       	ldi	r22, 0x07	; 7
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	0e 94 bd 02 	call	0x57a	; 0x57a <go_to_row_column>
		LCD_intgerToString(user_number);	
     15a:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <user_number>
     15e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_intgerToString>
     162:	08 95       	ret

00000164 <home_screen>:
	}
	
}
void home_screen()
{
	send_cmd(CLEAR_COMMAND); /* clear LCD at the beginning */
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	0e 94 c4 01 	call	0x388	; 0x388 <send_cmd>
	go_to_row_column(first_row,0);
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	0e 94 bd 02 	call	0x57a	; 0x57a <go_to_row_column>
	send_string("please guess the");
     172:	89 e6       	ldi	r24, 0x69	; 105
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 aa 02 	call	0x554	; 0x554 <send_string>
	go_to_row_column(second_row,0);
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	0e 94 bd 02 	call	0x57a	; 0x57a <go_to_row_column>
	send_string("number:");
     182:	8a e7       	ldi	r24, 0x7A	; 122
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 aa 02 	call	0x554	; 0x554 <send_string>
     18a:	08 95       	ret

0000018c <check_user_number>:
		LCD_intgerToString(user_number);	
	}
}
void check_user_number()
{
	delay_ms(1000);
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	8a e7       	ldi	r24, 0x7A	; 122
     192:	94 e4       	ldi	r25, 0x44	; 68
     194:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
	if(key == enter)
     198:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <key>
     19c:	8d 30       	cpi	r24, 0x0D	; 13
     19e:	09 f0       	breq	.+2      	; 0x1a2 <check_user_number+0x16>
     1a0:	5b c0       	rjmp	.+182    	; 0x258 <check_user_number+0xcc>
	{
		go_to_row_column(second_row,7);
     1a2:	67 e0       	ldi	r22, 0x07	; 7
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 bd 02 	call	0x57a	; 0x57a <go_to_row_column>
		LCD_intgerToString(user_number);
     1aa:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <user_number>
     1ae:	0e 94 d6 02 	call	0x5ac	; 0x5ac <LCD_intgerToString>
		if(user_number < min)
     1b2:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <user_number>
     1b6:	81 11       	cpse	r24, r1
     1b8:	14 c0       	rjmp	.+40     	; 0x1e2 <check_user_number+0x56>
		{
			send_cmd(CLEAR_COMMAND); // LCD at the beginning
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 c4 01 	call	0x388	; 0x388 <send_cmd>
			go_to_row_column(first_row,0);
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 bd 02 	call	0x57a	; 0x57a <go_to_row_column>
			send_string("YOU DIDN'T");
     1c8:	82 e8       	ldi	r24, 0x82	; 130
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 aa 02 	call	0x554	; 0x554 <send_string>
			go_to_row_column(second_row,0);
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 bd 02 	call	0x57a	; 0x57a <go_to_row_column>
			send_string("CHOOSE A NUMBER");
     1d8:	8d e8       	ldi	r24, 0x8D	; 141
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 aa 02 	call	0x554	; 0x554 <send_string>
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <check_user_number+0xb8>
		}
		else if(user_number > max)
     1e2:	80 31       	cpi	r24, 0x10	; 16
     1e4:	a0 f0       	brcs	.+40     	; 0x20e <check_user_number+0x82>
		{
			send_cmd(CLEAR_COMMAND); //clear LCD at the beginning
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	0e 94 c4 01 	call	0x388	; 0x388 <send_cmd>
			go_to_row_column(first_row,0);
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	0e 94 bd 02 	call	0x57a	; 0x57a <go_to_row_column>
			send_string("THE VALID");
     1f4:	8d e9       	ldi	r24, 0x9D	; 157
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 aa 02 	call	0x554	; 0x554 <send_string>
			go_to_row_column(second_row,0);
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 bd 02 	call	0x57a	; 0x57a <go_to_row_column>
			send_string("NUMB WITHIN 1:15");
     204:	87 ea       	ldi	r24, 0xA7	; 167
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 aa 02 	call	0x554	; 0x554 <send_string>
     20c:	1b c0       	rjmp	.+54     	; 0x244 <check_user_number+0xb8>
		}
		else
		{
			if(user_number == random_variable)
     20e:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <random_variable>
     212:	89 13       	cpse	r24, r25
     214:	0c c0       	rjmp	.+24     	; 0x22e <check_user_number+0xa2>
			{
				send_cmd(CLEAR_COMMAND); //clear LCD at the beginning
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	0e 94 c4 01 	call	0x388	; 0x388 <send_cmd>
				go_to_row_column(first_row,0);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	0e 94 bd 02 	call	0x57a	; 0x57a <go_to_row_column>
				send_string("YOU WON");
     224:	88 eb       	ldi	r24, 0xB8	; 184
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 aa 02 	call	0x554	; 0x554 <send_string>
     22c:	0b c0       	rjmp	.+22     	; 0x244 <check_user_number+0xb8>
			}
			else
			{
				send_cmd(CLEAR_COMMAND); //clear LCD at the beginning
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	0e 94 c4 01 	call	0x388	; 0x388 <send_cmd>
				go_to_row_column(first_row,0);
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	80 e0       	ldi	r24, 0x00	; 0
     238:	0e 94 bd 02 	call	0x57a	; 0x57a <go_to_row_column>
				send_string("YOU LOS");
     23c:	80 ec       	ldi	r24, 0xC0	; 192
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 aa 02 	call	0x554	; 0x554 <send_string>
			}
			
		}
		user_number = 0;
     244:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <user_number>
		delay_ms(1000);
     248:	60 e0       	ldi	r22, 0x00	; 0
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	8a e7       	ldi	r24, 0x7A	; 122
     24e:	94 e4       	ldi	r25, 0x44	; 68
     250:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		home_screen();
     254:	0e 94 b2 00 	call	0x164	; 0x164 <home_screen>
     258:	08 95       	ret

0000025a <app>:
	go_to_row_column(second_row,0);
	send_string("number:");
}
void app()
{
	get_user_press();
     25a:	0e 94 99 00 	call	0x132	; 0x132 <get_user_press>
	check_user_number();
     25e:	0e 94 c6 00 	call	0x18c	; 0x18c <check_user_number>
     262:	08 95       	ret

00000264 <keypad_init>:
     264:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <port_name>
     268:	6f e0       	ldi	r22, 0x0F	; 15
     26a:	0e 94 2b 03 	call	0x656	; 0x656 <DIO_init>
     26e:	08 95       	ret

00000270 <keypad_4x4_mapping>:
     270:	48 2f       	mov	r20, r24
     272:	50 e0       	ldi	r21, 0x00	; 0
     274:	fa 01       	movw	r30, r20
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	e0 31       	cpi	r30, 0x10	; 16
     27a:	f1 05       	cpc	r31, r1
     27c:	18 f5       	brcc	.+70     	; 0x2c4 <keypad_4x4_mapping+0x54>
     27e:	e6 5d       	subi	r30, 0xD6	; 214
     280:	ff 4f       	sbci	r31, 0xFF	; 255
     282:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__tablejump2__>
     286:	87 e0       	ldi	r24, 0x07	; 7
     288:	08 95       	ret
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	08 95       	ret
     28e:	8d e0       	ldi	r24, 0x0D	; 13
     290:	08 95       	ret
     292:	88 e0       	ldi	r24, 0x08	; 8
     294:	08 95       	ret
     296:	85 e0       	ldi	r24, 0x05	; 5
     298:	08 95       	ret
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	08 95       	ret
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	08 95       	ret
     2a2:	89 e0       	ldi	r24, 0x09	; 9
     2a4:	08 95       	ret
     2a6:	86 e0       	ldi	r24, 0x06	; 6
     2a8:	08 95       	ret
     2aa:	83 e0       	ldi	r24, 0x03	; 3
     2ac:	08 95       	ret
     2ae:	8d e3       	ldi	r24, 0x3D	; 61
     2b0:	08 95       	ret
     2b2:	8f e2       	ldi	r24, 0x2F	; 47
     2b4:	08 95       	ret
     2b6:	8a e2       	ldi	r24, 0x2A	; 42
     2b8:	08 95       	ret
     2ba:	8d e2       	ldi	r24, 0x2D	; 45
     2bc:	08 95       	ret
     2be:	8b e2       	ldi	r24, 0x2B	; 43
     2c0:	08 95       	ret
     2c2:	84 e0       	ldi	r24, 0x04	; 4
     2c4:	08 95       	ret

000002c6 <keypad_port>:
     2c6:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <port_name>
     2ca:	91 30       	cpi	r25, 0x01	; 1
     2cc:	99 f0       	breq	.+38     	; 0x2f4 <keypad_port+0x2e>
     2ce:	28 f0       	brcs	.+10     	; 0x2da <keypad_port+0x14>
     2d0:	92 30       	cpi	r25, 0x02	; 2
     2d2:	e9 f0       	breq	.+58     	; 0x30e <keypad_port+0x48>
     2d4:	93 30       	cpi	r25, 0x03	; 3
     2d6:	41 f1       	breq	.+80     	; 0x328 <keypad_port+0x62>
     2d8:	08 95       	ret
     2da:	20 e1       	ldi	r18, 0x10	; 16
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	a9 01       	movw	r20, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <keypad_port+0x20>
     2e2:	44 0f       	add	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	8a 95       	dec	r24
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <keypad_port+0x1c>
     2ea:	ca 01       	movw	r24, r20
     2ec:	4a bb       	out	0x1a, r20	; 26
     2ee:	80 95       	com	r24
     2f0:	8b bb       	out	0x1b, r24	; 27
     2f2:	08 95       	ret
     2f4:	20 e1       	ldi	r18, 0x10	; 16
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	a9 01       	movw	r20, r18
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <keypad_port+0x3a>
     2fc:	44 0f       	add	r20, r20
     2fe:	55 1f       	adc	r21, r21
     300:	8a 95       	dec	r24
     302:	e2 f7       	brpl	.-8      	; 0x2fc <keypad_port+0x36>
     304:	ca 01       	movw	r24, r20
     306:	47 bb       	out	0x17, r20	; 23
     308:	80 95       	com	r24
     30a:	88 bb       	out	0x18, r24	; 24
     30c:	08 95       	ret
     30e:	20 e1       	ldi	r18, 0x10	; 16
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	a9 01       	movw	r20, r18
     314:	02 c0       	rjmp	.+4      	; 0x31a <keypad_port+0x54>
     316:	44 0f       	add	r20, r20
     318:	55 1f       	adc	r21, r21
     31a:	8a 95       	dec	r24
     31c:	e2 f7       	brpl	.-8      	; 0x316 <keypad_port+0x50>
     31e:	ca 01       	movw	r24, r20
     320:	44 bb       	out	0x14, r20	; 20
     322:	80 95       	com	r24
     324:	85 bb       	out	0x15, r24	; 21
     326:	08 95       	ret
     328:	20 e1       	ldi	r18, 0x10	; 16
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	a9 01       	movw	r20, r18
     32e:	02 c0       	rjmp	.+4      	; 0x334 <keypad_port+0x6e>
     330:	44 0f       	add	r20, r20
     332:	55 1f       	adc	r21, r21
     334:	8a 95       	dec	r24
     336:	e2 f7       	brpl	.-8      	; 0x330 <keypad_port+0x6a>
     338:	ca 01       	movw	r24, r20
     33a:	41 bb       	out	0x11, r20	; 17
     33c:	80 95       	com	r24
     33e:	82 bb       	out	0x12, r24	; 18
     340:	08 95       	ret

00000342 <get_key>:
     342:	cf 93       	push	r28
     344:	c0 e0       	ldi	r28, 0x00	; 0
     346:	1b c0       	rjmp	.+54     	; 0x37e <get_key+0x3c>
     348:	8c 2f       	mov	r24, r28
     34a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <keypad_port>
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	13 c0       	rjmp	.+38     	; 0x378 <get_key+0x36>
     352:	23 b3       	in	r18, 0x13	; 19
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	09 2e       	mov	r0, r25
     358:	02 c0       	rjmp	.+4      	; 0x35e <get_key+0x1c>
     35a:	35 95       	asr	r19
     35c:	27 95       	ror	r18
     35e:	0a 94       	dec	r0
     360:	e2 f7       	brpl	.-8      	; 0x35a <get_key+0x18>
     362:	20 fd       	sbrc	r18, 0
     364:	08 c0       	rjmp	.+16     	; 0x376 <get_key+0x34>
     366:	99 0f       	add	r25, r25
     368:	99 0f       	add	r25, r25
     36a:	89 2f       	mov	r24, r25
     36c:	8c 0f       	add	r24, r28
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	0e 94 38 01 	call	0x270	; 0x270 <keypad_4x4_mapping>
     374:	07 c0       	rjmp	.+14     	; 0x384 <get_key+0x42>
     376:	9f 5f       	subi	r25, 0xFF	; 255
     378:	94 30       	cpi	r25, 0x04	; 4
     37a:	58 f3       	brcs	.-42     	; 0x352 <get_key+0x10>
     37c:	cf 5f       	subi	r28, 0xFF	; 255
     37e:	c4 30       	cpi	r28, 0x04	; 4
     380:	18 f3       	brcs	.-58     	; 0x348 <get_key+0x6>
     382:	e0 cf       	rjmp	.-64     	; 0x344 <get_key+0x2>
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <send_cmd>:
	send_cmd(Display_ON); /* turn display on */
	send_cmd(CLEAR_COMMAND); /* clear LCD at the beginning */
	
}
void send_cmd(uint8_t command)
{ 
     388:	cf 93       	push	r28
     38a:	c8 2f       	mov	r28, r24
	DIO_CLR_BIT(ctrl_port, RS); /* Instruction Mode RS=0 */
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     392:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_CLR_BIT>
	DIO_CLR_BIT(ctrl_port, RW); /* write data to LCD so RW=0 */
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     39c:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_CLR_BIT>
	delay_ms(1); /* delay for tas */
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	80 e8       	ldi	r24, 0x80	; 128
     3a6:	9f e3       	ldi	r25, 0x3F	; 63
     3a8:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
	DIO_SET_BIT(ctrl_port, E); /* enable writing data on D0-->D7 */
     3ac:	62 e0       	ldi	r22, 0x02	; 2
     3ae:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     3b2:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_SET_BIT>
	delay_ms(1); /* delay for tpw - tpws*/
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	80 e8       	ldi	r24, 0x80	; 128
     3bc:	9f e3       	ldi	r25, 0x3F	; 63
     3be:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		4- enable writing data on D4-->D7 again
		5- clear data port before the new command
		6- out the lower bits of the required command to the data bus D4 --> D7 
		7- disable E PIN
	 */
		DIO_CLR(data_port, CLR_high_bits); 
     3c2:	60 ef       	ldi	r22, 0xF0	; 240
     3c4:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     3c8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <DIO_CLR>
		DIO_set(data_port, four_high_bits(command));
     3cc:	6c 2f       	mov	r22, r28
     3ce:	60 7f       	andi	r22, 0xF0	; 240
     3d0:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     3d4:	0e 94 43 03 	call	0x686	; 0x686 <DIO_set>
		delay_ms(1); /* delay for tpsw*/
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	80 e8       	ldi	r24, 0x80	; 128
     3de:	9f e3       	ldi	r25, 0x3F	; 63
     3e0:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		DIO_CLR_BIT(ctrl_port, E); 
     3e4:	62 e0       	ldi	r22, 0x02	; 2
     3e6:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     3ea:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_CLR_BIT>
		delay_ms(1); /* delay for th*/
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	80 e8       	ldi	r24, 0x80	; 128
     3f4:	9f e3       	ldi	r25, 0x3F	; 63
     3f6:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		DIO_SET_BIT(ctrl_port, E);
     3fa:	62 e0       	ldi	r22, 0x02	; 2
     3fc:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     400:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_SET_BIT>
		delay_ms(1); /* delay for tpw - tpws*/
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	80 e8       	ldi	r24, 0x80	; 128
     40a:	9f e3       	ldi	r25, 0x3F	; 63
     40c:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		DIO_CLR(data_port, CLR_high_bits);
     410:	60 ef       	ldi	r22, 0xF0	; 240
     412:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     416:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <DIO_CLR>
		DIO_set(data_port, four_low_bits(command));
     41a:	80 e1       	ldi	r24, 0x10	; 16
     41c:	c8 9f       	mul	r28, r24
     41e:	b0 01       	movw	r22, r0
     420:	11 24       	eor	r1, r1
     422:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     426:	0e 94 43 03 	call	0x686	; 0x686 <DIO_set>
		delay_ms(1); /* delay for tpsw*/
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	80 e8       	ldi	r24, 0x80	; 128
     430:	9f e3       	ldi	r25, 0x3F	; 63
     432:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		DIO_CLR_BIT(ctrl_port, E);
     436:	62 e0       	ldi	r22, 0x02	; 2
     438:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     43c:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_CLR_BIT>
		delay_ms(1); /* delay for th*/
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	80 e8       	ldi	r24, 0x80	; 128
     446:	9f e3       	ldi	r25, 0x3F	; 63
     448:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		DIO_set(data_port, command); /* out the required command to the data bus D0 --> D7 */
		delay_ms(1); /* delay for tpsw*/
		DIO_CLR_BIT(ctrl_port, E); /* disable E PIN */
		delay_ms(1); /* delay for th*/
	#endif
}
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <LCD_init>:
 * Created: 9/14/2021 4:45:38 PM
 *  Author: Omar
 */ 
#include "LCD.h"
void LCD_init(lcd_config config)
{
     450:	cf 93       	push	r28
     452:	26 2f       	mov	r18, r22
     454:	c9 2f       	mov	r28, r25
	ctrl_port = config.control_port;
     456:	60 93 d3 00 	sts	0x00D3, r22	; 0x8000d3 <ctrl_port>
	data_port = config.data_port;
     45a:	70 93 d4 00 	sts	0x00D4, r23	; 0x8000d4 <data_port>
	DIO_init(ctrl_port, config.ctrl_pins); /* Configure the control port as output port */ 
     45e:	68 2f       	mov	r22, r24
     460:	82 2f       	mov	r24, r18
     462:	0e 94 2b 03 	call	0x656	; 0x656 <DIO_init>
	#if (bit_mode == Four_bit_mode)
		DIO_init(data_port,config.data_pins); /* Configure the data port as output port */
     466:	6c 2f       	mov	r22, r28
     468:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     46c:	0e 94 2b 03 	call	0x656	; 0x656 <DIO_init>
		send_cmd(0x02);
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	0e 94 c4 01 	call	0x388	; 0x388 <send_cmd>
		send_cmd(two_line_4_bit_mode); /* use 4_bit mode and 2 line LCD */
     476:	88 e2       	ldi	r24, 0x28	; 40
     478:	0e 94 c4 01 	call	0x388	; 0x388 <send_cmd>
	#elif (bit_mode == Eight_bit_mode)
		DIO_init(data_port,config.data_pins); /* Configure the data port as output port */ 
		send_cmd(two_line_8_bit_mode); /* use 8_bit mode and 2 line LCD */
	#endif
	send_cmd(Display_ON); /* turn display on */
     47c:	8c e0       	ldi	r24, 0x0C	; 12
     47e:	0e 94 c4 01 	call	0x388	; 0x388 <send_cmd>
	send_cmd(CLEAR_COMMAND); /* clear LCD at the beginning */
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	0e 94 c4 01 	call	0x388	; 0x388 <send_cmd>
	
}
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <send_char>:
		DIO_CLR_BIT(ctrl_port, E); /* disable E PIN */
		delay_ms(1); /* delay for th*/
	#endif
}
void send_char( uint8_t data_8)
{
     48c:	cf 93       	push	r28
     48e:	c8 2f       	mov	r28, r24
	
	DIO_SET_BIT(ctrl_port, RS); /* data Mode RS=0 */
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     496:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_SET_BIT>
	DIO_CLR_BIT(ctrl_port, RW); /* write data to LCD so RW=0 */
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     4a0:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_CLR_BIT>
	delay_ms(1); /* delay for tas*/
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	80 e8       	ldi	r24, 0x80	; 128
     4aa:	9f e3       	ldi	r25, 0x3F	; 63
     4ac:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
	DIO_SET_BIT(ctrl_port, E); /* enable writing data on D0-->D7 */
     4b0:	62 e0       	ldi	r22, 0x02	; 2
     4b2:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     4b6:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_SET_BIT>
	delay_ms(1); /* delay for tpw - tpws*/
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	80 e8       	ldi	r24, 0x80	; 128
     4c0:	9f e3       	ldi	r25, 0x3F	; 63
     4c2:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		4- enable writing data on D4-->D7 again
		5- clear data port before the new command
		6- out the lower bits of the required command to the data bus D4 --> D7 
		7- disable E PIN
	 */
		DIO_CLR(data_port, CLR_high_bits); 
     4c6:	60 ef       	ldi	r22, 0xF0	; 240
     4c8:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     4cc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <DIO_CLR>
		DIO_set(data_port, four_high_bits(data_8));
     4d0:	6c 2f       	mov	r22, r28
     4d2:	60 7f       	andi	r22, 0xF0	; 240
     4d4:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     4d8:	0e 94 43 03 	call	0x686	; 0x686 <DIO_set>
		delay_ms(1); /* delay for tpsw*/
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	80 e8       	ldi	r24, 0x80	; 128
     4e2:	9f e3       	ldi	r25, 0x3F	; 63
     4e4:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		DIO_CLR_BIT(ctrl_port, E); 
     4e8:	62 e0       	ldi	r22, 0x02	; 2
     4ea:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     4ee:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_CLR_BIT>
		delay_ms(1); /* delay for th*/
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	80 e8       	ldi	r24, 0x80	; 128
     4f8:	9f e3       	ldi	r25, 0x3F	; 63
     4fa:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		DIO_SET_BIT(ctrl_port, E); 
     4fe:	62 e0       	ldi	r22, 0x02	; 2
     500:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     504:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_SET_BIT>
		delay_ms(1); /* delay for tpw - tpws*/
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	80 e8       	ldi	r24, 0x80	; 128
     50e:	9f e3       	ldi	r25, 0x3F	; 63
     510:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		DIO_CLR(data_port, CLR_high_bits); 
     514:	60 ef       	ldi	r22, 0xF0	; 240
     516:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     51a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <DIO_CLR>
		DIO_set(data_port, four_low_bits(data_8));
     51e:	80 e1       	ldi	r24, 0x10	; 16
     520:	c8 9f       	mul	r28, r24
     522:	b0 01       	movw	r22, r0
     524:	11 24       	eor	r1, r1
     526:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     52a:	0e 94 43 03 	call	0x686	; 0x686 <DIO_set>
		delay_ms(1); /* delay for tpsw*/
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	80 e8       	ldi	r24, 0x80	; 128
     534:	9f e3       	ldi	r25, 0x3F	; 63
     536:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		DIO_CLR_BIT(ctrl_port, E); 
     53a:	62 e0       	ldi	r22, 0x02	; 2
     53c:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     540:	0e 94 77 03 	call	0x6ee	; 0x6ee <DIO_CLR_BIT>
		delay_ms(1); /* delay for th*/
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	80 e8       	ldi	r24, 0x80	; 128
     54a:	9f e3       	ldi	r25, 0x3F	; 63
     54c:	0e 94 18 07 	call	0xe30	; 0xe30 <delay_ms>
		DIO_set(data_port, data_8); 
		delay_ms(1); /* delay for tpsw*/
		DIO_CLR_BIT(ctrl_port, E); 
		delay_ms(1); /* delay for th*/
	#endif	
}
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <send_string>:
void send_string(uint8_t* str)
{
     554:	0f 93       	push	r16
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	8c 01       	movw	r16, r24
	uint8_t char_index = 0;
     55c:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[char_index] != '\0')
     55e:	03 c0       	rjmp	.+6      	; 0x566 <send_string+0x12>
	{
		send_char(str[char_index]);
     560:	0e 94 46 02 	call	0x48c	; 0x48c <send_char>
		char_index ++;
     564:	cf 5f       	subi	r28, 0xFF	; 255
	#endif	
}
void send_string(uint8_t* str)
{
	uint8_t char_index = 0;
	while(str[char_index] != '\0')
     566:	f8 01       	movw	r30, r16
     568:	ec 0f       	add	r30, r28
     56a:	f1 1d       	adc	r31, r1
     56c:	80 81       	ld	r24, Z
     56e:	81 11       	cpse	r24, r1
     570:	f7 cf       	rjmp	.-18     	; 0x560 <send_string+0xc>
	{
		send_char(str[char_index]);
		char_index ++;
	}
}
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	08 95       	ret

0000057a <go_to_row_column>:
	send_string(str);
}
void go_to_row_column(uint8_t row, uint8_t col)
{
	uint8_t address = 0;
	switch(row)
     57a:	88 23       	and	r24, r24
     57c:	29 f0       	breq	.+10     	; 0x588 <go_to_row_column+0xe>
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	11 f0       	breq	.+4      	; 0x586 <go_to_row_column+0xc>
	}
	send_string(str);
}
void go_to_row_column(uint8_t row, uint8_t col)
{
	uint8_t address = 0;
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	01 c0       	rjmp	.+2      	; 0x588 <go_to_row_column+0xe>
	{
		case first_row:
			address = col;
			break;
		case second_row:
			address = col + second_row_address;
     586:	60 5c       	subi	r22, 0xC0	; 192
			break;
	}
	send_cmd (address | cursor_location); // address + 0x80
     588:	86 2f       	mov	r24, r22
     58a:	80 68       	ori	r24, 0x80	; 128
     58c:	0e 94 c4 01 	call	0x388	; 0x388 <send_cmd>
     590:	08 95       	ret

00000592 <swap>:
}
void swap(uint8_t* num1, uint8_t* num2)
{
     592:	fc 01       	movw	r30, r24
     594:	db 01       	movw	r26, r22
	*num1 ^= *num2;
     596:	9c 91       	ld	r25, X
     598:	80 81       	ld	r24, Z
     59a:	98 27       	eor	r25, r24
     59c:	90 83       	st	Z, r25
	*num2 ^= *num1;
     59e:	2c 91       	ld	r18, X
     5a0:	92 27       	eor	r25, r18
     5a2:	9c 93       	st	X, r25
	*num1 ^= *num2;
     5a4:	80 81       	ld	r24, Z
     5a6:	98 27       	eor	r25, r24
     5a8:	90 83       	st	Z, r25
     5aa:	08 95       	ret

000005ac <LCD_intgerToString>:
		char_index ++;
	}
}

void LCD_intgerToString(uint8_t data)
{
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
	uint8_t* str = "0";
	if(data < 10 && -10 < data)
     5b0:	8a 30       	cpi	r24, 0x0A	; 10
     5b2:	e8 f4       	brcc	.+58     	; 0x5ee <LCD_intgerToString+0x42>
	{
		str[0] = data + '0'; // add 0 ascii to convert to character 
     5b4:	e8 ec       	ldi	r30, 0xC8	; 200
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 5d       	subi	r24, 0xD0	; 208
     5ba:	80 83       	st	Z, r24
		str[1] = '\0';	 // null terminator
     5bc:	11 82       	std	Z+1, r1	; 0x01
     5be:	3a c0       	rjmp	.+116    	; 0x634 <LCD_intgerToString+0x88>
	else
	{
		uint8_t iterator = 0;
		while((data / 10) != 0)
		{
			str[iterator] = (data % 10) + '0';
     5c0:	e2 2f       	mov	r30, r18
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	e8 53       	subi	r30, 0x38	; 56
     5c6:	ff 4f       	sbci	r31, 0xFF	; 255
     5c8:	9d ec       	ldi	r25, 0xCD	; 205
     5ca:	89 9f       	mul	r24, r25
     5cc:	91 2d       	mov	r25, r1
     5ce:	11 24       	eor	r1, r1
     5d0:	96 95       	lsr	r25
     5d2:	96 95       	lsr	r25
     5d4:	96 95       	lsr	r25
     5d6:	49 2f       	mov	r20, r25
     5d8:	44 0f       	add	r20, r20
     5da:	34 2f       	mov	r19, r20
     5dc:	33 0f       	add	r19, r19
     5de:	33 0f       	add	r19, r19
     5e0:	34 0f       	add	r19, r20
     5e2:	83 1b       	sub	r24, r19
     5e4:	80 5d       	subi	r24, 0xD0	; 208
     5e6:	80 83       	st	Z, r24
			data /= 10;
     5e8:	89 2f       	mov	r24, r25
			iterator++;
     5ea:	2f 5f       	subi	r18, 0xFF	; 255
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <LCD_intgerToString+0x44>
     5ee:	20 e0       	ldi	r18, 0x00	; 0
		str[1] = '\0';	 // null terminator
	}
	else
	{
		uint8_t iterator = 0;
		while((data / 10) != 0)
     5f0:	8a 30       	cpi	r24, 0x0A	; 10
     5f2:	30 f7       	brcc	.-52     	; 0x5c0 <LCD_intgerToString+0x14>
		{
			str[iterator] = (data % 10) + '0';
			data /= 10;
			iterator++;
		}
		str[iterator] = data + '0'; // last number
     5f4:	e2 2f       	mov	r30, r18
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	e8 53       	subi	r30, 0x38	; 56
     5fa:	ff 4f       	sbci	r31, 0xFF	; 255
     5fc:	80 5d       	subi	r24, 0xD0	; 208
     5fe:	80 83       	st	Z, r24
		iterator++;
     600:	c1 e0       	ldi	r28, 0x01	; 1
     602:	c2 0f       	add	r28, r18
		str[iterator] = '\0';	 // null terminator
     604:	ec 2f       	mov	r30, r28
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	e8 53       	subi	r30, 0x38	; 56
     60a:	ff 4f       	sbci	r31, 0xFF	; 255
     60c:	10 82       	st	Z, r1
		for(uint8_t num_index = 0; num_index < iterator/2; num_index++) 
     60e:	d0 e0       	ldi	r29, 0x00	; 0
     610:	0d c0       	rjmp	.+26     	; 0x62c <LCD_intgerToString+0x80>
		{
			swap(&str[num_index], &str[ iterator - num_index-1]);
     612:	6c 2f       	mov	r22, r28
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	8d 2f       	mov	r24, r29
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	68 1b       	sub	r22, r24
     61c:	79 0b       	sbc	r23, r25
     61e:	69 53       	subi	r22, 0x39	; 57
     620:	7f 4f       	sbci	r23, 0xFF	; 255
     622:	88 53       	subi	r24, 0x38	; 56
     624:	9f 4f       	sbci	r25, 0xFF	; 255
     626:	0e 94 c9 02 	call	0x592	; 0x592 <swap>
			iterator++;
		}
		str[iterator] = data + '0'; // last number
		iterator++;
		str[iterator] = '\0';	 // null terminator
		for(uint8_t num_index = 0; num_index < iterator/2; num_index++) 
     62a:	df 5f       	subi	r29, 0xFF	; 255
     62c:	8c 2f       	mov	r24, r28
     62e:	86 95       	lsr	r24
     630:	d8 17       	cp	r29, r24
     632:	78 f3       	brcs	.-34     	; 0x612 <LCD_intgerToString+0x66>
		{
			swap(&str[num_index], &str[ iterator - num_index-1]);
		}
	}
	send_string(str);
     634:	88 ec       	ldi	r24, 0xC8	; 200
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 aa 02 	call	0x554	; 0x554 <send_string>
}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	08 95       	ret

00000642 <initiate_timer>:
 *  Author: Omar
 */ 
#include "timers_HAL.h"
void initiate_timer(const config* conf)
{
	Timer_init(conf);
     642:	0e 94 cd 04 	call	0x99a	; 0x99a <Timer_init>
     646:	08 95       	ret

00000648 <main>:
 */ 

#include "APP/App.h"
int main(void)
{
	app_init();
     648:	0e 94 69 00 	call	0xd2	; 0xd2 <app_init>
	home_screen();
     64c:	0e 94 b2 00 	call	0x164	; 0x164 <home_screen>
    while (1) 
    {
		app();
     650:	0e 94 2d 01 	call	0x25a	; 0x25a <app>
     654:	fd cf       	rjmp	.-6      	; 0x650 <main+0x8>

00000656 <DIO_init>:
			Data =  PIND & pins;
		}
		break;
	}
	return Data;
}
     656:	81 30       	cpi	r24, 0x01	; 1
     658:	51 f0       	breq	.+20     	; 0x66e <DIO_init+0x18>
     65a:	28 f0       	brcs	.+10     	; 0x666 <DIO_init+0x10>
     65c:	82 30       	cpi	r24, 0x02	; 2
     65e:	59 f0       	breq	.+22     	; 0x676 <DIO_init+0x20>
     660:	83 30       	cpi	r24, 0x03	; 3
     662:	69 f0       	breq	.+26     	; 0x67e <DIO_init+0x28>
     664:	08 95       	ret
     666:	8a b3       	in	r24, 0x1a	; 26
     668:	68 2b       	or	r22, r24
     66a:	6a bb       	out	0x1a, r22	; 26
     66c:	08 95       	ret
     66e:	87 b3       	in	r24, 0x17	; 23
     670:	68 2b       	or	r22, r24
     672:	67 bb       	out	0x17, r22	; 23
     674:	08 95       	ret
     676:	84 b3       	in	r24, 0x14	; 20
     678:	68 2b       	or	r22, r24
     67a:	64 bb       	out	0x14, r22	; 20
     67c:	08 95       	ret
     67e:	81 b3       	in	r24, 0x11	; 17
     680:	68 2b       	or	r22, r24
     682:	61 bb       	out	0x11, r22	; 17
     684:	08 95       	ret

00000686 <DIO_set>:
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	51 f0       	breq	.+20     	; 0x69e <DIO_set+0x18>
     68a:	28 f0       	brcs	.+10     	; 0x696 <DIO_set+0x10>
     68c:	82 30       	cpi	r24, 0x02	; 2
     68e:	59 f0       	breq	.+22     	; 0x6a6 <DIO_set+0x20>
     690:	83 30       	cpi	r24, 0x03	; 3
     692:	69 f0       	breq	.+26     	; 0x6ae <DIO_set+0x28>
     694:	08 95       	ret
     696:	8b b3       	in	r24, 0x1b	; 27
     698:	68 2b       	or	r22, r24
     69a:	6b bb       	out	0x1b, r22	; 27
     69c:	08 95       	ret
     69e:	8b b3       	in	r24, 0x1b	; 27
     6a0:	68 2b       	or	r22, r24
     6a2:	6b bb       	out	0x1b, r22	; 27
     6a4:	08 95       	ret
     6a6:	8b b3       	in	r24, 0x1b	; 27
     6a8:	68 2b       	or	r22, r24
     6aa:	6b bb       	out	0x1b, r22	; 27
     6ac:	08 95       	ret
     6ae:	8b b3       	in	r24, 0x1b	; 27
     6b0:	68 2b       	or	r22, r24
     6b2:	6b bb       	out	0x1b, r22	; 27
     6b4:	08 95       	ret

000006b6 <DIO_CLR>:
     6b6:	81 30       	cpi	r24, 0x01	; 1
     6b8:	59 f0       	breq	.+22     	; 0x6d0 <DIO_CLR+0x1a>
     6ba:	28 f0       	brcs	.+10     	; 0x6c6 <DIO_CLR+0x10>
     6bc:	82 30       	cpi	r24, 0x02	; 2
     6be:	69 f0       	breq	.+26     	; 0x6da <DIO_CLR+0x24>
     6c0:	83 30       	cpi	r24, 0x03	; 3
     6c2:	81 f0       	breq	.+32     	; 0x6e4 <DIO_CLR+0x2e>
     6c4:	08 95       	ret
     6c6:	8b b3       	in	r24, 0x1b	; 27
     6c8:	60 95       	com	r22
     6ca:	68 23       	and	r22, r24
     6cc:	6b bb       	out	0x1b, r22	; 27
     6ce:	08 95       	ret
     6d0:	88 b3       	in	r24, 0x18	; 24
     6d2:	60 95       	com	r22
     6d4:	68 23       	and	r22, r24
     6d6:	68 bb       	out	0x18, r22	; 24
     6d8:	08 95       	ret
     6da:	85 b3       	in	r24, 0x15	; 21
     6dc:	60 95       	com	r22
     6de:	68 23       	and	r22, r24
     6e0:	65 bb       	out	0x15, r22	; 21
     6e2:	08 95       	ret
     6e4:	82 b3       	in	r24, 0x12	; 18
     6e6:	60 95       	com	r22
     6e8:	68 23       	and	r22, r24
     6ea:	62 bb       	out	0x12, r22	; 18
     6ec:	08 95       	ret

000006ee <DIO_CLR_BIT>:
void DIO_CLR_BIT(uint8_t Port_name, uint8_t pin)
{
	switch(Port_name)
     6ee:	81 30       	cpi	r24, 0x01	; 1
     6f0:	91 f0       	breq	.+36     	; 0x716 <DIO_CLR_BIT+0x28>
     6f2:	28 f0       	brcs	.+10     	; 0x6fe <DIO_CLR_BIT+0x10>
     6f4:	82 30       	cpi	r24, 0x02	; 2
     6f6:	d9 f0       	breq	.+54     	; 0x72e <DIO_CLR_BIT+0x40>
     6f8:	83 30       	cpi	r24, 0x03	; 3
     6fa:	29 f1       	breq	.+74     	; 0x746 <DIO_CLR_BIT+0x58>
     6fc:	08 95       	ret
	{
		case PA:
		{
			CLRBIT(PORTA,pin);
     6fe:	2b b3       	in	r18, 0x1b	; 27
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_CLR_BIT+0x1c>
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	6a 95       	dec	r22
     70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_CLR_BIT+0x18>
     70e:	80 95       	com	r24
     710:	82 23       	and	r24, r18
     712:	8b bb       	out	0x1b, r24	; 27
		}
		break;
     714:	08 95       	ret
		case PB:
		{
			CLRBIT(PORTB,pin);
     716:	28 b3       	in	r18, 0x18	; 24
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_CLR_BIT+0x34>
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	6a 95       	dec	r22
     724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_CLR_BIT+0x30>
     726:	80 95       	com	r24
     728:	82 23       	and	r24, r18
     72a:	88 bb       	out	0x18, r24	; 24
		}
		break;
     72c:	08 95       	ret
		case PC:
		{
			CLRBIT(PORTC,pin);
     72e:	25 b3       	in	r18, 0x15	; 21
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_CLR_BIT+0x4c>
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	6a 95       	dec	r22
     73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_CLR_BIT+0x48>
     73e:	80 95       	com	r24
     740:	82 23       	and	r24, r18
     742:	85 bb       	out	0x15, r24	; 21
		}
		break;
     744:	08 95       	ret
		case PD:
		{
			CLRBIT(PORTD,pin);
     746:	22 b3       	in	r18, 0x12	; 18
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_CLR_BIT+0x64>
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	6a 95       	dec	r22
     754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_CLR_BIT+0x60>
     756:	80 95       	com	r24
     758:	82 23       	and	r24, r18
     75a:	82 bb       	out	0x12, r24	; 18
     75c:	08 95       	ret

0000075e <DIO_SET_BIT>:
		break;
	}
}
void DIO_SET_BIT(uint8_t Port_name, uint8_t pin)
{
	switch(Port_name)
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	89 f0       	breq	.+34     	; 0x784 <DIO_SET_BIT+0x26>
     762:	28 f0       	brcs	.+10     	; 0x76e <DIO_SET_BIT+0x10>
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	c9 f0       	breq	.+50     	; 0x79a <DIO_SET_BIT+0x3c>
     768:	83 30       	cpi	r24, 0x03	; 3
     76a:	11 f1       	breq	.+68     	; 0x7b0 <DIO_SET_BIT+0x52>
     76c:	08 95       	ret
	{
		case PA:
		{
			SETBIT(PORTA,pin);
     76e:	2b b3       	in	r18, 0x1b	; 27
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	02 c0       	rjmp	.+4      	; 0x77a <DIO_SET_BIT+0x1c>
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
     77a:	6a 95       	dec	r22
     77c:	e2 f7       	brpl	.-8      	; 0x776 <DIO_SET_BIT+0x18>
     77e:	82 2b       	or	r24, r18
     780:	8b bb       	out	0x1b, r24	; 27
		}
		break;
     782:	08 95       	ret
		case PB:
		{
			SETBIT(PORTB,pin);
     784:	28 b3       	in	r18, 0x18	; 24
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	02 c0       	rjmp	.+4      	; 0x790 <DIO_SET_BIT+0x32>
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	6a 95       	dec	r22
     792:	e2 f7       	brpl	.-8      	; 0x78c <DIO_SET_BIT+0x2e>
     794:	82 2b       	or	r24, r18
     796:	88 bb       	out	0x18, r24	; 24
		}
		break;
     798:	08 95       	ret
		case PC:
		{
			SETBIT(PORTC,pin);
     79a:	25 b3       	in	r18, 0x15	; 21
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <DIO_SET_BIT+0x48>
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	6a 95       	dec	r22
     7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <DIO_SET_BIT+0x44>
     7aa:	82 2b       	or	r24, r18
     7ac:	85 bb       	out	0x15, r24	; 21
		}
		break;
     7ae:	08 95       	ret
		case PD:
		{
			SETBIT(PORTD,pin);
     7b0:	22 b3       	in	r18, 0x12	; 18
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <DIO_SET_BIT+0x5e>
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	6a 95       	dec	r22
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <DIO_SET_BIT+0x5a>
     7c0:	82 2b       	or	r24, r18
     7c2:	82 bb       	out	0x12, r24	; 18
     7c4:	08 95       	ret

000007c6 <__vector_7>:
			break;
		case  timer1:
			Timer1_Call_Back_Ptr = Ptr2Func;
			break;
		case  timer2:
			Timer2_Call_Back_Ptr = Ptr2Func;
     7c6:	1f 92       	push	r1
     7c8:	0f 92       	push	r0
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	0f 92       	push	r0
     7ce:	11 24       	eor	r1, r1
     7d0:	2f 93       	push	r18
     7d2:	3f 93       	push	r19
     7d4:	4f 93       	push	r20
     7d6:	5f 93       	push	r21
     7d8:	6f 93       	push	r22
     7da:	7f 93       	push	r23
     7dc:	8f 93       	push	r24
     7de:	9f 93       	push	r25
     7e0:	af 93       	push	r26
     7e2:	bf 93       	push	r27
     7e4:	ef 93       	push	r30
     7e6:	ff 93       	push	r31
     7e8:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <Timer1_Call_Back_Ptr>
     7ec:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <Timer1_Call_Back_Ptr+0x1>
     7f0:	09 95       	icall
     7f2:	ff 91       	pop	r31
     7f4:	ef 91       	pop	r30
     7f6:	bf 91       	pop	r27
     7f8:	af 91       	pop	r26
     7fa:	9f 91       	pop	r25
     7fc:	8f 91       	pop	r24
     7fe:	7f 91       	pop	r23
     800:	6f 91       	pop	r22
     802:	5f 91       	pop	r21
     804:	4f 91       	pop	r20
     806:	3f 91       	pop	r19
     808:	2f 91       	pop	r18
     80a:	0f 90       	pop	r0
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	0f 90       	pop	r0
     810:	1f 90       	pop	r1
     812:	18 95       	reti

00000814 <__vector_9>:
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	2f 93       	push	r18
     820:	3f 93       	push	r19
     822:	4f 93       	push	r20
     824:	5f 93       	push	r21
     826:	6f 93       	push	r22
     828:	7f 93       	push	r23
     82a:	8f 93       	push	r24
     82c:	9f 93       	push	r25
     82e:	af 93       	push	r26
     830:	bf 93       	push	r27
     832:	ef 93       	push	r30
     834:	ff 93       	push	r31
     836:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <Timer1_Call_Back_Ptr>
     83a:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <Timer1_Call_Back_Ptr+0x1>
     83e:	09 95       	icall
     840:	ff 91       	pop	r31
     842:	ef 91       	pop	r30
     844:	bf 91       	pop	r27
     846:	af 91       	pop	r26
     848:	9f 91       	pop	r25
     84a:	8f 91       	pop	r24
     84c:	7f 91       	pop	r23
     84e:	6f 91       	pop	r22
     850:	5f 91       	pop	r21
     852:	4f 91       	pop	r20
     854:	3f 91       	pop	r19
     856:	2f 91       	pop	r18
     858:	0f 90       	pop	r0
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	0f 90       	pop	r0
     85e:	1f 90       	pop	r1
     860:	18 95       	reti

00000862 <__vector_10>:
     862:	1f 92       	push	r1
     864:	0f 92       	push	r0
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	0f 92       	push	r0
     86a:	11 24       	eor	r1, r1
     86c:	2f 93       	push	r18
     86e:	3f 93       	push	r19
     870:	4f 93       	push	r20
     872:	5f 93       	push	r21
     874:	6f 93       	push	r22
     876:	7f 93       	push	r23
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
     880:	ef 93       	push	r30
     882:	ff 93       	push	r31
     884:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <Timer0_Call_Back_Ptr>
     888:	f0 91 cf 00 	lds	r31, 0x00CF	; 0x8000cf <Timer0_Call_Back_Ptr+0x1>
     88c:	09 95       	icall
     88e:	ff 91       	pop	r31
     890:	ef 91       	pop	r30
     892:	bf 91       	pop	r27
     894:	af 91       	pop	r26
     896:	9f 91       	pop	r25
     898:	8f 91       	pop	r24
     89a:	7f 91       	pop	r23
     89c:	6f 91       	pop	r22
     89e:	5f 91       	pop	r21
     8a0:	4f 91       	pop	r20
     8a2:	3f 91       	pop	r19
     8a4:	2f 91       	pop	r18
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <__vector_11>:
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	2f 93       	push	r18
     8bc:	3f 93       	push	r19
     8be:	4f 93       	push	r20
     8c0:	5f 93       	push	r21
     8c2:	6f 93       	push	r22
     8c4:	7f 93       	push	r23
     8c6:	8f 93       	push	r24
     8c8:	9f 93       	push	r25
     8ca:	af 93       	push	r26
     8cc:	bf 93       	push	r27
     8ce:	ef 93       	push	r30
     8d0:	ff 93       	push	r31
     8d2:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <Timer0_Call_Back_Ptr>
     8d6:	f0 91 cf 00 	lds	r31, 0x00CF	; 0x8000cf <Timer0_Call_Back_Ptr+0x1>
     8da:	09 95       	icall
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_4>:
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	2f 93       	push	r18
     90a:	3f 93       	push	r19
     90c:	4f 93       	push	r20
     90e:	5f 93       	push	r21
     910:	6f 93       	push	r22
     912:	7f 93       	push	r23
     914:	8f 93       	push	r24
     916:	9f 93       	push	r25
     918:	af 93       	push	r26
     91a:	bf 93       	push	r27
     91c:	ef 93       	push	r30
     91e:	ff 93       	push	r31
     920:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <__data_end>
     924:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <__data_end+0x1>
     928:	09 95       	icall
     92a:	ff 91       	pop	r31
     92c:	ef 91       	pop	r30
     92e:	bf 91       	pop	r27
     930:	af 91       	pop	r26
     932:	9f 91       	pop	r25
     934:	8f 91       	pop	r24
     936:	7f 91       	pop	r23
     938:	6f 91       	pop	r22
     93a:	5f 91       	pop	r21
     93c:	4f 91       	pop	r20
     93e:	3f 91       	pop	r19
     940:	2f 91       	pop	r18
     942:	0f 90       	pop	r0
     944:	0f be       	out	0x3f, r0	; 63
     946:	0f 90       	pop	r0
     948:	1f 90       	pop	r1
     94a:	18 95       	reti

0000094c <__vector_5>:
     94c:	1f 92       	push	r1
     94e:	0f 92       	push	r0
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	0f 92       	push	r0
     954:	11 24       	eor	r1, r1
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	ef 93       	push	r30
     96c:	ff 93       	push	r31
     96e:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <__data_end>
     972:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <__data_end+0x1>
     976:	09 95       	icall
     978:	ff 91       	pop	r31
     97a:	ef 91       	pop	r30
     97c:	bf 91       	pop	r27
     97e:	af 91       	pop	r26
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	7f 91       	pop	r23
     986:	6f 91       	pop	r22
     988:	5f 91       	pop	r21
     98a:	4f 91       	pop	r20
     98c:	3f 91       	pop	r19
     98e:	2f 91       	pop	r18
     990:	0f 90       	pop	r0
     992:	0f be       	out	0x3f, r0	; 63
     994:	0f 90       	pop	r0
     996:	1f 90       	pop	r1
     998:	18 95       	reti

0000099a <Timer_init>:
			break;	
	}
}
void Timer_init(const config* conf)
{
     99a:	fc 01       	movw	r30, r24
	if(conf->timer_num == timer0)
     99c:	80 81       	ld	r24, Z
     99e:	81 11       	cpse	r24, r1
     9a0:	b3 c0       	rjmp	.+358    	; 0xb08 <Timer_init+0x16e>
	{
		if(conf->timer_mode == normal)
     9a2:	81 81       	ldd	r24, Z+1	; 0x01
     9a4:	81 11       	cpse	r24, r1
     9a6:	54 c0       	rjmp	.+168    	; 0xa50 <Timer_init+0xb6>
		{
			TCNT0 = 0; //set timer initial value to 0
     9a8:	12 be       	out	0x32, r1	; 50
			SETBIT(TIMSK,0); //enable overflow interrupt
     9aa:	89 b7       	in	r24, 0x39	; 57
     9ac:	81 60       	ori	r24, 0x01	; 1
     9ae:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR0,7); //set FOCO pin non_pwm mode
     9b0:	83 b7       	in	r24, 0x33	; 51
     9b2:	80 68       	ori	r24, 0x80	; 128
     9b4:	83 bf       	out	0x33, r24	; 51
			switch(conf->timer_preScale)
     9b6:	82 81       	ldd	r24, Z+2	; 0x02
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	11 f1       	breq	.+68     	; 0xa00 <Timer_init+0x66>
     9bc:	28 f4       	brcc	.+10     	; 0x9c8 <Timer_init+0x2e>
     9be:	88 23       	and	r24, r24
     9c0:	59 f0       	breq	.+22     	; 0x9d8 <Timer_init+0x3e>
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	99 f0       	breq	.+38     	; 0x9ec <Timer_init+0x52>
     9c6:	08 95       	ret
     9c8:	86 30       	cpi	r24, 0x06	; 6
     9ca:	71 f1       	breq	.+92     	; 0xa28 <Timer_init+0x8e>
     9cc:	87 30       	cpi	r24, 0x07	; 7
     9ce:	b1 f1       	breq	.+108    	; 0xa3c <Timer_init+0xa2>
     9d0:	85 30       	cpi	r24, 0x05	; 5
     9d2:	09 f0       	breq	.+2      	; 0x9d6 <Timer_init+0x3c>
     9d4:	2c c2       	rjmp	.+1112   	; 0xe2e <Timer_init+0x494>
     9d6:	1e c0       	rjmp	.+60     	; 0xa14 <Timer_init+0x7a>
			{
				case no_clock:
					CLRBIT(TCCR0,0);
     9d8:	83 b7       	in	r24, 0x33	; 51
     9da:	8e 7f       	andi	r24, 0xFE	; 254
     9dc:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     9de:	83 b7       	in	r24, 0x33	; 51
     9e0:	8d 7f       	andi	r24, 0xFD	; 253
     9e2:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     9e4:	83 b7       	in	r24, 0x33	; 51
     9e6:	8b 7f       	andi	r24, 0xFB	; 251
     9e8:	83 bf       	out	0x33, r24	; 51
					break;
     9ea:	08 95       	ret
				case f_cpu_clk:
					SETBIT(TCCR0,0);
     9ec:	83 b7       	in	r24, 0x33	; 51
     9ee:	81 60       	ori	r24, 0x01	; 1
     9f0:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     9f2:	83 b7       	in	r24, 0x33	; 51
     9f4:	8d 7f       	andi	r24, 0xFD	; 253
     9f6:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     9f8:	83 b7       	in	r24, 0x33	; 51
     9fa:	8b 7f       	andi	r24, 0xFB	; 251
     9fc:	83 bf       	out	0x33, r24	; 51
					break;
     9fe:	08 95       	ret
				case f_cpu_clk_8:
					CLRBIT(TCCR0,0);
     a00:	83 b7       	in	r24, 0x33	; 51
     a02:	8e 7f       	andi	r24, 0xFE	; 254
     a04:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     a06:	83 b7       	in	r24, 0x33	; 51
     a08:	82 60       	ori	r24, 0x02	; 2
     a0a:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     a0c:	83 b7       	in	r24, 0x33	; 51
     a0e:	8b 7f       	andi	r24, 0xFB	; 251
     a10:	83 bf       	out	0x33, r24	; 51
					break;	
     a12:	08 95       	ret
				case f_cpu_clk_32:
					break;
				case f_cpu_clk_64:
					SETBIT(TCCR0,0);
     a14:	83 b7       	in	r24, 0x33	; 51
     a16:	81 60       	ori	r24, 0x01	; 1
     a18:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     a1a:	83 b7       	in	r24, 0x33	; 51
     a1c:	82 60       	ori	r24, 0x02	; 2
     a1e:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     a20:	83 b7       	in	r24, 0x33	; 51
     a22:	8b 7f       	andi	r24, 0xFB	; 251
     a24:	83 bf       	out	0x33, r24	; 51
					break;
     a26:	08 95       	ret
				case f_cpu_clk_128:
					break;	
				case f_cpu_clk_256:
					CLRBIT(TCCR0,0);
     a28:	83 b7       	in	r24, 0x33	; 51
     a2a:	8e 7f       	andi	r24, 0xFE	; 254
     a2c:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     a2e:	83 b7       	in	r24, 0x33	; 51
     a30:	8d 7f       	andi	r24, 0xFD	; 253
     a32:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     a34:	83 b7       	in	r24, 0x33	; 51
     a36:	84 60       	ori	r24, 0x04	; 4
     a38:	83 bf       	out	0x33, r24	; 51
					break;	
     a3a:	08 95       	ret
				case f_cpu_clk_1024:
					SETBIT(TCCR0,0);
     a3c:	83 b7       	in	r24, 0x33	; 51
     a3e:	81 60       	ori	r24, 0x01	; 1
     a40:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     a42:	83 b7       	in	r24, 0x33	; 51
     a44:	8d 7f       	andi	r24, 0xFD	; 253
     a46:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     a48:	83 b7       	in	r24, 0x33	; 51
     a4a:	84 60       	ori	r24, 0x04	; 4
     a4c:	83 bf       	out	0x33, r24	; 51
					break;
     a4e:	08 95       	ret
			}
		}
		else if(conf->timer_mode == compare)
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	09 f0       	breq	.+2      	; 0xa56 <Timer_init+0xbc>
     a54:	ec c1       	rjmp	.+984    	; 0xe2e <Timer_init+0x494>
		{
			TCNT0 = 0; //set timer initial value to 0
     a56:	12 be       	out	0x32, r1	; 50
			SETBIT(TIMSK,1); //enable compare interrupt	
     a58:	89 b7       	in	r24, 0x39	; 57
     a5a:	82 60       	ori	r24, 0x02	; 2
     a5c:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR0,3);//set FOCO pin non_pwm mode and WGM
     a5e:	83 b7       	in	r24, 0x33	; 51
     a60:	88 60       	ori	r24, 0x08	; 8
     a62:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,7);//set FOCO pin non_pwm mode and WGM
     a64:	83 b7       	in	r24, 0x33	; 51
     a66:	80 68       	ori	r24, 0x80	; 128
     a68:	83 bf       	out	0x33, r24	; 51
			OCR0  = conf->ticks_num; //set the compare value
     a6a:	83 81       	ldd	r24, Z+3	; 0x03
     a6c:	8c bf       	out	0x3c, r24	; 60
			switch(conf->timer_preScale)
     a6e:	82 81       	ldd	r24, Z+2	; 0x02
     a70:	82 30       	cpi	r24, 0x02	; 2
     a72:	11 f1       	breq	.+68     	; 0xab8 <Timer_init+0x11e>
     a74:	28 f4       	brcc	.+10     	; 0xa80 <Timer_init+0xe6>
     a76:	88 23       	and	r24, r24
     a78:	59 f0       	breq	.+22     	; 0xa90 <Timer_init+0xf6>
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	99 f0       	breq	.+38     	; 0xaa4 <Timer_init+0x10a>
     a7e:	08 95       	ret
     a80:	86 30       	cpi	r24, 0x06	; 6
     a82:	71 f1       	breq	.+92     	; 0xae0 <Timer_init+0x146>
     a84:	87 30       	cpi	r24, 0x07	; 7
     a86:	b1 f1       	breq	.+108    	; 0xaf4 <Timer_init+0x15a>
     a88:	85 30       	cpi	r24, 0x05	; 5
     a8a:	09 f0       	breq	.+2      	; 0xa8e <Timer_init+0xf4>
     a8c:	d0 c1       	rjmp	.+928    	; 0xe2e <Timer_init+0x494>
     a8e:	1e c0       	rjmp	.+60     	; 0xacc <Timer_init+0x132>
			{
				case no_clock:
				CLRBIT(TCCR0,0);
     a90:	83 b7       	in	r24, 0x33	; 51
     a92:	8e 7f       	andi	r24, 0xFE	; 254
     a94:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
     a96:	83 b7       	in	r24, 0x33	; 51
     a98:	8d 7f       	andi	r24, 0xFD	; 253
     a9a:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
     a9c:	83 b7       	in	r24, 0x33	; 51
     a9e:	8b 7f       	andi	r24, 0xFB	; 251
     aa0:	83 bf       	out	0x33, r24	; 51
				break;
     aa2:	08 95       	ret
				case f_cpu_clk:
				SETBIT(TCCR0,0);
     aa4:	83 b7       	in	r24, 0x33	; 51
     aa6:	81 60       	ori	r24, 0x01	; 1
     aa8:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
     aaa:	83 b7       	in	r24, 0x33	; 51
     aac:	8d 7f       	andi	r24, 0xFD	; 253
     aae:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
     ab0:	83 b7       	in	r24, 0x33	; 51
     ab2:	8b 7f       	andi	r24, 0xFB	; 251
     ab4:	83 bf       	out	0x33, r24	; 51
				break;
     ab6:	08 95       	ret
				case f_cpu_clk_8:
				CLRBIT(TCCR0,0);
     ab8:	83 b7       	in	r24, 0x33	; 51
     aba:	8e 7f       	andi	r24, 0xFE	; 254
     abc:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,1);
     abe:	83 b7       	in	r24, 0x33	; 51
     ac0:	82 60       	ori	r24, 0x02	; 2
     ac2:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
     ac4:	83 b7       	in	r24, 0x33	; 51
     ac6:	8b 7f       	andi	r24, 0xFB	; 251
     ac8:	83 bf       	out	0x33, r24	; 51
				break;
     aca:	08 95       	ret
				case f_cpu_clk_32:
				break;
				case f_cpu_clk_64:
				SETBIT(TCCR0,0);
     acc:	83 b7       	in	r24, 0x33	; 51
     ace:	81 60       	ori	r24, 0x01	; 1
     ad0:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,1);
     ad2:	83 b7       	in	r24, 0x33	; 51
     ad4:	82 60       	ori	r24, 0x02	; 2
     ad6:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
     ad8:	83 b7       	in	r24, 0x33	; 51
     ada:	8b 7f       	andi	r24, 0xFB	; 251
     adc:	83 bf       	out	0x33, r24	; 51
				break;
     ade:	08 95       	ret
				case f_cpu_clk_128:
				break;
				case f_cpu_clk_256:
				CLRBIT(TCCR0,0);
     ae0:	83 b7       	in	r24, 0x33	; 51
     ae2:	8e 7f       	andi	r24, 0xFE	; 254
     ae4:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
     ae6:	83 b7       	in	r24, 0x33	; 51
     ae8:	8d 7f       	andi	r24, 0xFD	; 253
     aea:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,2);
     aec:	83 b7       	in	r24, 0x33	; 51
     aee:	84 60       	ori	r24, 0x04	; 4
     af0:	83 bf       	out	0x33, r24	; 51
				break;
     af2:	08 95       	ret
				case f_cpu_clk_1024:
				SETBIT(TCCR0,0);
     af4:	83 b7       	in	r24, 0x33	; 51
     af6:	81 60       	ori	r24, 0x01	; 1
     af8:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
     afa:	83 b7       	in	r24, 0x33	; 51
     afc:	8d 7f       	andi	r24, 0xFD	; 253
     afe:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,2);
     b00:	83 b7       	in	r24, 0x33	; 51
     b02:	84 60       	ori	r24, 0x04	; 4
     b04:	83 bf       	out	0x33, r24	; 51
				break;
     b06:	08 95       	ret
			}
		}
	}
	else if(conf->timer_num == timer1)
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	09 f0       	breq	.+2      	; 0xb0e <Timer_init+0x174>
     b0c:	bd c0       	rjmp	.+378    	; 0xc88 <Timer_init+0x2ee>
	{
		if(conf->timer_mode == normal)
     b0e:	81 81       	ldd	r24, Z+1	; 0x01
     b10:	81 11       	cpse	r24, r1
     b12:	58 c0       	rjmp	.+176    	; 0xbc4 <Timer_init+0x22a>
		{
			TCNT1H = 0; //set timer initial value to 0
     b14:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0;
     b16:	1c bc       	out	0x2c, r1	; 44
			SETBIT(TIMSK,2); //enable overflow interrupt
     b18:	89 b7       	in	r24, 0x39	; 57
     b1a:	84 60       	ori	r24, 0x04	; 4
     b1c:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR1A,2); //non_pwm mode
     b1e:	8f b5       	in	r24, 0x2f	; 47
     b20:	84 60       	ori	r24, 0x04	; 4
     b22:	8f bd       	out	0x2f, r24	; 47
			SETBIT(TCCR1A,3); //non_pwm mode
     b24:	8f b5       	in	r24, 0x2f	; 47
     b26:	88 60       	ori	r24, 0x08	; 8
     b28:	8f bd       	out	0x2f, r24	; 47
			switch(conf->timer_preScale)
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	82 30       	cpi	r24, 0x02	; 2
     b2e:	11 f1       	breq	.+68     	; 0xb74 <Timer_init+0x1da>
     b30:	28 f4       	brcc	.+10     	; 0xb3c <Timer_init+0x1a2>
     b32:	88 23       	and	r24, r24
     b34:	59 f0       	breq	.+22     	; 0xb4c <Timer_init+0x1b2>
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	99 f0       	breq	.+38     	; 0xb60 <Timer_init+0x1c6>
     b3a:	08 95       	ret
     b3c:	86 30       	cpi	r24, 0x06	; 6
     b3e:	71 f1       	breq	.+92     	; 0xb9c <Timer_init+0x202>
     b40:	87 30       	cpi	r24, 0x07	; 7
     b42:	b1 f1       	breq	.+108    	; 0xbb0 <Timer_init+0x216>
     b44:	85 30       	cpi	r24, 0x05	; 5
     b46:	09 f0       	breq	.+2      	; 0xb4a <Timer_init+0x1b0>
     b48:	72 c1       	rjmp	.+740    	; 0xe2e <Timer_init+0x494>
     b4a:	1e c0       	rjmp	.+60     	; 0xb88 <Timer_init+0x1ee>
			{
				case no_clock:
				CLRBIT(TCCR1B,0);
     b4c:	8e b5       	in	r24, 0x2e	; 46
     b4e:	8e 7f       	andi	r24, 0xFE	; 254
     b50:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     b52:	8e b5       	in	r24, 0x2e	; 46
     b54:	8d 7f       	andi	r24, 0xFD	; 253
     b56:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     b58:	8e b5       	in	r24, 0x2e	; 46
     b5a:	8b 7f       	andi	r24, 0xFB	; 251
     b5c:	8e bd       	out	0x2e, r24	; 46
				break;
     b5e:	08 95       	ret
				case f_cpu_clk:
				SETBIT(TCCR1B,0);
     b60:	8e b5       	in	r24, 0x2e	; 46
     b62:	81 60       	ori	r24, 0x01	; 1
     b64:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     b66:	8e b5       	in	r24, 0x2e	; 46
     b68:	8d 7f       	andi	r24, 0xFD	; 253
     b6a:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     b6c:	8e b5       	in	r24, 0x2e	; 46
     b6e:	8b 7f       	andi	r24, 0xFB	; 251
     b70:	8e bd       	out	0x2e, r24	; 46
				break;
     b72:	08 95       	ret
				case f_cpu_clk_8:
				CLRBIT(TCCR1B,0);
     b74:	8e b5       	in	r24, 0x2e	; 46
     b76:	8e 7f       	andi	r24, 0xFE	; 254
     b78:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
     b7a:	8e b5       	in	r24, 0x2e	; 46
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     b80:	8e b5       	in	r24, 0x2e	; 46
     b82:	8b 7f       	andi	r24, 0xFB	; 251
     b84:	8e bd       	out	0x2e, r24	; 46
				break;
     b86:	08 95       	ret
				case f_cpu_clk_32:
				break;
				case f_cpu_clk_64:
				SETBIT(TCCR1B,0);
     b88:	8e b5       	in	r24, 0x2e	; 46
     b8a:	81 60       	ori	r24, 0x01	; 1
     b8c:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
     b8e:	8e b5       	in	r24, 0x2e	; 46
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     b94:	8e b5       	in	r24, 0x2e	; 46
     b96:	8b 7f       	andi	r24, 0xFB	; 251
     b98:	8e bd       	out	0x2e, r24	; 46
				break;
     b9a:	08 95       	ret
				case f_cpu_clk_128:
				break;
				case f_cpu_clk_256:
				CLRBIT(TCCR1B,0);
     b9c:	8e b5       	in	r24, 0x2e	; 46
     b9e:	8e 7f       	andi	r24, 0xFE	; 254
     ba0:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     ba2:	8e b5       	in	r24, 0x2e	; 46
     ba4:	8d 7f       	andi	r24, 0xFD	; 253
     ba6:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
     ba8:	8e b5       	in	r24, 0x2e	; 46
     baa:	84 60       	ori	r24, 0x04	; 4
     bac:	8e bd       	out	0x2e, r24	; 46
				break;
     bae:	08 95       	ret
				case f_cpu_clk_1024:
				SETBIT(TCCR1B,0);
     bb0:	8e b5       	in	r24, 0x2e	; 46
     bb2:	81 60       	ori	r24, 0x01	; 1
     bb4:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     bb6:	8e b5       	in	r24, 0x2e	; 46
     bb8:	8d 7f       	andi	r24, 0xFD	; 253
     bba:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
     bbc:	8e b5       	in	r24, 0x2e	; 46
     bbe:	84 60       	ori	r24, 0x04	; 4
     bc0:	8e bd       	out	0x2e, r24	; 46
				break;
     bc2:	08 95       	ret
			}
			
		}
		else if(conf->timer_mode == compare)
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	09 f0       	breq	.+2      	; 0xbca <Timer_init+0x230>
     bc8:	32 c1       	rjmp	.+612    	; 0xe2e <Timer_init+0x494>
		{
			TCNT1H = 0; //set timer initial value to 0
     bca:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0;
     bcc:	1c bc       	out	0x2c, r1	; 44
			SETBIT(TIMSK,4); //enable compare interrupt
     bce:	89 b7       	in	r24, 0x39	; 57
     bd0:	80 61       	ori	r24, 0x10	; 16
     bd2:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR1A,2); //non_pwm mode
     bd4:	8f b5       	in	r24, 0x2f	; 47
     bd6:	84 60       	ori	r24, 0x04	; 4
     bd8:	8f bd       	out	0x2f, r24	; 47
			SETBIT(TCCR1A,3); //non_pwm mode
     bda:	8f b5       	in	r24, 0x2f	; 47
     bdc:	88 60       	ori	r24, 0x08	; 8
     bde:	8f bd       	out	0x2f, r24	; 47
			OCR1AH = (uint8_t) (conf->ticks_num >> 8);
     be0:	84 81       	ldd	r24, Z+4	; 0x04
     be2:	8b bd       	out	0x2b, r24	; 43
			OCR1AL = (uint8_t)(conf->ticks_num & (0X00FF));
     be4:	83 81       	ldd	r24, Z+3	; 0x03
     be6:	8a bd       	out	0x2a, r24	; 42
			SETBIT(TCCR1B,3);
     be8:	8e b5       	in	r24, 0x2e	; 46
     bea:	88 60       	ori	r24, 0x08	; 8
     bec:	8e bd       	out	0x2e, r24	; 46
			switch(conf->timer_preScale)
     bee:	82 81       	ldd	r24, Z+2	; 0x02
     bf0:	82 30       	cpi	r24, 0x02	; 2
     bf2:	11 f1       	breq	.+68     	; 0xc38 <Timer_init+0x29e>
     bf4:	28 f4       	brcc	.+10     	; 0xc00 <Timer_init+0x266>
     bf6:	88 23       	and	r24, r24
     bf8:	59 f0       	breq	.+22     	; 0xc10 <Timer_init+0x276>
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	99 f0       	breq	.+38     	; 0xc24 <Timer_init+0x28a>
     bfe:	08 95       	ret
     c00:	86 30       	cpi	r24, 0x06	; 6
     c02:	71 f1       	breq	.+92     	; 0xc60 <Timer_init+0x2c6>
     c04:	87 30       	cpi	r24, 0x07	; 7
     c06:	b1 f1       	breq	.+108    	; 0xc74 <Timer_init+0x2da>
     c08:	85 30       	cpi	r24, 0x05	; 5
     c0a:	09 f0       	breq	.+2      	; 0xc0e <Timer_init+0x274>
     c0c:	10 c1       	rjmp	.+544    	; 0xe2e <Timer_init+0x494>
     c0e:	1e c0       	rjmp	.+60     	; 0xc4c <Timer_init+0x2b2>
			{
				case no_clock:
				CLRBIT(TCCR1B,0);
     c10:	8e b5       	in	r24, 0x2e	; 46
     c12:	8e 7f       	andi	r24, 0xFE	; 254
     c14:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     c16:	8e b5       	in	r24, 0x2e	; 46
     c18:	8d 7f       	andi	r24, 0xFD	; 253
     c1a:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     c1c:	8e b5       	in	r24, 0x2e	; 46
     c1e:	8b 7f       	andi	r24, 0xFB	; 251
     c20:	8e bd       	out	0x2e, r24	; 46
				break;
     c22:	08 95       	ret
				case f_cpu_clk:
				SETBIT(TCCR1B,0);
     c24:	8e b5       	in	r24, 0x2e	; 46
     c26:	81 60       	ori	r24, 0x01	; 1
     c28:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     c2a:	8e b5       	in	r24, 0x2e	; 46
     c2c:	8d 7f       	andi	r24, 0xFD	; 253
     c2e:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     c30:	8e b5       	in	r24, 0x2e	; 46
     c32:	8b 7f       	andi	r24, 0xFB	; 251
     c34:	8e bd       	out	0x2e, r24	; 46
				break;
     c36:	08 95       	ret
				case f_cpu_clk_8:
				CLRBIT(TCCR1B,0);
     c38:	8e b5       	in	r24, 0x2e	; 46
     c3a:	8e 7f       	andi	r24, 0xFE	; 254
     c3c:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
     c3e:	8e b5       	in	r24, 0x2e	; 46
     c40:	82 60       	ori	r24, 0x02	; 2
     c42:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     c44:	8e b5       	in	r24, 0x2e	; 46
     c46:	8b 7f       	andi	r24, 0xFB	; 251
     c48:	8e bd       	out	0x2e, r24	; 46
				break;
     c4a:	08 95       	ret
				case f_cpu_clk_32:
				break;
				case f_cpu_clk_64:
				SETBIT(TCCR1B,0);
     c4c:	8e b5       	in	r24, 0x2e	; 46
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
     c52:	8e b5       	in	r24, 0x2e	; 46
     c54:	82 60       	ori	r24, 0x02	; 2
     c56:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     c58:	8e b5       	in	r24, 0x2e	; 46
     c5a:	8b 7f       	andi	r24, 0xFB	; 251
     c5c:	8e bd       	out	0x2e, r24	; 46
				break;
     c5e:	08 95       	ret
				case f_cpu_clk_128:
				break;
				case f_cpu_clk_256:
				CLRBIT(TCCR1B,0);
     c60:	8e b5       	in	r24, 0x2e	; 46
     c62:	8e 7f       	andi	r24, 0xFE	; 254
     c64:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     c66:	8e b5       	in	r24, 0x2e	; 46
     c68:	8d 7f       	andi	r24, 0xFD	; 253
     c6a:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
     c6c:	8e b5       	in	r24, 0x2e	; 46
     c6e:	84 60       	ori	r24, 0x04	; 4
     c70:	8e bd       	out	0x2e, r24	; 46
				break;
     c72:	08 95       	ret
				case f_cpu_clk_1024:
				SETBIT(TCCR1B,0);
     c74:	8e b5       	in	r24, 0x2e	; 46
     c76:	81 60       	ori	r24, 0x01	; 1
     c78:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     c7a:	8e b5       	in	r24, 0x2e	; 46
     c7c:	8d 7f       	andi	r24, 0xFD	; 253
     c7e:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
     c80:	8e b5       	in	r24, 0x2e	; 46
     c82:	84 60       	ori	r24, 0x04	; 4
     c84:	8e bd       	out	0x2e, r24	; 46
				break;
     c86:	08 95       	ret
			}
			
		}	
	}
	else if(conf->timer_num == timer2)
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	09 f0       	breq	.+2      	; 0xc8e <Timer_init+0x2f4>
     c8c:	d0 c0       	rjmp	.+416    	; 0xe2e <Timer_init+0x494>
	{
		if(conf->timer_mode == normal)
     c8e:	81 81       	ldd	r24, Z+1	; 0x01
     c90:	81 11       	cpse	r24, r1
     c92:	63 c0       	rjmp	.+198    	; 0xd5a <Timer_init+0x3c0>
		{
			TCNT2 = 0; //set timer initial value to 0
     c94:	14 bc       	out	0x24, r1	; 36
			SETBIT(TIMSK,6); //enable overflow interrupt
     c96:	89 b7       	in	r24, 0x39	; 57
     c98:	80 64       	ori	r24, 0x40	; 64
     c9a:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR2,7); //set FOCO pin non_pwm mode
     c9c:	85 b5       	in	r24, 0x25	; 37
     c9e:	80 68       	ori	r24, 0x80	; 128
     ca0:	85 bd       	out	0x25, r24	; 37
			switch(conf->timer_preScale)
     ca2:	e2 81       	ldd	r30, Z+2	; 0x02
     ca4:	8e 2f       	mov	r24, r30
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	88 30       	cpi	r24, 0x08	; 8
     caa:	91 05       	cpc	r25, r1
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <Timer_init+0x316>
     cae:	bf c0       	rjmp	.+382    	; 0xe2e <Timer_init+0x494>
     cb0:	fc 01       	movw	r30, r24
     cb2:	e6 5c       	subi	r30, 0xC6	; 198
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__tablejump2__>
			{
				case no_clock:
					CLRBIT(TCCR0,0);
     cba:	83 b7       	in	r24, 0x33	; 51
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     cc0:	83 b7       	in	r24, 0x33	; 51
     cc2:	8d 7f       	andi	r24, 0xFD	; 253
     cc4:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     cc6:	83 b7       	in	r24, 0x33	; 51
     cc8:	8b 7f       	andi	r24, 0xFB	; 251
     cca:	83 bf       	out	0x33, r24	; 51
					break;
     ccc:	08 95       	ret
				case f_cpu_clk:
					SETBIT(TCCR0,0);
     cce:	83 b7       	in	r24, 0x33	; 51
     cd0:	81 60       	ori	r24, 0x01	; 1
     cd2:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     cd4:	83 b7       	in	r24, 0x33	; 51
     cd6:	8d 7f       	andi	r24, 0xFD	; 253
     cd8:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     cda:	83 b7       	in	r24, 0x33	; 51
     cdc:	8b 7f       	andi	r24, 0xFB	; 251
     cde:	83 bf       	out	0x33, r24	; 51
					break;
     ce0:	08 95       	ret
				case f_cpu_clk_8:
					CLRBIT(TCCR0,0);
     ce2:	83 b7       	in	r24, 0x33	; 51
     ce4:	8e 7f       	andi	r24, 0xFE	; 254
     ce6:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     ce8:	83 b7       	in	r24, 0x33	; 51
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     cee:	83 b7       	in	r24, 0x33	; 51
     cf0:	8b 7f       	andi	r24, 0xFB	; 251
     cf2:	83 bf       	out	0x33, r24	; 51
					break;
     cf4:	08 95       	ret
				case f_cpu_clk_32:
					SETBIT(TCCR0,0);
     cf6:	83 b7       	in	r24, 0x33	; 51
     cf8:	81 60       	ori	r24, 0x01	; 1
     cfa:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     cfc:	83 b7       	in	r24, 0x33	; 51
     cfe:	82 60       	ori	r24, 0x02	; 2
     d00:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     d02:	83 b7       	in	r24, 0x33	; 51
     d04:	8b 7f       	andi	r24, 0xFB	; 251
     d06:	83 bf       	out	0x33, r24	; 51
					break;
     d08:	08 95       	ret
				case f_cpu_clk_64:
					CLRBIT(TCCR0,0);
     d0a:	83 b7       	in	r24, 0x33	; 51
     d0c:	8e 7f       	andi	r24, 0xFE	; 254
     d0e:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     d10:	83 b7       	in	r24, 0x33	; 51
     d12:	8d 7f       	andi	r24, 0xFD	; 253
     d14:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     d16:	83 b7       	in	r24, 0x33	; 51
     d18:	84 60       	ori	r24, 0x04	; 4
     d1a:	83 bf       	out	0x33, r24	; 51
					break;
     d1c:	08 95       	ret
				case f_cpu_clk_128:
					SETBIT(TCCR0,0);
     d1e:	83 b7       	in	r24, 0x33	; 51
     d20:	81 60       	ori	r24, 0x01	; 1
     d22:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     d24:	83 b7       	in	r24, 0x33	; 51
     d26:	8d 7f       	andi	r24, 0xFD	; 253
     d28:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     d2a:	83 b7       	in	r24, 0x33	; 51
     d2c:	84 60       	ori	r24, 0x04	; 4
     d2e:	83 bf       	out	0x33, r24	; 51
					break;
     d30:	08 95       	ret
				case f_cpu_clk_256:
					CLRBIT(TCCR0,0);
     d32:	83 b7       	in	r24, 0x33	; 51
     d34:	8e 7f       	andi	r24, 0xFE	; 254
     d36:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     d38:	83 b7       	in	r24, 0x33	; 51
     d3a:	82 60       	ori	r24, 0x02	; 2
     d3c:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     d3e:	83 b7       	in	r24, 0x33	; 51
     d40:	84 60       	ori	r24, 0x04	; 4
     d42:	83 bf       	out	0x33, r24	; 51
					break;
     d44:	08 95       	ret
				case f_cpu_clk_1024:
					SETBIT(TCCR0,0);
     d46:	83 b7       	in	r24, 0x33	; 51
     d48:	81 60       	ori	r24, 0x01	; 1
     d4a:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     d4c:	83 b7       	in	r24, 0x33	; 51
     d4e:	82 60       	ori	r24, 0x02	; 2
     d50:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     d52:	83 b7       	in	r24, 0x33	; 51
     d54:	84 60       	ori	r24, 0x04	; 4
     d56:	83 bf       	out	0x33, r24	; 51
					break;
     d58:	08 95       	ret
			}	
		}
		else if(conf->timer_mode == compare)
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	09 f0       	breq	.+2      	; 0xd60 <Timer_init+0x3c6>
     d5e:	67 c0       	rjmp	.+206    	; 0xe2e <Timer_init+0x494>
		{
			TCNT2 = 0; //set timer initial value to 0
     d60:	14 bc       	out	0x24, r1	; 36
			SETBIT(TIMSK,7); //enable compare interrupt
     d62:	89 b7       	in	r24, 0x39	; 57
     d64:	80 68       	ori	r24, 0x80	; 128
     d66:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR2,3);//set FOCO pin non_pwm mode and WGM
     d68:	85 b5       	in	r24, 0x25	; 37
     d6a:	88 60       	ori	r24, 0x08	; 8
     d6c:	85 bd       	out	0x25, r24	; 37
			SETBIT(TCCR2,7);//set FOCO pin non_pwm mode and WGM
     d6e:	85 b5       	in	r24, 0x25	; 37
     d70:	80 68       	ori	r24, 0x80	; 128
     d72:	85 bd       	out	0x25, r24	; 37
			OCR2  = conf->ticks_num; //set the compare value
     d74:	83 81       	ldd	r24, Z+3	; 0x03
     d76:	83 bd       	out	0x23, r24	; 35
			switch(conf->timer_preScale)
     d78:	e2 81       	ldd	r30, Z+2	; 0x02
     d7a:	8e 2f       	mov	r24, r30
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	88 30       	cpi	r24, 0x08	; 8
     d80:	91 05       	cpc	r25, r1
     d82:	08 f0       	brcs	.+2      	; 0xd86 <Timer_init+0x3ec>
     d84:	54 c0       	rjmp	.+168    	; 0xe2e <Timer_init+0x494>
     d86:	fc 01       	movw	r30, r24
     d88:	ee 5b       	subi	r30, 0xBE	; 190
     d8a:	ff 4f       	sbci	r31, 0xFF	; 255
     d8c:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__tablejump2__>
			{
				case no_clock:
					CLRBIT(TCCR0,0);
     d90:	83 b7       	in	r24, 0x33	; 51
     d92:	8e 7f       	andi	r24, 0xFE	; 254
     d94:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     d96:	83 b7       	in	r24, 0x33	; 51
     d98:	8d 7f       	andi	r24, 0xFD	; 253
     d9a:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     d9c:	83 b7       	in	r24, 0x33	; 51
     d9e:	8b 7f       	andi	r24, 0xFB	; 251
     da0:	83 bf       	out	0x33, r24	; 51
					break;
     da2:	08 95       	ret
				case f_cpu_clk:
					SETBIT(TCCR0,0);
     da4:	83 b7       	in	r24, 0x33	; 51
     da6:	81 60       	ori	r24, 0x01	; 1
     da8:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     daa:	83 b7       	in	r24, 0x33	; 51
     dac:	8d 7f       	andi	r24, 0xFD	; 253
     dae:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     db0:	83 b7       	in	r24, 0x33	; 51
     db2:	8b 7f       	andi	r24, 0xFB	; 251
     db4:	83 bf       	out	0x33, r24	; 51
					break;
     db6:	08 95       	ret
				case f_cpu_clk_8:
					CLRBIT(TCCR0,0);
     db8:	83 b7       	in	r24, 0x33	; 51
     dba:	8e 7f       	andi	r24, 0xFE	; 254
     dbc:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     dbe:	83 b7       	in	r24, 0x33	; 51
     dc0:	82 60       	ori	r24, 0x02	; 2
     dc2:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     dc4:	83 b7       	in	r24, 0x33	; 51
     dc6:	8b 7f       	andi	r24, 0xFB	; 251
     dc8:	83 bf       	out	0x33, r24	; 51
					break;
     dca:	08 95       	ret
				case f_cpu_clk_32:
					SETBIT(TCCR0,0);
     dcc:	83 b7       	in	r24, 0x33	; 51
     dce:	81 60       	ori	r24, 0x01	; 1
     dd0:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     dd2:	83 b7       	in	r24, 0x33	; 51
     dd4:	82 60       	ori	r24, 0x02	; 2
     dd6:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     dd8:	83 b7       	in	r24, 0x33	; 51
     dda:	8b 7f       	andi	r24, 0xFB	; 251
     ddc:	83 bf       	out	0x33, r24	; 51
					break;
     dde:	08 95       	ret
				case f_cpu_clk_64:
					CLRBIT(TCCR0,0);
     de0:	83 b7       	in	r24, 0x33	; 51
     de2:	8e 7f       	andi	r24, 0xFE	; 254
     de4:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     de6:	83 b7       	in	r24, 0x33	; 51
     de8:	8d 7f       	andi	r24, 0xFD	; 253
     dea:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     dec:	83 b7       	in	r24, 0x33	; 51
     dee:	84 60       	ori	r24, 0x04	; 4
     df0:	83 bf       	out	0x33, r24	; 51
					break;
     df2:	08 95       	ret
				case f_cpu_clk_128:
					SETBIT(TCCR0,0);
     df4:	83 b7       	in	r24, 0x33	; 51
     df6:	81 60       	ori	r24, 0x01	; 1
     df8:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     dfa:	83 b7       	in	r24, 0x33	; 51
     dfc:	8d 7f       	andi	r24, 0xFD	; 253
     dfe:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     e00:	83 b7       	in	r24, 0x33	; 51
     e02:	84 60       	ori	r24, 0x04	; 4
     e04:	83 bf       	out	0x33, r24	; 51
					break;
     e06:	08 95       	ret
				case f_cpu_clk_256:
					CLRBIT(TCCR0,0);
     e08:	83 b7       	in	r24, 0x33	; 51
     e0a:	8e 7f       	andi	r24, 0xFE	; 254
     e0c:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     e0e:	83 b7       	in	r24, 0x33	; 51
     e10:	82 60       	ori	r24, 0x02	; 2
     e12:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     e14:	83 b7       	in	r24, 0x33	; 51
     e16:	84 60       	ori	r24, 0x04	; 4
     e18:	83 bf       	out	0x33, r24	; 51
					break;
     e1a:	08 95       	ret
				case f_cpu_clk_1024:
					SETBIT(TCCR0,0);
     e1c:	83 b7       	in	r24, 0x33	; 51
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     e22:	83 b7       	in	r24, 0x33	; 51
     e24:	82 60       	ori	r24, 0x02	; 2
     e26:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     e28:	83 b7       	in	r24, 0x33	; 51
     e2a:	84 60       	ori	r24, 0x04	; 4
     e2c:	83 bf       	out	0x33, r24	; 51
     e2e:	08 95       	ret

00000e30 <delay_ms>:
			}
		}
	}
}
void delay_ms(float time_ms)
{
     e30:	8f 92       	push	r8
     e32:	9f 92       	push	r9
     e34:	af 92       	push	r10
     e36:	bf 92       	push	r11
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	00 d0       	rcall	.+0      	; 0xe44 <delay_ms+0x14>
     e44:	00 d0       	rcall	.+0      	; 0xe46 <delay_ms+0x16>
     e46:	1f 92       	push	r1
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	4b 01       	movw	r8, r22
     e4e:	5c 01       	movw	r10, r24
	config conf = {timer0, normal, f_cpu_clk_1024};
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	25 e0       	ldi	r18, 0x05	; 5
     e56:	fc 01       	movw	r30, r24
     e58:	11 92       	st	Z+, r1
     e5a:	2a 95       	dec	r18
     e5c:	e9 f7       	brne	.-6      	; 0xe58 <delay_ms+0x28>
     e5e:	27 e0       	ldi	r18, 0x07	; 7
     e60:	2b 83       	std	Y+3, r18	; 0x03
	Timer_init(&conf);
     e62:	0e 94 cd 04 	call	0x99a	; 0x99a <Timer_init>
	uint8_t counter = 0; //initial value
     e66:	f1 2c       	mov	r15, r1
	while(counter != (uint16_tm)(((float)(time_ms/millisecond)/time_period) / overflow_value))
     e68:	0b c0       	rjmp	.+22     	; 0xe80 <delay_ms+0x50>
	{
		if(GETBIT(TIFR,bit0))
     e6a:	08 b6       	in	r0, 0x38	; 56
     e6c:	00 fe       	sbrs	r0, 0
     e6e:	08 c0       	rjmp	.+16     	; 0xe80 <delay_ms+0x50>
		{
			counter++;
     e70:	f3 94       	inc	r15
			SETBIT(TIFR,bit0); //CLEAR FLAG 
     e72:	88 b7       	in	r24, 0x38	; 56
     e74:	81 60       	ori	r24, 0x01	; 1
     e76:	88 bf       	out	0x38, r24	; 56
			Timer_init(&conf);
     e78:	ce 01       	movw	r24, r28
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	0e 94 cd 04 	call	0x99a	; 0x99a <Timer_init>
void delay_ms(float time_ms)
{
	config conf = {timer0, normal, f_cpu_clk_1024};
	Timer_init(&conf);
	uint8_t counter = 0; //initial value
	while(counter != (uint16_tm)(((float)(time_ms/millisecond)/time_period) / overflow_value))
     e80:	0f 2d       	mov	r16, r15
     e82:	10 e0       	ldi	r17, 0x00	; 0
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	4a e7       	ldi	r20, 0x7A	; 122
     e8a:	54 e4       	ldi	r21, 0x44	; 68
     e8c:	c5 01       	movw	r24, r10
     e8e:	b4 01       	movw	r22, r8
     e90:	0e 94 6a 07 	call	0xed4	; 0xed4 <__divsf3>
     e94:	2d eb       	ldi	r18, 0xBD	; 189
     e96:	37 e3       	ldi	r19, 0x37	; 55
     e98:	46 e8       	ldi	r20, 0x86	; 134
     e9a:	5a e3       	ldi	r21, 0x3A	; 58
     e9c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__divsf3>
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	4f e7       	ldi	r20, 0x7F	; 127
     ea6:	53 e4       	ldi	r21, 0x43	; 67
     ea8:	0e 94 6a 07 	call	0xed4	; 0xed4 <__divsf3>
     eac:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__fixunssfsi>
     eb0:	06 17       	cp	r16, r22
     eb2:	17 07       	cpc	r17, r23
     eb4:	d1 f6       	brne	.-76     	; 0xe6a <delay_ms+0x3a>
			counter++;
			SETBIT(TIFR,bit0); //CLEAR FLAG 
			Timer_init(&conf);
		}
	}
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	bf 90       	pop	r11
     ecc:	af 90       	pop	r10
     ece:	9f 90       	pop	r9
     ed0:	8f 90       	pop	r8
     ed2:	08 95       	ret

00000ed4 <__divsf3>:
     ed4:	0e 94 7e 07 	call	0xefc	; 0xefc <__divsf3x>
     ed8:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__fp_round>
     edc:	0e 94 1b 08 	call	0x1036	; 0x1036 <__fp_pscB>
     ee0:	58 f0       	brcs	.+22     	; 0xef8 <__divsf3+0x24>
     ee2:	0e 94 14 08 	call	0x1028	; 0x1028 <__fp_pscA>
     ee6:	40 f0       	brcs	.+16     	; 0xef8 <__divsf3+0x24>
     ee8:	29 f4       	brne	.+10     	; 0xef4 <__divsf3+0x20>
     eea:	5f 3f       	cpi	r21, 0xFF	; 255
     eec:	29 f0       	breq	.+10     	; 0xef8 <__divsf3+0x24>
     eee:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_inf>
     ef2:	51 11       	cpse	r21, r1
     ef4:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__fp_szero>
     ef8:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_nan>

00000efc <__divsf3x>:
     efc:	0e 94 33 08 	call	0x1066	; 0x1066 <__fp_split3>
     f00:	68 f3       	brcs	.-38     	; 0xedc <__divsf3+0x8>

00000f02 <__divsf3_pse>:
     f02:	99 23       	and	r25, r25
     f04:	b1 f3       	breq	.-20     	; 0xef2 <__divsf3+0x1e>
     f06:	55 23       	and	r21, r21
     f08:	91 f3       	breq	.-28     	; 0xeee <__divsf3+0x1a>
     f0a:	95 1b       	sub	r25, r21
     f0c:	55 0b       	sbc	r21, r21
     f0e:	bb 27       	eor	r27, r27
     f10:	aa 27       	eor	r26, r26
     f12:	62 17       	cp	r22, r18
     f14:	73 07       	cpc	r23, r19
     f16:	84 07       	cpc	r24, r20
     f18:	38 f0       	brcs	.+14     	; 0xf28 <__divsf3_pse+0x26>
     f1a:	9f 5f       	subi	r25, 0xFF	; 255
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	22 0f       	add	r18, r18
     f20:	33 1f       	adc	r19, r19
     f22:	44 1f       	adc	r20, r20
     f24:	aa 1f       	adc	r26, r26
     f26:	a9 f3       	breq	.-22     	; 0xf12 <__divsf3_pse+0x10>
     f28:	35 d0       	rcall	.+106    	; 0xf94 <__divsf3_pse+0x92>
     f2a:	0e 2e       	mov	r0, r30
     f2c:	3a f0       	brmi	.+14     	; 0xf3c <__divsf3_pse+0x3a>
     f2e:	e0 e8       	ldi	r30, 0x80	; 128
     f30:	32 d0       	rcall	.+100    	; 0xf96 <__divsf3_pse+0x94>
     f32:	91 50       	subi	r25, 0x01	; 1
     f34:	50 40       	sbci	r21, 0x00	; 0
     f36:	e6 95       	lsr	r30
     f38:	00 1c       	adc	r0, r0
     f3a:	ca f7       	brpl	.-14     	; 0xf2e <__divsf3_pse+0x2c>
     f3c:	2b d0       	rcall	.+86     	; 0xf94 <__divsf3_pse+0x92>
     f3e:	fe 2f       	mov	r31, r30
     f40:	29 d0       	rcall	.+82     	; 0xf94 <__divsf3_pse+0x92>
     f42:	66 0f       	add	r22, r22
     f44:	77 1f       	adc	r23, r23
     f46:	88 1f       	adc	r24, r24
     f48:	bb 1f       	adc	r27, r27
     f4a:	26 17       	cp	r18, r22
     f4c:	37 07       	cpc	r19, r23
     f4e:	48 07       	cpc	r20, r24
     f50:	ab 07       	cpc	r26, r27
     f52:	b0 e8       	ldi	r27, 0x80	; 128
     f54:	09 f0       	breq	.+2      	; 0xf58 <__divsf3_pse+0x56>
     f56:	bb 0b       	sbc	r27, r27
     f58:	80 2d       	mov	r24, r0
     f5a:	bf 01       	movw	r22, r30
     f5c:	ff 27       	eor	r31, r31
     f5e:	93 58       	subi	r25, 0x83	; 131
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	3a f0       	brmi	.+14     	; 0xf72 <__divsf3_pse+0x70>
     f64:	9e 3f       	cpi	r25, 0xFE	; 254
     f66:	51 05       	cpc	r21, r1
     f68:	78 f0       	brcs	.+30     	; 0xf88 <__divsf3_pse+0x86>
     f6a:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_inf>
     f6e:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <__fp_szero>
     f72:	5f 3f       	cpi	r21, 0xFF	; 255
     f74:	e4 f3       	brlt	.-8      	; 0xf6e <__divsf3_pse+0x6c>
     f76:	98 3e       	cpi	r25, 0xE8	; 232
     f78:	d4 f3       	brlt	.-12     	; 0xf6e <__divsf3_pse+0x6c>
     f7a:	86 95       	lsr	r24
     f7c:	77 95       	ror	r23
     f7e:	67 95       	ror	r22
     f80:	b7 95       	ror	r27
     f82:	f7 95       	ror	r31
     f84:	9f 5f       	subi	r25, 0xFF	; 255
     f86:	c9 f7       	brne	.-14     	; 0xf7a <__divsf3_pse+0x78>
     f88:	88 0f       	add	r24, r24
     f8a:	91 1d       	adc	r25, r1
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	97 f9       	bld	r25, 7
     f92:	08 95       	ret
     f94:	e1 e0       	ldi	r30, 0x01	; 1
     f96:	66 0f       	add	r22, r22
     f98:	77 1f       	adc	r23, r23
     f9a:	88 1f       	adc	r24, r24
     f9c:	bb 1f       	adc	r27, r27
     f9e:	62 17       	cp	r22, r18
     fa0:	73 07       	cpc	r23, r19
     fa2:	84 07       	cpc	r24, r20
     fa4:	ba 07       	cpc	r27, r26
     fa6:	20 f0       	brcs	.+8      	; 0xfb0 <__divsf3_pse+0xae>
     fa8:	62 1b       	sub	r22, r18
     faa:	73 0b       	sbc	r23, r19
     fac:	84 0b       	sbc	r24, r20
     fae:	ba 0b       	sbc	r27, r26
     fb0:	ee 1f       	adc	r30, r30
     fb2:	88 f7       	brcc	.-30     	; 0xf96 <__divsf3_pse+0x94>
     fb4:	e0 95       	com	r30
     fb6:	08 95       	ret

00000fb8 <__fixunssfsi>:
     fb8:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fp_splitA>
     fbc:	88 f0       	brcs	.+34     	; 0xfe0 <__fixunssfsi+0x28>
     fbe:	9f 57       	subi	r25, 0x7F	; 127
     fc0:	98 f0       	brcs	.+38     	; 0xfe8 <__fixunssfsi+0x30>
     fc2:	b9 2f       	mov	r27, r25
     fc4:	99 27       	eor	r25, r25
     fc6:	b7 51       	subi	r27, 0x17	; 23
     fc8:	b0 f0       	brcs	.+44     	; 0xff6 <__fixunssfsi+0x3e>
     fca:	e1 f0       	breq	.+56     	; 0x1004 <__fixunssfsi+0x4c>
     fcc:	66 0f       	add	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	88 1f       	adc	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	1a f0       	brmi	.+6      	; 0xfdc <__fixunssfsi+0x24>
     fd6:	ba 95       	dec	r27
     fd8:	c9 f7       	brne	.-14     	; 0xfcc <__fixunssfsi+0x14>
     fda:	14 c0       	rjmp	.+40     	; 0x1004 <__fixunssfsi+0x4c>
     fdc:	b1 30       	cpi	r27, 0x01	; 1
     fde:	91 f0       	breq	.+36     	; 0x1004 <__fixunssfsi+0x4c>
     fe0:	0e 94 55 08 	call	0x10aa	; 0x10aa <__fp_zero>
     fe4:	b1 e0       	ldi	r27, 0x01	; 1
     fe6:	08 95       	ret
     fe8:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__fp_zero>
     fec:	67 2f       	mov	r22, r23
     fee:	78 2f       	mov	r23, r24
     ff0:	88 27       	eor	r24, r24
     ff2:	b8 5f       	subi	r27, 0xF8	; 248
     ff4:	39 f0       	breq	.+14     	; 0x1004 <__fixunssfsi+0x4c>
     ff6:	b9 3f       	cpi	r27, 0xF9	; 249
     ff8:	cc f3       	brlt	.-14     	; 0xfec <__fixunssfsi+0x34>
     ffa:	86 95       	lsr	r24
     ffc:	77 95       	ror	r23
     ffe:	67 95       	ror	r22
    1000:	b3 95       	inc	r27
    1002:	d9 f7       	brne	.-10     	; 0xffa <__fixunssfsi+0x42>
    1004:	3e f4       	brtc	.+14     	; 0x1014 <__fixunssfsi+0x5c>
    1006:	90 95       	com	r25
    1008:	80 95       	com	r24
    100a:	70 95       	com	r23
    100c:	61 95       	neg	r22
    100e:	7f 4f       	sbci	r23, 0xFF	; 255
    1010:	8f 4f       	sbci	r24, 0xFF	; 255
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	08 95       	ret

00001016 <__fp_inf>:
    1016:	97 f9       	bld	r25, 7
    1018:	9f 67       	ori	r25, 0x7F	; 127
    101a:	80 e8       	ldi	r24, 0x80	; 128
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	08 95       	ret

00001022 <__fp_nan>:
    1022:	9f ef       	ldi	r25, 0xFF	; 255
    1024:	80 ec       	ldi	r24, 0xC0	; 192
    1026:	08 95       	ret

00001028 <__fp_pscA>:
    1028:	00 24       	eor	r0, r0
    102a:	0a 94       	dec	r0
    102c:	16 16       	cp	r1, r22
    102e:	17 06       	cpc	r1, r23
    1030:	18 06       	cpc	r1, r24
    1032:	09 06       	cpc	r0, r25
    1034:	08 95       	ret

00001036 <__fp_pscB>:
    1036:	00 24       	eor	r0, r0
    1038:	0a 94       	dec	r0
    103a:	12 16       	cp	r1, r18
    103c:	13 06       	cpc	r1, r19
    103e:	14 06       	cpc	r1, r20
    1040:	05 06       	cpc	r0, r21
    1042:	08 95       	ret

00001044 <__fp_round>:
    1044:	09 2e       	mov	r0, r25
    1046:	03 94       	inc	r0
    1048:	00 0c       	add	r0, r0
    104a:	11 f4       	brne	.+4      	; 0x1050 <__fp_round+0xc>
    104c:	88 23       	and	r24, r24
    104e:	52 f0       	brmi	.+20     	; 0x1064 <__fp_round+0x20>
    1050:	bb 0f       	add	r27, r27
    1052:	40 f4       	brcc	.+16     	; 0x1064 <__fp_round+0x20>
    1054:	bf 2b       	or	r27, r31
    1056:	11 f4       	brne	.+4      	; 0x105c <__fp_round+0x18>
    1058:	60 ff       	sbrs	r22, 0
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <__fp_round+0x20>
    105c:	6f 5f       	subi	r22, 0xFF	; 255
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	8f 4f       	sbci	r24, 0xFF	; 255
    1062:	9f 4f       	sbci	r25, 0xFF	; 255
    1064:	08 95       	ret

00001066 <__fp_split3>:
    1066:	57 fd       	sbrc	r21, 7
    1068:	90 58       	subi	r25, 0x80	; 128
    106a:	44 0f       	add	r20, r20
    106c:	55 1f       	adc	r21, r21
    106e:	59 f0       	breq	.+22     	; 0x1086 <__fp_splitA+0x10>
    1070:	5f 3f       	cpi	r21, 0xFF	; 255
    1072:	71 f0       	breq	.+28     	; 0x1090 <__fp_splitA+0x1a>
    1074:	47 95       	ror	r20

00001076 <__fp_splitA>:
    1076:	88 0f       	add	r24, r24
    1078:	97 fb       	bst	r25, 7
    107a:	99 1f       	adc	r25, r25
    107c:	61 f0       	breq	.+24     	; 0x1096 <__fp_splitA+0x20>
    107e:	9f 3f       	cpi	r25, 0xFF	; 255
    1080:	79 f0       	breq	.+30     	; 0x10a0 <__fp_splitA+0x2a>
    1082:	87 95       	ror	r24
    1084:	08 95       	ret
    1086:	12 16       	cp	r1, r18
    1088:	13 06       	cpc	r1, r19
    108a:	14 06       	cpc	r1, r20
    108c:	55 1f       	adc	r21, r21
    108e:	f2 cf       	rjmp	.-28     	; 0x1074 <__fp_split3+0xe>
    1090:	46 95       	lsr	r20
    1092:	f1 df       	rcall	.-30     	; 0x1076 <__fp_splitA>
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <__fp_splitA+0x30>
    1096:	16 16       	cp	r1, r22
    1098:	17 06       	cpc	r1, r23
    109a:	18 06       	cpc	r1, r24
    109c:	99 1f       	adc	r25, r25
    109e:	f1 cf       	rjmp	.-30     	; 0x1082 <__fp_splitA+0xc>
    10a0:	86 95       	lsr	r24
    10a2:	71 05       	cpc	r23, r1
    10a4:	61 05       	cpc	r22, r1
    10a6:	08 94       	sec
    10a8:	08 95       	ret

000010aa <__fp_zero>:
    10aa:	e8 94       	clt

000010ac <__fp_szero>:
    10ac:	bb 27       	eor	r27, r27
    10ae:	66 27       	eor	r22, r22
    10b0:	77 27       	eor	r23, r23
    10b2:	cb 01       	movw	r24, r22
    10b4:	97 f9       	bld	r25, 7
    10b6:	08 95       	ret

000010b8 <__divmodhi4>:
    10b8:	97 fb       	bst	r25, 7
    10ba:	07 2e       	mov	r0, r23
    10bc:	16 f4       	brtc	.+4      	; 0x10c2 <__divmodhi4+0xa>
    10be:	00 94       	com	r0
    10c0:	07 d0       	rcall	.+14     	; 0x10d0 <__divmodhi4_neg1>
    10c2:	77 fd       	sbrc	r23, 7
    10c4:	09 d0       	rcall	.+18     	; 0x10d8 <__divmodhi4_neg2>
    10c6:	0e 94 76 08 	call	0x10ec	; 0x10ec <__udivmodhi4>
    10ca:	07 fc       	sbrc	r0, 7
    10cc:	05 d0       	rcall	.+10     	; 0x10d8 <__divmodhi4_neg2>
    10ce:	3e f4       	brtc	.+14     	; 0x10de <__divmodhi4_exit>

000010d0 <__divmodhi4_neg1>:
    10d0:	90 95       	com	r25
    10d2:	81 95       	neg	r24
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	08 95       	ret

000010d8 <__divmodhi4_neg2>:
    10d8:	70 95       	com	r23
    10da:	61 95       	neg	r22
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255

000010de <__divmodhi4_exit>:
    10de:	08 95       	ret

000010e0 <__tablejump2__>:
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	05 90       	lpm	r0, Z+
    10e6:	f4 91       	lpm	r31, Z
    10e8:	e0 2d       	mov	r30, r0
    10ea:	09 94       	ijmp

000010ec <__udivmodhi4>:
    10ec:	aa 1b       	sub	r26, r26
    10ee:	bb 1b       	sub	r27, r27
    10f0:	51 e1       	ldi	r21, 0x11	; 17
    10f2:	07 c0       	rjmp	.+14     	; 0x1102 <__udivmodhi4_ep>

000010f4 <__udivmodhi4_loop>:
    10f4:	aa 1f       	adc	r26, r26
    10f6:	bb 1f       	adc	r27, r27
    10f8:	a6 17       	cp	r26, r22
    10fa:	b7 07       	cpc	r27, r23
    10fc:	10 f0       	brcs	.+4      	; 0x1102 <__udivmodhi4_ep>
    10fe:	a6 1b       	sub	r26, r22
    1100:	b7 0b       	sbc	r27, r23

00001102 <__udivmodhi4_ep>:
    1102:	88 1f       	adc	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	5a 95       	dec	r21
    1108:	a9 f7       	brne	.-22     	; 0x10f4 <__udivmodhi4_loop>
    110a:	80 95       	com	r24
    110c:	90 95       	com	r25
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	08 95       	ret

00001114 <do_rand>:
    1114:	8f 92       	push	r8
    1116:	9f 92       	push	r9
    1118:	af 92       	push	r10
    111a:	bf 92       	push	r11
    111c:	cf 92       	push	r12
    111e:	df 92       	push	r13
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	ec 01       	movw	r28, r24
    112a:	68 81       	ld	r22, Y
    112c:	79 81       	ldd	r23, Y+1	; 0x01
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	9b 81       	ldd	r25, Y+3	; 0x03
    1132:	61 15       	cp	r22, r1
    1134:	71 05       	cpc	r23, r1
    1136:	81 05       	cpc	r24, r1
    1138:	91 05       	cpc	r25, r1
    113a:	21 f4       	brne	.+8      	; 0x1144 <do_rand+0x30>
    113c:	64 e2       	ldi	r22, 0x24	; 36
    113e:	79 ed       	ldi	r23, 0xD9	; 217
    1140:	8b e5       	ldi	r24, 0x5B	; 91
    1142:	97 e0       	ldi	r25, 0x07	; 7
    1144:	2d e1       	ldi	r18, 0x1D	; 29
    1146:	33 ef       	ldi	r19, 0xF3	; 243
    1148:	41 e0       	ldi	r20, 0x01	; 1
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__divmodsi4>
    1150:	49 01       	movw	r8, r18
    1152:	5a 01       	movw	r10, r20
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	a7 ea       	ldi	r26, 0xA7	; 167
    115a:	b1 e4       	ldi	r27, 0x41	; 65
    115c:	0e 94 05 09 	call	0x120a	; 0x120a <__muluhisi3>
    1160:	6b 01       	movw	r12, r22
    1162:	7c 01       	movw	r14, r24
    1164:	ac ee       	ldi	r26, 0xEC	; 236
    1166:	b4 ef       	ldi	r27, 0xF4	; 244
    1168:	a5 01       	movw	r20, r10
    116a:	94 01       	movw	r18, r8
    116c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulohisi3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	8c 0d       	add	r24, r12
    1176:	9d 1d       	adc	r25, r13
    1178:	ae 1d       	adc	r26, r14
    117a:	bf 1d       	adc	r27, r15
    117c:	b7 ff       	sbrs	r27, 7
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <do_rand+0x72>
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	a1 09       	sbc	r26, r1
    1184:	b0 48       	sbci	r27, 0x80	; 128
    1186:	88 83       	st	Y, r24
    1188:	99 83       	std	Y+1, r25	; 0x01
    118a:	aa 83       	std	Y+2, r26	; 0x02
    118c:	bb 83       	std	Y+3, r27	; 0x03
    118e:	9f 77       	andi	r25, 0x7F	; 127
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	bf 90       	pop	r11
    119e:	af 90       	pop	r10
    11a0:	9f 90       	pop	r9
    11a2:	8f 90       	pop	r8
    11a4:	08 95       	ret

000011a6 <rand_r>:
    11a6:	0e 94 8a 08 	call	0x1114	; 0x1114 <do_rand>
    11aa:	08 95       	ret

000011ac <rand>:
    11ac:	80 e6       	ldi	r24, 0x60	; 96
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 8a 08 	call	0x1114	; 0x1114 <do_rand>
    11b4:	08 95       	ret

000011b6 <srand>:
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    11be:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    11c2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    11c6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    11ca:	08 95       	ret

000011cc <__divmodsi4>:
    11cc:	05 2e       	mov	r0, r21
    11ce:	97 fb       	bst	r25, 7
    11d0:	1e f4       	brtc	.+6      	; 0x11d8 <__divmodsi4+0xc>
    11d2:	00 94       	com	r0
    11d4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__negsi2>
    11d8:	57 fd       	sbrc	r21, 7
    11da:	07 d0       	rcall	.+14     	; 0x11ea <__divmodsi4_neg2>
    11dc:	0e 94 18 09 	call	0x1230	; 0x1230 <__udivmodsi4>
    11e0:	07 fc       	sbrc	r0, 7
    11e2:	03 d0       	rcall	.+6      	; 0x11ea <__divmodsi4_neg2>
    11e4:	4e f4       	brtc	.+18     	; 0x11f8 <__divmodsi4_exit>
    11e6:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <__negsi2>

000011ea <__divmodsi4_neg2>:
    11ea:	50 95       	com	r21
    11ec:	40 95       	com	r20
    11ee:	30 95       	com	r19
    11f0:	21 95       	neg	r18
    11f2:	3f 4f       	sbci	r19, 0xFF	; 255
    11f4:	4f 4f       	sbci	r20, 0xFF	; 255
    11f6:	5f 4f       	sbci	r21, 0xFF	; 255

000011f8 <__divmodsi4_exit>:
    11f8:	08 95       	ret

000011fa <__negsi2>:
    11fa:	90 95       	com	r25
    11fc:	80 95       	com	r24
    11fe:	70 95       	com	r23
    1200:	61 95       	neg	r22
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	8f 4f       	sbci	r24, 0xFF	; 255
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	08 95       	ret

0000120a <__muluhisi3>:
    120a:	0e 94 3a 09 	call	0x1274	; 0x1274 <__umulhisi3>
    120e:	a5 9f       	mul	r26, r21
    1210:	90 0d       	add	r25, r0
    1212:	b4 9f       	mul	r27, r20
    1214:	90 0d       	add	r25, r0
    1216:	a4 9f       	mul	r26, r20
    1218:	80 0d       	add	r24, r0
    121a:	91 1d       	adc	r25, r1
    121c:	11 24       	eor	r1, r1
    121e:	08 95       	ret

00001220 <__mulshisi3>:
    1220:	b7 ff       	sbrs	r27, 7
    1222:	0c 94 05 09 	jmp	0x120a	; 0x120a <__muluhisi3>

00001226 <__mulohisi3>:
    1226:	0e 94 05 09 	call	0x120a	; 0x120a <__muluhisi3>
    122a:	82 1b       	sub	r24, r18
    122c:	93 0b       	sbc	r25, r19
    122e:	08 95       	ret

00001230 <__udivmodsi4>:
    1230:	a1 e2       	ldi	r26, 0x21	; 33
    1232:	1a 2e       	mov	r1, r26
    1234:	aa 1b       	sub	r26, r26
    1236:	bb 1b       	sub	r27, r27
    1238:	fd 01       	movw	r30, r26
    123a:	0d c0       	rjmp	.+26     	; 0x1256 <__udivmodsi4_ep>

0000123c <__udivmodsi4_loop>:
    123c:	aa 1f       	adc	r26, r26
    123e:	bb 1f       	adc	r27, r27
    1240:	ee 1f       	adc	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	a2 17       	cp	r26, r18
    1246:	b3 07       	cpc	r27, r19
    1248:	e4 07       	cpc	r30, r20
    124a:	f5 07       	cpc	r31, r21
    124c:	20 f0       	brcs	.+8      	; 0x1256 <__udivmodsi4_ep>
    124e:	a2 1b       	sub	r26, r18
    1250:	b3 0b       	sbc	r27, r19
    1252:	e4 0b       	sbc	r30, r20
    1254:	f5 0b       	sbc	r31, r21

00001256 <__udivmodsi4_ep>:
    1256:	66 1f       	adc	r22, r22
    1258:	77 1f       	adc	r23, r23
    125a:	88 1f       	adc	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	1a 94       	dec	r1
    1260:	69 f7       	brne	.-38     	; 0x123c <__udivmodsi4_loop>
    1262:	60 95       	com	r22
    1264:	70 95       	com	r23
    1266:	80 95       	com	r24
    1268:	90 95       	com	r25
    126a:	9b 01       	movw	r18, r22
    126c:	ac 01       	movw	r20, r24
    126e:	bd 01       	movw	r22, r26
    1270:	cf 01       	movw	r24, r30
    1272:	08 95       	ret

00001274 <__umulhisi3>:
    1274:	a2 9f       	mul	r26, r18
    1276:	b0 01       	movw	r22, r0
    1278:	b3 9f       	mul	r27, r19
    127a:	c0 01       	movw	r24, r0
    127c:	a3 9f       	mul	r26, r19
    127e:	70 0d       	add	r23, r0
    1280:	81 1d       	adc	r24, r1
    1282:	11 24       	eor	r1, r1
    1284:	91 1d       	adc	r25, r1
    1286:	b2 9f       	mul	r27, r18
    1288:	70 0d       	add	r23, r0
    128a:	81 1d       	adc	r24, r1
    128c:	11 24       	eor	r1, r1
    128e:	91 1d       	adc	r25, r1
    1290:	08 95       	ret

00001292 <_exit>:
    1292:	f8 94       	cli

00001294 <__stop_program>:
    1294:	ff cf       	rjmp	.-2      	; 0x1294 <__stop_program>
