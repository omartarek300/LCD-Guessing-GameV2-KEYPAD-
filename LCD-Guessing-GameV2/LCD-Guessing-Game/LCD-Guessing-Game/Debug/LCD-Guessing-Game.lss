
LCD-Guessing-Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000128e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  0000128e  00001322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000ca  008000ca  0000138c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a0c  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad4  00000000  00000000  00002f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000112a  00000000  00000000  00003a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00004b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ca  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f5e  00000000  00000000  0000571a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006678  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_4>
      14:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_5>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 df 03 	jmp	0x7be	; 0x7be <__vector_7>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 06 04 	jmp	0x80c	; 0x80c <__vector_9>
      28:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_10>
      2c:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__vector_11>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	47 01       	movw	r8, r14
      56:	65 01       	movw	r12, r10
      58:	49 01       	movw	r8, r18
      5a:	4b 01       	movw	r8, r22
      5c:	4d 01       	movw	r8, r26
      5e:	4f 01       	movw	r8, r30
      60:	51 01       	movw	r10, r2
      62:	53 01       	movw	r10, r6
      64:	55 01       	movw	r10, r10
      66:	57 01       	movw	r10, r14
      68:	59 01       	movw	r10, r18
      6a:	5b 01       	movw	r10, r22
      6c:	5d 01       	movw	r10, r26
      6e:	5f 01       	movw	r10, r30
      70:	61 01       	movw	r12, r2
      72:	63 01       	movw	r12, r6
      74:	59 06       	cpc	r5, r25
      76:	63 06       	cpc	r6, r19
      78:	6d 06       	cpc	r6, r29
      7a:	77 06       	cpc	r7, r23
      7c:	8b 06       	cpc	r8, r27
      7e:	81 06       	cpc	r8, r17
      80:	95 06       	cpc	r9, r21
      82:	9f 06       	cpc	r9, r31
      84:	c4 06       	cpc	r12, r20
      86:	ce 06       	cpc	r12, r30
      88:	d8 06       	cpc	r13, r24
      8a:	e2 06       	cpc	r14, r18
      8c:	f6 06       	cpc	r15, r22
      8e:	ec 06       	cpc	r14, r28
      90:	00 07       	cpc	r16, r16
      92:	0a 07       	cpc	r16, r26

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	10 e0       	ldi	r17, 0x00	; 0
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	ee e8       	ldi	r30, 0x8E	; 142
      a8:	f2 e1       	ldi	r31, 0x12	; 18
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	aa 3c       	cpi	r26, 0xCA	; 202
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	aa ec       	ldi	r26, 0xCA	; 202
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a6 3d       	cpi	r26, 0xD6	; 214
      c2:	b2 07       	cpc	r27, r18
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 20 03 	call	0x640	; 0x640 <main>
      ca:	0c 94 45 09 	jmp	0x128a	; 0x128a <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <app_init>:
 * Created: 9/15/2021 11:38:38 PM
 *  Author: Omar
 */ 
#include "App.h"
void app_init()
{
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	00 d0       	rcall	.+0      	; 0xd8 <app_init+0x6>
      d8:	00 d0       	rcall	.+0      	; 0xda <app_init+0x8>
      da:	1f 92       	push	r1
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
	config timer_conf = {timer1, compare, f_cpu_clk_1024, ticks}; // initialize timer1
      e0:	85 e0       	ldi	r24, 0x05	; 5
      e2:	e4 e6       	ldi	r30, 0x64	; 100
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	de 01       	movw	r26, r28
      e8:	11 96       	adiw	r26, 0x01	; 1
      ea:	01 90       	ld	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	8a 95       	dec	r24
      f0:	e1 f7       	brne	.-8      	; 0xea <app_init+0x18>
	Timer_init(&timer_conf);
      f2:	ce 01       	movw	r24, r28
      f4:	01 96       	adiw	r24, 0x01	; 1
      f6:	0e 94 c9 04 	call	0x992	; 0x992 <Timer_init>
	lcd_config lcd_conf = {PD,PA,ctrl_pins,data_pins}; // initialize LCD
	DIO_init(PC,button);  // initialize Button pin
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	82 e0       	ldi	r24, 0x02	; 2
      fe:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_init>
	LCD_init(lcd_conf);
     102:	63 e0       	ldi	r22, 0x03	; 3
     104:	70 e0       	ldi	r23, 0x00	; 0
     106:	87 e0       	ldi	r24, 0x07	; 7
     108:	90 ef       	ldi	r25, 0xF0	; 240
     10a:	0e 94 2c 02 	call	0x458	; 0x458 <LCD_init>
	user_number = 0; //initial value
     10e:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <user_number>
	keypad_init(PC);
     112:	82 e0       	ldi	r24, 0x02	; 2
     114:	0e 94 36 01 	call	0x26c	; 0x26c <keypad_init>
	random_variable = random_num(min,max);
     118:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <rand>
     11c:	6f e0       	ldi	r22, 0x0F	; 15
     11e:	70 e0       	ldi	r23, 0x00	; 0
     120:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__divmodhi4>
     124:	8f 5f       	subi	r24, 0xFF	; 255
     126:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <random_variable>
}
     12a:	0f 90       	pop	r0
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <get_user_press>:
				config timer_conf = {timer1, compare, f_cpu_clk_1024, ticks};
				Timer_init(&timer_conf);
			}
		}
	}*/
	 key = get_key();
     13a:	0e 94 a5 01 	call	0x34a	; 0x34a <get_key>
     13e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <key>
	if(key != enter)
     142:	8d 30       	cpi	r24, 0x0D	; 13
     144:	91 f0       	breq	.+36     	; 0x16a <get_user_press+0x30>
	{
		user_number *= 10;
     146:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <user_number>
     14a:	99 0f       	add	r25, r25
     14c:	29 2f       	mov	r18, r25
     14e:	22 0f       	add	r18, r18
     150:	22 0f       	add	r18, r18
     152:	92 0f       	add	r25, r18
		user_number += key;
     154:	89 0f       	add	r24, r25
     156:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <user_number>
		go_to_row_column(second_row,7);
     15a:	67 e0       	ldi	r22, 0x07	; 7
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	0e 94 c1 02 	call	0x582	; 0x582 <go_to_row_column>
		LCD_intgerToString(user_number);	
     162:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <user_number>
     166:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_intgerToString>
     16a:	08 95       	ret

0000016c <home_screen>:
	}
	
}
void home_screen()
{
	send_cmd(CLEAR_COMMAND); /* clear LCD at the beginning */
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	0e 94 c8 01 	call	0x390	; 0x390 <send_cmd>
	go_to_row_column(first_row,0);
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	0e 94 c1 02 	call	0x582	; 0x582 <go_to_row_column>
	send_string("please guess the");
     17a:	89 e6       	ldi	r24, 0x69	; 105
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 ae 02 	call	0x55c	; 0x55c <send_string>
	go_to_row_column(second_row,0);
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	0e 94 c1 02 	call	0x582	; 0x582 <go_to_row_column>
	send_string("number:");
     18a:	8a e7       	ldi	r24, 0x7A	; 122
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 ae 02 	call	0x55c	; 0x55c <send_string>
     192:	08 95       	ret

00000194 <check_user_number>:
		home_screen();
		SETBIT(TIFR,bit4); // re-enable entering number
	}*/
	
	
	delay_ms(1000);
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	8a e7       	ldi	r24, 0x7A	; 122
     19a:	94 e4       	ldi	r25, 0x44	; 68
     19c:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
	if(key == enter)
     1a0:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <key>
     1a4:	8d 30       	cpi	r24, 0x0D	; 13
     1a6:	09 f0       	breq	.+2      	; 0x1aa <check_user_number+0x16>
     1a8:	5b c0       	rjmp	.+182    	; 0x260 <check_user_number+0xcc>
	{
		go_to_row_column(second_row,7);
     1aa:	67 e0       	ldi	r22, 0x07	; 7
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	0e 94 c1 02 	call	0x582	; 0x582 <go_to_row_column>
		LCD_intgerToString(user_number);
     1b2:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <user_number>
     1b6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <LCD_intgerToString>
		if(user_number < min)
     1ba:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <user_number>
     1be:	81 11       	cpse	r24, r1
     1c0:	14 c0       	rjmp	.+40     	; 0x1ea <check_user_number+0x56>
		{
			send_cmd(CLEAR_COMMAND); // LCD at the beginning
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	0e 94 c8 01 	call	0x390	; 0x390 <send_cmd>
			go_to_row_column(first_row,0);
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	0e 94 c1 02 	call	0x582	; 0x582 <go_to_row_column>
			send_string("YOU DIDN'T");
     1d0:	82 e8       	ldi	r24, 0x82	; 130
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 ae 02 	call	0x55c	; 0x55c <send_string>
			go_to_row_column(second_row,0);
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	0e 94 c1 02 	call	0x582	; 0x582 <go_to_row_column>
			send_string("CHOOSE A NUMBER");
     1e0:	8d e8       	ldi	r24, 0x8D	; 141
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 ae 02 	call	0x55c	; 0x55c <send_string>
     1e8:	31 c0       	rjmp	.+98     	; 0x24c <check_user_number+0xb8>
		}
		else if(user_number > max)
     1ea:	80 31       	cpi	r24, 0x10	; 16
     1ec:	a0 f0       	brcs	.+40     	; 0x216 <check_user_number+0x82>
		{
			send_cmd(CLEAR_COMMAND); //clear LCD at the beginning
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	0e 94 c8 01 	call	0x390	; 0x390 <send_cmd>
			go_to_row_column(first_row,0);
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 c1 02 	call	0x582	; 0x582 <go_to_row_column>
			send_string("THE VALID");
     1fc:	8d e9       	ldi	r24, 0x9D	; 157
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 ae 02 	call	0x55c	; 0x55c <send_string>
			go_to_row_column(second_row,0);
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 c1 02 	call	0x582	; 0x582 <go_to_row_column>
			send_string("NUMB WITHIN 1:15");
     20c:	87 ea       	ldi	r24, 0xA7	; 167
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 ae 02 	call	0x55c	; 0x55c <send_string>
     214:	1b c0       	rjmp	.+54     	; 0x24c <check_user_number+0xb8>
		}
		else
		{
			if(user_number == random_variable)
     216:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <random_variable>
     21a:	89 13       	cpse	r24, r25
     21c:	0c c0       	rjmp	.+24     	; 0x236 <check_user_number+0xa2>
			{
				send_cmd(CLEAR_COMMAND); //clear LCD at the beginning
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 c8 01 	call	0x390	; 0x390 <send_cmd>
				go_to_row_column(first_row,0);
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	0e 94 c1 02 	call	0x582	; 0x582 <go_to_row_column>
				send_string("YOU WON");
     22c:	88 eb       	ldi	r24, 0xB8	; 184
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 ae 02 	call	0x55c	; 0x55c <send_string>
     234:	0b c0       	rjmp	.+22     	; 0x24c <check_user_number+0xb8>
			}
			else
			{
				send_cmd(CLEAR_COMMAND); //clear LCD at the beginning
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	0e 94 c8 01 	call	0x390	; 0x390 <send_cmd>
				go_to_row_column(first_row,0);
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	0e 94 c1 02 	call	0x582	; 0x582 <go_to_row_column>
				send_string("YOU LOS");
     244:	80 ec       	ldi	r24, 0xC0	; 192
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 ae 02 	call	0x55c	; 0x55c <send_string>
			}
			
		}
		user_number = 0;
     24c:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <user_number>
		delay_ms(1000);
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	8a e7       	ldi	r24, 0x7A	; 122
     256:	94 e4       	ldi	r25, 0x44	; 68
     258:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		home_screen();
     25c:	0e 94 b6 00 	call	0x16c	; 0x16c <home_screen>
     260:	08 95       	ret

00000262 <app>:
	go_to_row_column(second_row,0);
	send_string("number:");
}
void app()
{
	get_user_press();
     262:	0e 94 9d 00 	call	0x13a	; 0x13a <get_user_press>
	check_user_number();
     266:	0e 94 ca 00 	call	0x194	; 0x194 <check_user_number>
     26a:	08 95       	ret

0000026c <keypad_init>:
 *  Author: Omar
 */ 
#include "keypad.h"
void keypad_init(uint8_t port_var)
{
	port_name = port_var;
     26c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <port_name>
	DIO_init(port_name, initialze_rows); //initialize rows as output pins
     270:	6f e0       	ldi	r22, 0x0F	; 15
     272:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_init>
     276:	08 95       	ret

00000278 <keypad_4x4_mapping>:
		}
	}
}
uint8_t keypad_4x4_mapping(uint8_t num)
{
	switch(num)
     278:	48 2f       	mov	r20, r24
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	fa 01       	movw	r30, r20
     27e:	31 97       	sbiw	r30, 0x01	; 1
     280:	e0 31       	cpi	r30, 0x10	; 16
     282:	f1 05       	cpc	r31, r1
     284:	18 f5       	brcc	.+70     	; 0x2cc <keypad_4x4_mapping+0x54>
     286:	e6 5d       	subi	r30, 0xD6	; 214
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__tablejump2__>
	{
		case 1: return 7;
     28e:	87 e0       	ldi	r24, 0x07	; 7
     290:	08 95       	ret
		break;
		case 2: return 4;
		break;
		case 3: return 1;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	08 95       	ret
		break;
		case 4: return 13; 
     296:	8d e0       	ldi	r24, 0x0D	; 13
     298:	08 95       	ret
		break;
		case 5: return 8;
     29a:	88 e0       	ldi	r24, 0x08	; 8
     29c:	08 95       	ret
		break;
		case 6: return 5;
     29e:	85 e0       	ldi	r24, 0x05	; 5
     2a0:	08 95       	ret
		break;
		case 7: return 2;
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	08 95       	ret
		break;
		case 8: return 0; 
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	08 95       	ret
		break;
		case 9: return 9;
     2aa:	89 e0       	ldi	r24, 0x09	; 9
     2ac:	08 95       	ret
		break;
		case 10: return 6;
     2ae:	86 e0       	ldi	r24, 0x06	; 6
     2b0:	08 95       	ret
		break;
		case 11: return 3;
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	08 95       	ret
		break;
		case 12: return '='; /* ASCII Code of '=' */
     2b6:	8d e3       	ldi	r24, 0x3D	; 61
     2b8:	08 95       	ret
		break;
		case 13: return '/';  /* ASCII of / */
     2ba:	8f e2       	ldi	r24, 0x2F	; 47
     2bc:	08 95       	ret
		break;
		case 14: return '*';/* ASCII Code of '*' */
     2be:	8a e2       	ldi	r24, 0x2A	; 42
     2c0:	08 95       	ret
		break;
		case 15: return '-'; /* ASCII Code of '-' */
     2c2:	8d e2       	ldi	r24, 0x2D	; 45
     2c4:	08 95       	ret
		break;
		case 16: return '+'; 
     2c6:	8b e2       	ldi	r24, 0x2B	; 43
     2c8:	08 95       	ret
{
	switch(num)
	{
		case 1: return 7;
		break;
		case 2: return 4;
     2ca:	84 e0       	ldi	r24, 0x04	; 4
		break;
		case 16: return '+'; 
		break;
		default: return num;
	}
}
     2cc:	08 95       	ret

000002ce <keypad_port>:
void keypad_port(uint8_t shift_value)
{
	switch(port_name)
     2ce:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <port_name>
     2d2:	91 30       	cpi	r25, 0x01	; 1
     2d4:	99 f0       	breq	.+38     	; 0x2fc <keypad_port+0x2e>
     2d6:	28 f0       	brcs	.+10     	; 0x2e2 <keypad_port+0x14>
     2d8:	92 30       	cpi	r25, 0x02	; 2
     2da:	e9 f0       	breq	.+58     	; 0x316 <keypad_port+0x48>
     2dc:	93 30       	cpi	r25, 0x03	; 3
     2de:	41 f1       	breq	.+80     	; 0x330 <keypad_port+0x62>
     2e0:	08 95       	ret
	{
		case PA:
		{	
			DDRA = enable_row << shift_value;
     2e2:	20 e1       	ldi	r18, 0x10	; 16
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	a9 01       	movw	r20, r18
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <keypad_port+0x20>
     2ea:	44 0f       	add	r20, r20
     2ec:	55 1f       	adc	r21, r21
     2ee:	8a 95       	dec	r24
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <keypad_port+0x1c>
     2f2:	ca 01       	movw	r24, r20
     2f4:	4a bb       	out	0x1a, r20	; 26
			PORTA = (~(enable_row<< shift_value));
     2f6:	80 95       	com	r24
     2f8:	8b bb       	out	0x1b, r24	; 27
		}
		break;
     2fa:	08 95       	ret
		case PB:
		{
			DDRB = enable_row << shift_value;
     2fc:	20 e1       	ldi	r18, 0x10	; 16
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	a9 01       	movw	r20, r18
     302:	02 c0       	rjmp	.+4      	; 0x308 <keypad_port+0x3a>
     304:	44 0f       	add	r20, r20
     306:	55 1f       	adc	r21, r21
     308:	8a 95       	dec	r24
     30a:	e2 f7       	brpl	.-8      	; 0x304 <keypad_port+0x36>
     30c:	ca 01       	movw	r24, r20
     30e:	47 bb       	out	0x17, r20	; 23
			PORTB = (~(enable_row<< shift_value));
     310:	80 95       	com	r24
     312:	88 bb       	out	0x18, r24	; 24
		}
		break;
     314:	08 95       	ret
		case PC:
		{
			DDRC = enable_row << shift_value;
     316:	20 e1       	ldi	r18, 0x10	; 16
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	a9 01       	movw	r20, r18
     31c:	02 c0       	rjmp	.+4      	; 0x322 <keypad_port+0x54>
     31e:	44 0f       	add	r20, r20
     320:	55 1f       	adc	r21, r21
     322:	8a 95       	dec	r24
     324:	e2 f7       	brpl	.-8      	; 0x31e <keypad_port+0x50>
     326:	ca 01       	movw	r24, r20
     328:	44 bb       	out	0x14, r20	; 20
			PORTC = (~(enable_row<< shift_value));
     32a:	80 95       	com	r24
     32c:	85 bb       	out	0x15, r24	; 21
		}
		break;
     32e:	08 95       	ret
		case PD:
		{
			DDRD = enable_row << shift_value;
     330:	20 e1       	ldi	r18, 0x10	; 16
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	a9 01       	movw	r20, r18
     336:	02 c0       	rjmp	.+4      	; 0x33c <keypad_port+0x6e>
     338:	44 0f       	add	r20, r20
     33a:	55 1f       	adc	r21, r21
     33c:	8a 95       	dec	r24
     33e:	e2 f7       	brpl	.-8      	; 0x338 <keypad_port+0x6a>
     340:	ca 01       	movw	r24, r20
     342:	41 bb       	out	0x11, r20	; 17
			PORTD = (~(enable_row<< shift_value));
     344:	80 95       	com	r24
     346:	82 bb       	out	0x12, r24	; 18
     348:	08 95       	ret

0000034a <get_key>:
{
	port_name = port_var;
	DIO_init(port_name, initialze_rows); //initialize rows as output pins
}
uint8_t get_key()
{	
     34a:	cf 93       	push	r28
	while(1)
	{
		for(uint8_t row_iterator =0; row_iterator < rows; row_iterator++) //loop for rows
     34c:	c0 e0       	ldi	r28, 0x00	; 0
     34e:	1b c0       	rjmp	.+54     	; 0x386 <get_key+0x3c>
		{
			keypad_port(row_iterator); // enable internal pullup and switch between row pins
     350:	8c 2f       	mov	r24, r28
     352:	0e 94 67 01 	call	0x2ce	; 0x2ce <keypad_port>
			for(uint8_t col_iterator =0; col_iterator < cols; col_iterator++) // loop for columns
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	13 c0       	rjmp	.+38     	; 0x380 <get_key+0x36>
			{
				if(GETBIT(PINC,col_iterator)==0) // if key is pressed
     35a:	23 b3       	in	r18, 0x13	; 19
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	09 2e       	mov	r0, r25
     360:	02 c0       	rjmp	.+4      	; 0x366 <get_key+0x1c>
     362:	35 95       	asr	r19
     364:	27 95       	ror	r18
     366:	0a 94       	dec	r0
     368:	e2 f7       	brpl	.-8      	; 0x362 <get_key+0x18>
     36a:	20 fd       	sbrc	r18, 0
     36c:	08 c0       	rjmp	.+16     	; 0x37e <get_key+0x34>
				{
					return keypad_4x4_mapping((col_iterator * rows) + row_iterator + 1);
     36e:	99 0f       	add	r25, r25
     370:	99 0f       	add	r25, r25
     372:	89 2f       	mov	r24, r25
     374:	8c 0f       	add	r24, r28
     376:	8f 5f       	subi	r24, 0xFF	; 255
     378:	0e 94 3c 01 	call	0x278	; 0x278 <keypad_4x4_mapping>
     37c:	07 c0       	rjmp	.+14     	; 0x38c <get_key+0x42>
	while(1)
	{
		for(uint8_t row_iterator =0; row_iterator < rows; row_iterator++) //loop for rows
		{
			keypad_port(row_iterator); // enable internal pullup and switch between row pins
			for(uint8_t col_iterator =0; col_iterator < cols; col_iterator++) // loop for columns
     37e:	9f 5f       	subi	r25, 0xFF	; 255
     380:	94 30       	cpi	r25, 0x04	; 4
     382:	58 f3       	brcs	.-42     	; 0x35a <get_key+0x10>
}
uint8_t get_key()
{	
	while(1)
	{
		for(uint8_t row_iterator =0; row_iterator < rows; row_iterator++) //loop for rows
     384:	cf 5f       	subi	r28, 0xFF	; 255
     386:	c4 30       	cpi	r28, 0x04	; 4
     388:	18 f3       	brcs	.-58     	; 0x350 <get_key+0x6>
     38a:	e0 cf       	rjmp	.-64     	; 0x34c <get_key+0x2>
				}
			}
			
		}
	}
}
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <send_cmd>:
	send_cmd(Display_ON); /* turn display on */
	send_cmd(CLEAR_COMMAND); /* clear LCD at the beginning */
	
}
void send_cmd(uint8_t command)
{ 
     390:	cf 93       	push	r28
     392:	c8 2f       	mov	r28, r24
	DIO_CLR_BIT(ctrl_port, RS); /* Instruction Mode RS=0 */
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     39a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_CLR_BIT>
	DIO_CLR_BIT(ctrl_port, RW); /* write data to LCD so RW=0 */
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     3a4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_CLR_BIT>
	delay_ms(1); /* delay for tas */
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	80 e8       	ldi	r24, 0x80	; 128
     3ae:	9f e3       	ldi	r25, 0x3F	; 63
     3b0:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
	DIO_SET_BIT(ctrl_port, E); /* enable writing data on D0-->D7 */
     3b4:	62 e0       	ldi	r22, 0x02	; 2
     3b6:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     3ba:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_SET_BIT>
	delay_ms(1); /* delay for tpw - tpws*/
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	80 e8       	ldi	r24, 0x80	; 128
     3c4:	9f e3       	ldi	r25, 0x3F	; 63
     3c6:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		4- enable writing data on D4-->D7 again
		5- clear data port before the new command
		6- out the lower bits of the required command to the data bus D4 --> D7 
		7- disable E PIN
	 */
		DIO_CLR(data_port, CLR_high_bits); 
     3ca:	60 ef       	ldi	r22, 0xF0	; 240
     3cc:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     3d0:	0e 94 57 03 	call	0x6ae	; 0x6ae <DIO_CLR>
		DIO_set(data_port, four_high_bits(command));
     3d4:	6c 2f       	mov	r22, r28
     3d6:	60 7f       	andi	r22, 0xF0	; 240
     3d8:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     3dc:	0e 94 3f 03 	call	0x67e	; 0x67e <DIO_set>
		delay_ms(1); /* delay for tpsw*/
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	80 e8       	ldi	r24, 0x80	; 128
     3e6:	9f e3       	ldi	r25, 0x3F	; 63
     3e8:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		DIO_CLR_BIT(ctrl_port, E); 
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     3f2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_CLR_BIT>
		delay_ms(1); /* delay for th*/
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	80 e8       	ldi	r24, 0x80	; 128
     3fc:	9f e3       	ldi	r25, 0x3F	; 63
     3fe:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		DIO_SET_BIT(ctrl_port, E);
     402:	62 e0       	ldi	r22, 0x02	; 2
     404:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     408:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_SET_BIT>
		delay_ms(1); /* delay for tpw - tpws*/
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	80 e8       	ldi	r24, 0x80	; 128
     412:	9f e3       	ldi	r25, 0x3F	; 63
     414:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		DIO_CLR(data_port, CLR_high_bits);
     418:	60 ef       	ldi	r22, 0xF0	; 240
     41a:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     41e:	0e 94 57 03 	call	0x6ae	; 0x6ae <DIO_CLR>
		DIO_set(data_port, four_low_bits(command));
     422:	80 e1       	ldi	r24, 0x10	; 16
     424:	c8 9f       	mul	r28, r24
     426:	b0 01       	movw	r22, r0
     428:	11 24       	eor	r1, r1
     42a:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     42e:	0e 94 3f 03 	call	0x67e	; 0x67e <DIO_set>
		delay_ms(1); /* delay for tpsw*/
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	80 e8       	ldi	r24, 0x80	; 128
     438:	9f e3       	ldi	r25, 0x3F	; 63
     43a:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		DIO_CLR_BIT(ctrl_port, E);
     43e:	62 e0       	ldi	r22, 0x02	; 2
     440:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     444:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_CLR_BIT>
		delay_ms(1); /* delay for th*/
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	80 e8       	ldi	r24, 0x80	; 128
     44e:	9f e3       	ldi	r25, 0x3F	; 63
     450:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		DIO_set(data_port, command); /* out the required command to the data bus D0 --> D7 */
		delay_ms(1); /* delay for tpsw*/
		DIO_CLR_BIT(ctrl_port, E); /* disable E PIN */
		delay_ms(1); /* delay for th*/
	#endif
}
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <LCD_init>:
 * Created: 9/14/2021 4:45:38 PM
 *  Author: Omar
 */ 
#include "LCD.h"
void LCD_init(lcd_config config)
{
     458:	cf 93       	push	r28
     45a:	26 2f       	mov	r18, r22
     45c:	c9 2f       	mov	r28, r25
	ctrl_port = config.control_port;
     45e:	60 93 d3 00 	sts	0x00D3, r22	; 0x8000d3 <ctrl_port>
	data_port = config.data_port;
     462:	70 93 d4 00 	sts	0x00D4, r23	; 0x8000d4 <data_port>
	DIO_init(ctrl_port, config.ctrl_pins); /* Configure the control port as output port */ 
     466:	68 2f       	mov	r22, r24
     468:	82 2f       	mov	r24, r18
     46a:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_init>
	#if (bit_mode == Four_bit_mode)
		DIO_init(data_port,config.data_pins); /* Configure the data port as output port */
     46e:	6c 2f       	mov	r22, r28
     470:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     474:	0e 94 27 03 	call	0x64e	; 0x64e <DIO_init>
		send_cmd(0x02);
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	0e 94 c8 01 	call	0x390	; 0x390 <send_cmd>
		send_cmd(two_line_4_bit_mode); /* use 4_bit mode and 2 line LCD */
     47e:	88 e2       	ldi	r24, 0x28	; 40
     480:	0e 94 c8 01 	call	0x390	; 0x390 <send_cmd>
	#elif (bit_mode == Eight_bit_mode)
		DIO_init(data_port,config.data_pins); /* Configure the data port as output port */ 
		send_cmd(two_line_8_bit_mode); /* use 8_bit mode and 2 line LCD */
	#endif
	send_cmd(Display_ON); /* turn display on */
     484:	8c e0       	ldi	r24, 0x0C	; 12
     486:	0e 94 c8 01 	call	0x390	; 0x390 <send_cmd>
	send_cmd(CLEAR_COMMAND); /* clear LCD at the beginning */
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0e 94 c8 01 	call	0x390	; 0x390 <send_cmd>
	
}
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <send_char>:
		DIO_CLR_BIT(ctrl_port, E); /* disable E PIN */
		delay_ms(1); /* delay for th*/
	#endif
}
void send_char( uint8_t data_8)
{
     494:	cf 93       	push	r28
     496:	c8 2f       	mov	r28, r24
	
	DIO_SET_BIT(ctrl_port, RS); /* data Mode RS=0 */
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     49e:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_SET_BIT>
	DIO_CLR_BIT(ctrl_port, RW); /* write data to LCD so RW=0 */
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     4a8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_CLR_BIT>
	delay_ms(1); /* delay for tas*/
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	80 e8       	ldi	r24, 0x80	; 128
     4b2:	9f e3       	ldi	r25, 0x3F	; 63
     4b4:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
	DIO_SET_BIT(ctrl_port, E); /* enable writing data on D0-->D7 */
     4b8:	62 e0       	ldi	r22, 0x02	; 2
     4ba:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     4be:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_SET_BIT>
	delay_ms(1); /* delay for tpw - tpws*/
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	80 e8       	ldi	r24, 0x80	; 128
     4c8:	9f e3       	ldi	r25, 0x3F	; 63
     4ca:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		4- enable writing data on D4-->D7 again
		5- clear data port before the new command
		6- out the lower bits of the required command to the data bus D4 --> D7 
		7- disable E PIN
	 */
		DIO_CLR(data_port, CLR_high_bits); 
     4ce:	60 ef       	ldi	r22, 0xF0	; 240
     4d0:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     4d4:	0e 94 57 03 	call	0x6ae	; 0x6ae <DIO_CLR>
		DIO_set(data_port, four_high_bits(data_8));
     4d8:	6c 2f       	mov	r22, r28
     4da:	60 7f       	andi	r22, 0xF0	; 240
     4dc:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     4e0:	0e 94 3f 03 	call	0x67e	; 0x67e <DIO_set>
		delay_ms(1); /* delay for tpsw*/
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	80 e8       	ldi	r24, 0x80	; 128
     4ea:	9f e3       	ldi	r25, 0x3F	; 63
     4ec:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		DIO_CLR_BIT(ctrl_port, E); 
     4f0:	62 e0       	ldi	r22, 0x02	; 2
     4f2:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     4f6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_CLR_BIT>
		delay_ms(1); /* delay for th*/
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	80 e8       	ldi	r24, 0x80	; 128
     500:	9f e3       	ldi	r25, 0x3F	; 63
     502:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		DIO_SET_BIT(ctrl_port, E); 
     506:	62 e0       	ldi	r22, 0x02	; 2
     508:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     50c:	0e 94 ab 03 	call	0x756	; 0x756 <DIO_SET_BIT>
		delay_ms(1); /* delay for tpw - tpws*/
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	80 e8       	ldi	r24, 0x80	; 128
     516:	9f e3       	ldi	r25, 0x3F	; 63
     518:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		DIO_CLR(data_port, CLR_high_bits); 
     51c:	60 ef       	ldi	r22, 0xF0	; 240
     51e:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     522:	0e 94 57 03 	call	0x6ae	; 0x6ae <DIO_CLR>
		DIO_set(data_port, four_low_bits(data_8));
     526:	80 e1       	ldi	r24, 0x10	; 16
     528:	c8 9f       	mul	r28, r24
     52a:	b0 01       	movw	r22, r0
     52c:	11 24       	eor	r1, r1
     52e:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <data_port>
     532:	0e 94 3f 03 	call	0x67e	; 0x67e <DIO_set>
		delay_ms(1); /* delay for tpsw*/
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	80 e8       	ldi	r24, 0x80	; 128
     53c:	9f e3       	ldi	r25, 0x3F	; 63
     53e:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		DIO_CLR_BIT(ctrl_port, E); 
     542:	62 e0       	ldi	r22, 0x02	; 2
     544:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <ctrl_port>
     548:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_CLR_BIT>
		delay_ms(1); /* delay for th*/
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	80 e8       	ldi	r24, 0x80	; 128
     552:	9f e3       	ldi	r25, 0x3F	; 63
     554:	0e 94 14 07 	call	0xe28	; 0xe28 <delay_ms>
		DIO_set(data_port, data_8); 
		delay_ms(1); /* delay for tpsw*/
		DIO_CLR_BIT(ctrl_port, E); 
		delay_ms(1); /* delay for th*/
	#endif	
}
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <send_string>:
void send_string(uint8_t* str)
{
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	8c 01       	movw	r16, r24
	uint8_t char_index = 0;
     564:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[char_index] != '\0')
     566:	03 c0       	rjmp	.+6      	; 0x56e <send_string+0x12>
	{
		send_char(str[char_index]);
     568:	0e 94 4a 02 	call	0x494	; 0x494 <send_char>
		char_index ++;
     56c:	cf 5f       	subi	r28, 0xFF	; 255
	#endif	
}
void send_string(uint8_t* str)
{
	uint8_t char_index = 0;
	while(str[char_index] != '\0')
     56e:	f8 01       	movw	r30, r16
     570:	ec 0f       	add	r30, r28
     572:	f1 1d       	adc	r31, r1
     574:	80 81       	ld	r24, Z
     576:	81 11       	cpse	r24, r1
     578:	f7 cf       	rjmp	.-18     	; 0x568 <send_string+0xc>
	{
		send_char(str[char_index]);
		char_index ++;
	}
}
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <go_to_row_column>:
	send_string(str);
}
void go_to_row_column(uint8_t row, uint8_t col)
{
	uint8_t address = 0;
	switch(row)
     582:	88 23       	and	r24, r24
     584:	29 f0       	breq	.+10     	; 0x590 <go_to_row_column+0xe>
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	11 f0       	breq	.+4      	; 0x58e <go_to_row_column+0xc>
	}
	send_string(str);
}
void go_to_row_column(uint8_t row, uint8_t col)
{
	uint8_t address = 0;
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	01 c0       	rjmp	.+2      	; 0x590 <go_to_row_column+0xe>
	{
		case first_row:
			address = col;
			break;
		case second_row:
			address = col + second_row_address;
     58e:	60 5c       	subi	r22, 0xC0	; 192
			break;
	}
	send_cmd (address | cursor_location); // address + 0x80
     590:	86 2f       	mov	r24, r22
     592:	80 68       	ori	r24, 0x80	; 128
     594:	0e 94 c8 01 	call	0x390	; 0x390 <send_cmd>
     598:	08 95       	ret

0000059a <swap>:
}
void swap(uint8_t* num1, uint8_t* num2)
{
     59a:	fc 01       	movw	r30, r24
     59c:	db 01       	movw	r26, r22
	*num1 ^= *num2;
     59e:	9c 91       	ld	r25, X
     5a0:	80 81       	ld	r24, Z
     5a2:	98 27       	eor	r25, r24
     5a4:	90 83       	st	Z, r25
	*num2 ^= *num1;
     5a6:	2c 91       	ld	r18, X
     5a8:	92 27       	eor	r25, r18
     5aa:	9c 93       	st	X, r25
	*num1 ^= *num2;
     5ac:	80 81       	ld	r24, Z
     5ae:	98 27       	eor	r25, r24
     5b0:	90 83       	st	Z, r25
     5b2:	08 95       	ret

000005b4 <LCD_intgerToString>:
		char_index ++;
	}
}

void LCD_intgerToString(uint8_t data)
{
     5b4:	cf 93       	push	r28
	uint8_t* str = "0";
	if(data < 10 && -10 < data)
     5b6:	8a 30       	cpi	r24, 0x0A	; 10
     5b8:	e8 f4       	brcc	.+58     	; 0x5f4 <LCD_intgerToString+0x40>
	{
		str[0] = data + '0'; // add 0 ascii to convert to character 
     5ba:	e8 ec       	ldi	r30, 0xC8	; 200
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 5d       	subi	r24, 0xD0	; 208
     5c0:	80 83       	st	Z, r24
		str[1] = '\0';	 // null terminator
     5c2:	11 82       	std	Z+1, r1	; 0x01
     5c4:	37 c0       	rjmp	.+110    	; 0x634 <LCD_intgerToString+0x80>
	else
	{
		uint8_t iterator = 0;
		while((data / 10) != 0)
		{
			str[iterator] = (data % 10) + '0';
     5c6:	e3 2f       	mov	r30, r19
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	e8 53       	subi	r30, 0x38	; 56
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	9d ec       	ldi	r25, 0xCD	; 205
     5d0:	89 9f       	mul	r24, r25
     5d2:	91 2d       	mov	r25, r1
     5d4:	11 24       	eor	r1, r1
     5d6:	96 95       	lsr	r25
     5d8:	96 95       	lsr	r25
     5da:	96 95       	lsr	r25
     5dc:	49 2f       	mov	r20, r25
     5de:	44 0f       	add	r20, r20
     5e0:	24 2f       	mov	r18, r20
     5e2:	22 0f       	add	r18, r18
     5e4:	22 0f       	add	r18, r18
     5e6:	24 0f       	add	r18, r20
     5e8:	82 1b       	sub	r24, r18
     5ea:	80 5d       	subi	r24, 0xD0	; 208
     5ec:	80 83       	st	Z, r24
			data /= 10;
     5ee:	89 2f       	mov	r24, r25
			iterator++;
     5f0:	3f 5f       	subi	r19, 0xFF	; 255
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <LCD_intgerToString+0x42>
     5f4:	30 e0       	ldi	r19, 0x00	; 0
		str[1] = '\0';	 // null terminator
	}
	else
	{
		uint8_t iterator = 0;
		while((data / 10) != 0)
     5f6:	8a 30       	cpi	r24, 0x0A	; 10
     5f8:	30 f7       	brcc	.-52     	; 0x5c6 <LCD_intgerToString+0x12>
		{
			str[iterator] = (data % 10) + '0';
			data /= 10;
			iterator++;
		}
		str[iterator] = data + '0'; // last number
     5fa:	e3 2f       	mov	r30, r19
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	e8 53       	subi	r30, 0x38	; 56
     600:	ff 4f       	sbci	r31, 0xFF	; 255
     602:	80 5d       	subi	r24, 0xD0	; 208
     604:	80 83       	st	Z, r24
		iterator++;
     606:	3f 5f       	subi	r19, 0xFF	; 255
		str[iterator] = '\0';	 // null terminator
     608:	e3 2f       	mov	r30, r19
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	e8 53       	subi	r30, 0x38	; 56
     60e:	ff 4f       	sbci	r31, 0xFF	; 255
     610:	10 82       	st	Z, r1
		for(uint8_t num_index = 0; num_index < sizeof(str)/2; num_index++)
     612:	c0 e0       	ldi	r28, 0x00	; 0
     614:	0d c0       	rjmp	.+26     	; 0x630 <LCD_intgerToString+0x7c>
		{
			swap(&str[num_index], &str[ sizeof(str) - num_index-1]);
     616:	8c 2f       	mov	r24, r28
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	61 e0       	ldi	r22, 0x01	; 1
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	68 1b       	sub	r22, r24
     620:	79 0b       	sbc	r23, r25
     622:	68 53       	subi	r22, 0x38	; 56
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	88 53       	subi	r24, 0x38	; 56
     628:	9f 4f       	sbci	r25, 0xFF	; 255
     62a:	0e 94 cd 02 	call	0x59a	; 0x59a <swap>
			iterator++;
		}
		str[iterator] = data + '0'; // last number
		iterator++;
		str[iterator] = '\0';	 // null terminator
		for(uint8_t num_index = 0; num_index < sizeof(str)/2; num_index++)
     62e:	cf 5f       	subi	r28, 0xFF	; 255
     630:	cc 23       	and	r28, r28
     632:	89 f3       	breq	.-30     	; 0x616 <LCD_intgerToString+0x62>
		{
			swap(&str[num_index], &str[ sizeof(str) - num_index-1]);
		}
	}
	send_string(str);
     634:	88 ec       	ldi	r24, 0xC8	; 200
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 ae 02 	call	0x55c	; 0x55c <send_string>
}
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <main>:
#include "APP/App.h"
#define ctrl_pins 0x07 // fist 3 pins
#define data_pins 0xf0 //higher data pins
int main(void)
{
	app_init();
     640:	0e 94 69 00 	call	0xd2	; 0xd2 <app_init>
	home_screen();
     644:	0e 94 b6 00 	call	0x16c	; 0x16c <home_screen>
    while (1) 
    {
		app();
     648:	0e 94 31 01 	call	0x262	; 0x262 <app>
     64c:	fd cf       	rjmp	.-6      	; 0x648 <main+0x8>

0000064e <DIO_init>:
			Data =  PIND & pins;
		}
		break;
	}
	return Data;
}
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	51 f0       	breq	.+20     	; 0x666 <DIO_init+0x18>
     652:	28 f0       	brcs	.+10     	; 0x65e <DIO_init+0x10>
     654:	82 30       	cpi	r24, 0x02	; 2
     656:	59 f0       	breq	.+22     	; 0x66e <DIO_init+0x20>
     658:	83 30       	cpi	r24, 0x03	; 3
     65a:	69 f0       	breq	.+26     	; 0x676 <DIO_init+0x28>
     65c:	08 95       	ret
     65e:	8a b3       	in	r24, 0x1a	; 26
     660:	68 2b       	or	r22, r24
     662:	6a bb       	out	0x1a, r22	; 26
     664:	08 95       	ret
     666:	87 b3       	in	r24, 0x17	; 23
     668:	68 2b       	or	r22, r24
     66a:	67 bb       	out	0x17, r22	; 23
     66c:	08 95       	ret
     66e:	84 b3       	in	r24, 0x14	; 20
     670:	68 2b       	or	r22, r24
     672:	64 bb       	out	0x14, r22	; 20
     674:	08 95       	ret
     676:	81 b3       	in	r24, 0x11	; 17
     678:	68 2b       	or	r22, r24
     67a:	61 bb       	out	0x11, r22	; 17
     67c:	08 95       	ret

0000067e <DIO_set>:
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	51 f0       	breq	.+20     	; 0x696 <DIO_set+0x18>
     682:	28 f0       	brcs	.+10     	; 0x68e <DIO_set+0x10>
     684:	82 30       	cpi	r24, 0x02	; 2
     686:	59 f0       	breq	.+22     	; 0x69e <DIO_set+0x20>
     688:	83 30       	cpi	r24, 0x03	; 3
     68a:	69 f0       	breq	.+26     	; 0x6a6 <DIO_set+0x28>
     68c:	08 95       	ret
     68e:	8b b3       	in	r24, 0x1b	; 27
     690:	68 2b       	or	r22, r24
     692:	6b bb       	out	0x1b, r22	; 27
     694:	08 95       	ret
     696:	8b b3       	in	r24, 0x1b	; 27
     698:	68 2b       	or	r22, r24
     69a:	6b bb       	out	0x1b, r22	; 27
     69c:	08 95       	ret
     69e:	8b b3       	in	r24, 0x1b	; 27
     6a0:	68 2b       	or	r22, r24
     6a2:	6b bb       	out	0x1b, r22	; 27
     6a4:	08 95       	ret
     6a6:	8b b3       	in	r24, 0x1b	; 27
     6a8:	68 2b       	or	r22, r24
     6aa:	6b bb       	out	0x1b, r22	; 27
     6ac:	08 95       	ret

000006ae <DIO_CLR>:
     6ae:	81 30       	cpi	r24, 0x01	; 1
     6b0:	59 f0       	breq	.+22     	; 0x6c8 <DIO_CLR+0x1a>
     6b2:	28 f0       	brcs	.+10     	; 0x6be <DIO_CLR+0x10>
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	69 f0       	breq	.+26     	; 0x6d2 <DIO_CLR+0x24>
     6b8:	83 30       	cpi	r24, 0x03	; 3
     6ba:	81 f0       	breq	.+32     	; 0x6dc <DIO_CLR+0x2e>
     6bc:	08 95       	ret
     6be:	8b b3       	in	r24, 0x1b	; 27
     6c0:	60 95       	com	r22
     6c2:	68 23       	and	r22, r24
     6c4:	6b bb       	out	0x1b, r22	; 27
     6c6:	08 95       	ret
     6c8:	88 b3       	in	r24, 0x18	; 24
     6ca:	60 95       	com	r22
     6cc:	68 23       	and	r22, r24
     6ce:	68 bb       	out	0x18, r22	; 24
     6d0:	08 95       	ret
     6d2:	85 b3       	in	r24, 0x15	; 21
     6d4:	60 95       	com	r22
     6d6:	68 23       	and	r22, r24
     6d8:	65 bb       	out	0x15, r22	; 21
     6da:	08 95       	ret
     6dc:	82 b3       	in	r24, 0x12	; 18
     6de:	60 95       	com	r22
     6e0:	68 23       	and	r22, r24
     6e2:	62 bb       	out	0x12, r22	; 18
     6e4:	08 95       	ret

000006e6 <DIO_CLR_BIT>:
void DIO_CLR_BIT(uint8_t Port_name, uint8_t pin)
{
	switch(Port_name)
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	91 f0       	breq	.+36     	; 0x70e <DIO_CLR_BIT+0x28>
     6ea:	28 f0       	brcs	.+10     	; 0x6f6 <DIO_CLR_BIT+0x10>
     6ec:	82 30       	cpi	r24, 0x02	; 2
     6ee:	d9 f0       	breq	.+54     	; 0x726 <DIO_CLR_BIT+0x40>
     6f0:	83 30       	cpi	r24, 0x03	; 3
     6f2:	29 f1       	breq	.+74     	; 0x73e <DIO_CLR_BIT+0x58>
     6f4:	08 95       	ret
	{
		case PA:
		{
			CLRBIT(PORTA,pin);
     6f6:	2b b3       	in	r18, 0x1b	; 27
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_CLR_BIT+0x1c>
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	6a 95       	dec	r22
     704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_CLR_BIT+0x18>
     706:	80 95       	com	r24
     708:	82 23       	and	r24, r18
     70a:	8b bb       	out	0x1b, r24	; 27
		}
		break;
     70c:	08 95       	ret
		case PB:
		{
			CLRBIT(PORTB,pin);
     70e:	28 b3       	in	r18, 0x18	; 24
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_CLR_BIT+0x34>
     716:	88 0f       	add	r24, r24
     718:	99 1f       	adc	r25, r25
     71a:	6a 95       	dec	r22
     71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_CLR_BIT+0x30>
     71e:	80 95       	com	r24
     720:	82 23       	and	r24, r18
     722:	88 bb       	out	0x18, r24	; 24
		}
		break;
     724:	08 95       	ret
		case PC:
		{
			CLRBIT(PORTC,pin);
     726:	25 b3       	in	r18, 0x15	; 21
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_CLR_BIT+0x4c>
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	6a 95       	dec	r22
     734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_CLR_BIT+0x48>
     736:	80 95       	com	r24
     738:	82 23       	and	r24, r18
     73a:	85 bb       	out	0x15, r24	; 21
		}
		break;
     73c:	08 95       	ret
		case PD:
		{
			CLRBIT(PORTD,pin);
     73e:	22 b3       	in	r18, 0x12	; 18
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_CLR_BIT+0x64>
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	6a 95       	dec	r22
     74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_CLR_BIT+0x60>
     74e:	80 95       	com	r24
     750:	82 23       	and	r24, r18
     752:	82 bb       	out	0x12, r24	; 18
     754:	08 95       	ret

00000756 <DIO_SET_BIT>:
		break;
	}
}
void DIO_SET_BIT(uint8_t Port_name, uint8_t pin)
{
	switch(Port_name)
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	89 f0       	breq	.+34     	; 0x77c <DIO_SET_BIT+0x26>
     75a:	28 f0       	brcs	.+10     	; 0x766 <DIO_SET_BIT+0x10>
     75c:	82 30       	cpi	r24, 0x02	; 2
     75e:	c9 f0       	breq	.+50     	; 0x792 <DIO_SET_BIT+0x3c>
     760:	83 30       	cpi	r24, 0x03	; 3
     762:	11 f1       	breq	.+68     	; 0x7a8 <DIO_SET_BIT+0x52>
     764:	08 95       	ret
	{
		case PA:
		{
			SETBIT(PORTA,pin);
     766:	2b b3       	in	r18, 0x1b	; 27
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	02 c0       	rjmp	.+4      	; 0x772 <DIO_SET_BIT+0x1c>
     76e:	88 0f       	add	r24, r24
     770:	99 1f       	adc	r25, r25
     772:	6a 95       	dec	r22
     774:	e2 f7       	brpl	.-8      	; 0x76e <DIO_SET_BIT+0x18>
     776:	82 2b       	or	r24, r18
     778:	8b bb       	out	0x1b, r24	; 27
		}
		break;
     77a:	08 95       	ret
		case PB:
		{
			SETBIT(PORTB,pin);
     77c:	28 b3       	in	r18, 0x18	; 24
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_SET_BIT+0x32>
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	6a 95       	dec	r22
     78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_SET_BIT+0x2e>
     78c:	82 2b       	or	r24, r18
     78e:	88 bb       	out	0x18, r24	; 24
		}
		break;
     790:	08 95       	ret
		case PC:
		{
			SETBIT(PORTC,pin);
     792:	25 b3       	in	r18, 0x15	; 21
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_SET_BIT+0x48>
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	6a 95       	dec	r22
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_SET_BIT+0x44>
     7a2:	82 2b       	or	r24, r18
     7a4:	85 bb       	out	0x15, r24	; 21
		}
		break;
     7a6:	08 95       	ret
		case PD:
		{
			SETBIT(PORTD,pin);
     7a8:	22 b3       	in	r18, 0x12	; 18
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_SET_BIT+0x5e>
     7b0:	88 0f       	add	r24, r24
     7b2:	99 1f       	adc	r25, r25
     7b4:	6a 95       	dec	r22
     7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_SET_BIT+0x5a>
     7b8:	82 2b       	or	r24, r18
     7ba:	82 bb       	out	0x12, r24	; 18
     7bc:	08 95       	ret

000007be <__vector_7>:
			break;
		case  timer1:
			Timer1_Call_Back_Ptr = Ptr2Func;
			break;
		case  timer2:
			Timer2_Call_Back_Ptr = Ptr2Func;
     7be:	1f 92       	push	r1
     7c0:	0f 92       	push	r0
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	0f 92       	push	r0
     7c6:	11 24       	eor	r1, r1
     7c8:	2f 93       	push	r18
     7ca:	3f 93       	push	r19
     7cc:	4f 93       	push	r20
     7ce:	5f 93       	push	r21
     7d0:	6f 93       	push	r22
     7d2:	7f 93       	push	r23
     7d4:	8f 93       	push	r24
     7d6:	9f 93       	push	r25
     7d8:	af 93       	push	r26
     7da:	bf 93       	push	r27
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31
     7e0:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <Timer1_Call_Back_Ptr>
     7e4:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <Timer1_Call_Back_Ptr+0x1>
     7e8:	09 95       	icall
     7ea:	ff 91       	pop	r31
     7ec:	ef 91       	pop	r30
     7ee:	bf 91       	pop	r27
     7f0:	af 91       	pop	r26
     7f2:	9f 91       	pop	r25
     7f4:	8f 91       	pop	r24
     7f6:	7f 91       	pop	r23
     7f8:	6f 91       	pop	r22
     7fa:	5f 91       	pop	r21
     7fc:	4f 91       	pop	r20
     7fe:	3f 91       	pop	r19
     800:	2f 91       	pop	r18
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	0f 90       	pop	r0
     808:	1f 90       	pop	r1
     80a:	18 95       	reti

0000080c <__vector_9>:
     80c:	1f 92       	push	r1
     80e:	0f 92       	push	r0
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	0f 92       	push	r0
     814:	11 24       	eor	r1, r1
     816:	2f 93       	push	r18
     818:	3f 93       	push	r19
     81a:	4f 93       	push	r20
     81c:	5f 93       	push	r21
     81e:	6f 93       	push	r22
     820:	7f 93       	push	r23
     822:	8f 93       	push	r24
     824:	9f 93       	push	r25
     826:	af 93       	push	r26
     828:	bf 93       	push	r27
     82a:	ef 93       	push	r30
     82c:	ff 93       	push	r31
     82e:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <Timer1_Call_Back_Ptr>
     832:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <Timer1_Call_Back_Ptr+0x1>
     836:	09 95       	icall
     838:	ff 91       	pop	r31
     83a:	ef 91       	pop	r30
     83c:	bf 91       	pop	r27
     83e:	af 91       	pop	r26
     840:	9f 91       	pop	r25
     842:	8f 91       	pop	r24
     844:	7f 91       	pop	r23
     846:	6f 91       	pop	r22
     848:	5f 91       	pop	r21
     84a:	4f 91       	pop	r20
     84c:	3f 91       	pop	r19
     84e:	2f 91       	pop	r18
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0
     856:	1f 90       	pop	r1
     858:	18 95       	reti

0000085a <__vector_10>:
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	2f 93       	push	r18
     866:	3f 93       	push	r19
     868:	4f 93       	push	r20
     86a:	5f 93       	push	r21
     86c:	6f 93       	push	r22
     86e:	7f 93       	push	r23
     870:	8f 93       	push	r24
     872:	9f 93       	push	r25
     874:	af 93       	push	r26
     876:	bf 93       	push	r27
     878:	ef 93       	push	r30
     87a:	ff 93       	push	r31
     87c:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <Timer0_Call_Back_Ptr>
     880:	f0 91 cf 00 	lds	r31, 0x00CF	; 0x8000cf <Timer0_Call_Back_Ptr+0x1>
     884:	09 95       	icall
     886:	ff 91       	pop	r31
     888:	ef 91       	pop	r30
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	7f 91       	pop	r23
     894:	6f 91       	pop	r22
     896:	5f 91       	pop	r21
     898:	4f 91       	pop	r20
     89a:	3f 91       	pop	r19
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <__vector_11>:
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	2f 93       	push	r18
     8b4:	3f 93       	push	r19
     8b6:	4f 93       	push	r20
     8b8:	5f 93       	push	r21
     8ba:	6f 93       	push	r22
     8bc:	7f 93       	push	r23
     8be:	8f 93       	push	r24
     8c0:	9f 93       	push	r25
     8c2:	af 93       	push	r26
     8c4:	bf 93       	push	r27
     8c6:	ef 93       	push	r30
     8c8:	ff 93       	push	r31
     8ca:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <Timer0_Call_Back_Ptr>
     8ce:	f0 91 cf 00 	lds	r31, 0x00CF	; 0x8000cf <Timer0_Call_Back_Ptr+0x1>
     8d2:	09 95       	icall
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	0f 90       	pop	r0
     8f2:	1f 90       	pop	r1
     8f4:	18 95       	reti

000008f6 <__vector_4>:
     8f6:	1f 92       	push	r1
     8f8:	0f 92       	push	r0
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	0f 92       	push	r0
     8fe:	11 24       	eor	r1, r1
     900:	2f 93       	push	r18
     902:	3f 93       	push	r19
     904:	4f 93       	push	r20
     906:	5f 93       	push	r21
     908:	6f 93       	push	r22
     90a:	7f 93       	push	r23
     90c:	8f 93       	push	r24
     90e:	9f 93       	push	r25
     910:	af 93       	push	r26
     912:	bf 93       	push	r27
     914:	ef 93       	push	r30
     916:	ff 93       	push	r31
     918:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <__data_end>
     91c:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <__data_end+0x1>
     920:	09 95       	icall
     922:	ff 91       	pop	r31
     924:	ef 91       	pop	r30
     926:	bf 91       	pop	r27
     928:	af 91       	pop	r26
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	7f 91       	pop	r23
     930:	6f 91       	pop	r22
     932:	5f 91       	pop	r21
     934:	4f 91       	pop	r20
     936:	3f 91       	pop	r19
     938:	2f 91       	pop	r18
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <__vector_5>:
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	2f 93       	push	r18
     950:	3f 93       	push	r19
     952:	4f 93       	push	r20
     954:	5f 93       	push	r21
     956:	6f 93       	push	r22
     958:	7f 93       	push	r23
     95a:	8f 93       	push	r24
     95c:	9f 93       	push	r25
     95e:	af 93       	push	r26
     960:	bf 93       	push	r27
     962:	ef 93       	push	r30
     964:	ff 93       	push	r31
     966:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <__data_end>
     96a:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <__data_end+0x1>
     96e:	09 95       	icall
     970:	ff 91       	pop	r31
     972:	ef 91       	pop	r30
     974:	bf 91       	pop	r27
     976:	af 91       	pop	r26
     978:	9f 91       	pop	r25
     97a:	8f 91       	pop	r24
     97c:	7f 91       	pop	r23
     97e:	6f 91       	pop	r22
     980:	5f 91       	pop	r21
     982:	4f 91       	pop	r20
     984:	3f 91       	pop	r19
     986:	2f 91       	pop	r18
     988:	0f 90       	pop	r0
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	0f 90       	pop	r0
     98e:	1f 90       	pop	r1
     990:	18 95       	reti

00000992 <Timer_init>:
			break;	
	}
}
void Timer_init(const config* conf)
{
     992:	fc 01       	movw	r30, r24
	if(conf->timer_num == timer0)
     994:	80 81       	ld	r24, Z
     996:	81 11       	cpse	r24, r1
     998:	b3 c0       	rjmp	.+358    	; 0xb00 <Timer_init+0x16e>
	{
		if(conf->timer_mode == normal)
     99a:	81 81       	ldd	r24, Z+1	; 0x01
     99c:	81 11       	cpse	r24, r1
     99e:	54 c0       	rjmp	.+168    	; 0xa48 <Timer_init+0xb6>
		{
			TCNT0 = 0; //set timer initial value to 0
     9a0:	12 be       	out	0x32, r1	; 50
			SETBIT(TIMSK,0); //enable overflow interrupt
     9a2:	89 b7       	in	r24, 0x39	; 57
     9a4:	81 60       	ori	r24, 0x01	; 1
     9a6:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR0,7); //set FOCO pin non_pwm mode
     9a8:	83 b7       	in	r24, 0x33	; 51
     9aa:	80 68       	ori	r24, 0x80	; 128
     9ac:	83 bf       	out	0x33, r24	; 51
			switch(conf->timer_preScale)
     9ae:	82 81       	ldd	r24, Z+2	; 0x02
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	11 f1       	breq	.+68     	; 0x9f8 <Timer_init+0x66>
     9b4:	28 f4       	brcc	.+10     	; 0x9c0 <Timer_init+0x2e>
     9b6:	88 23       	and	r24, r24
     9b8:	59 f0       	breq	.+22     	; 0x9d0 <Timer_init+0x3e>
     9ba:	81 30       	cpi	r24, 0x01	; 1
     9bc:	99 f0       	breq	.+38     	; 0x9e4 <Timer_init+0x52>
     9be:	08 95       	ret
     9c0:	86 30       	cpi	r24, 0x06	; 6
     9c2:	71 f1       	breq	.+92     	; 0xa20 <Timer_init+0x8e>
     9c4:	87 30       	cpi	r24, 0x07	; 7
     9c6:	b1 f1       	breq	.+108    	; 0xa34 <Timer_init+0xa2>
     9c8:	85 30       	cpi	r24, 0x05	; 5
     9ca:	09 f0       	breq	.+2      	; 0x9ce <Timer_init+0x3c>
     9cc:	2c c2       	rjmp	.+1112   	; 0xe26 <Timer_init+0x494>
     9ce:	1e c0       	rjmp	.+60     	; 0xa0c <Timer_init+0x7a>
			{
				case no_clock:
					CLRBIT(TCCR0,0);
     9d0:	83 b7       	in	r24, 0x33	; 51
     9d2:	8e 7f       	andi	r24, 0xFE	; 254
     9d4:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     9d6:	83 b7       	in	r24, 0x33	; 51
     9d8:	8d 7f       	andi	r24, 0xFD	; 253
     9da:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     9dc:	83 b7       	in	r24, 0x33	; 51
     9de:	8b 7f       	andi	r24, 0xFB	; 251
     9e0:	83 bf       	out	0x33, r24	; 51
					break;
     9e2:	08 95       	ret
				case f_cpu_clk:
					SETBIT(TCCR0,0);
     9e4:	83 b7       	in	r24, 0x33	; 51
     9e6:	81 60       	ori	r24, 0x01	; 1
     9e8:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     9ea:	83 b7       	in	r24, 0x33	; 51
     9ec:	8d 7f       	andi	r24, 0xFD	; 253
     9ee:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     9f0:	83 b7       	in	r24, 0x33	; 51
     9f2:	8b 7f       	andi	r24, 0xFB	; 251
     9f4:	83 bf       	out	0x33, r24	; 51
					break;
     9f6:	08 95       	ret
				case f_cpu_clk_8:
					CLRBIT(TCCR0,0);
     9f8:	83 b7       	in	r24, 0x33	; 51
     9fa:	8e 7f       	andi	r24, 0xFE	; 254
     9fc:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     9fe:	83 b7       	in	r24, 0x33	; 51
     a00:	82 60       	ori	r24, 0x02	; 2
     a02:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     a04:	83 b7       	in	r24, 0x33	; 51
     a06:	8b 7f       	andi	r24, 0xFB	; 251
     a08:	83 bf       	out	0x33, r24	; 51
					break;	
     a0a:	08 95       	ret
				case f_cpu_clk_32:
					break;
				case f_cpu_clk_64:
					SETBIT(TCCR0,0);
     a0c:	83 b7       	in	r24, 0x33	; 51
     a0e:	81 60       	ori	r24, 0x01	; 1
     a10:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     a12:	83 b7       	in	r24, 0x33	; 51
     a14:	82 60       	ori	r24, 0x02	; 2
     a16:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     a18:	83 b7       	in	r24, 0x33	; 51
     a1a:	8b 7f       	andi	r24, 0xFB	; 251
     a1c:	83 bf       	out	0x33, r24	; 51
					break;
     a1e:	08 95       	ret
				case f_cpu_clk_128:
					break;	
				case f_cpu_clk_256:
					CLRBIT(TCCR0,0);
     a20:	83 b7       	in	r24, 0x33	; 51
     a22:	8e 7f       	andi	r24, 0xFE	; 254
     a24:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     a26:	83 b7       	in	r24, 0x33	; 51
     a28:	8d 7f       	andi	r24, 0xFD	; 253
     a2a:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     a2c:	83 b7       	in	r24, 0x33	; 51
     a2e:	84 60       	ori	r24, 0x04	; 4
     a30:	83 bf       	out	0x33, r24	; 51
					break;	
     a32:	08 95       	ret
				case f_cpu_clk_1024:
					SETBIT(TCCR0,0);
     a34:	83 b7       	in	r24, 0x33	; 51
     a36:	81 60       	ori	r24, 0x01	; 1
     a38:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     a3a:	83 b7       	in	r24, 0x33	; 51
     a3c:	8d 7f       	andi	r24, 0xFD	; 253
     a3e:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     a40:	83 b7       	in	r24, 0x33	; 51
     a42:	84 60       	ori	r24, 0x04	; 4
     a44:	83 bf       	out	0x33, r24	; 51
					break;
     a46:	08 95       	ret
			}
		}
		else if(conf->timer_mode == compare)
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	09 f0       	breq	.+2      	; 0xa4e <Timer_init+0xbc>
     a4c:	ec c1       	rjmp	.+984    	; 0xe26 <Timer_init+0x494>
		{
			TCNT0 = 0; //set timer initial value to 0
     a4e:	12 be       	out	0x32, r1	; 50
			SETBIT(TIMSK,1); //enable compare interrupt	
     a50:	89 b7       	in	r24, 0x39	; 57
     a52:	82 60       	ori	r24, 0x02	; 2
     a54:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR0,3);//set FOCO pin non_pwm mode and WGM
     a56:	83 b7       	in	r24, 0x33	; 51
     a58:	88 60       	ori	r24, 0x08	; 8
     a5a:	83 bf       	out	0x33, r24	; 51
			SETBIT(TCCR0,7);//set FOCO pin non_pwm mode and WGM
     a5c:	83 b7       	in	r24, 0x33	; 51
     a5e:	80 68       	ori	r24, 0x80	; 128
     a60:	83 bf       	out	0x33, r24	; 51
			OCR0  = conf->ticks_num; //set the compare value
     a62:	83 81       	ldd	r24, Z+3	; 0x03
     a64:	8c bf       	out	0x3c, r24	; 60
			switch(conf->timer_preScale)
     a66:	82 81       	ldd	r24, Z+2	; 0x02
     a68:	82 30       	cpi	r24, 0x02	; 2
     a6a:	11 f1       	breq	.+68     	; 0xab0 <Timer_init+0x11e>
     a6c:	28 f4       	brcc	.+10     	; 0xa78 <Timer_init+0xe6>
     a6e:	88 23       	and	r24, r24
     a70:	59 f0       	breq	.+22     	; 0xa88 <Timer_init+0xf6>
     a72:	81 30       	cpi	r24, 0x01	; 1
     a74:	99 f0       	breq	.+38     	; 0xa9c <Timer_init+0x10a>
     a76:	08 95       	ret
     a78:	86 30       	cpi	r24, 0x06	; 6
     a7a:	71 f1       	breq	.+92     	; 0xad8 <Timer_init+0x146>
     a7c:	87 30       	cpi	r24, 0x07	; 7
     a7e:	b1 f1       	breq	.+108    	; 0xaec <Timer_init+0x15a>
     a80:	85 30       	cpi	r24, 0x05	; 5
     a82:	09 f0       	breq	.+2      	; 0xa86 <Timer_init+0xf4>
     a84:	d0 c1       	rjmp	.+928    	; 0xe26 <Timer_init+0x494>
     a86:	1e c0       	rjmp	.+60     	; 0xac4 <Timer_init+0x132>
			{
				case no_clock:
				CLRBIT(TCCR0,0);
     a88:	83 b7       	in	r24, 0x33	; 51
     a8a:	8e 7f       	andi	r24, 0xFE	; 254
     a8c:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
     a8e:	83 b7       	in	r24, 0x33	; 51
     a90:	8d 7f       	andi	r24, 0xFD	; 253
     a92:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
     a94:	83 b7       	in	r24, 0x33	; 51
     a96:	8b 7f       	andi	r24, 0xFB	; 251
     a98:	83 bf       	out	0x33, r24	; 51
				break;
     a9a:	08 95       	ret
				case f_cpu_clk:
				SETBIT(TCCR0,0);
     a9c:	83 b7       	in	r24, 0x33	; 51
     a9e:	81 60       	ori	r24, 0x01	; 1
     aa0:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
     aa2:	83 b7       	in	r24, 0x33	; 51
     aa4:	8d 7f       	andi	r24, 0xFD	; 253
     aa6:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
     aa8:	83 b7       	in	r24, 0x33	; 51
     aaa:	8b 7f       	andi	r24, 0xFB	; 251
     aac:	83 bf       	out	0x33, r24	; 51
				break;
     aae:	08 95       	ret
				case f_cpu_clk_8:
				CLRBIT(TCCR0,0);
     ab0:	83 b7       	in	r24, 0x33	; 51
     ab2:	8e 7f       	andi	r24, 0xFE	; 254
     ab4:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,1);
     ab6:	83 b7       	in	r24, 0x33	; 51
     ab8:	82 60       	ori	r24, 0x02	; 2
     aba:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
     abc:	83 b7       	in	r24, 0x33	; 51
     abe:	8b 7f       	andi	r24, 0xFB	; 251
     ac0:	83 bf       	out	0x33, r24	; 51
				break;
     ac2:	08 95       	ret
				case f_cpu_clk_32:
				break;
				case f_cpu_clk_64:
				SETBIT(TCCR0,0);
     ac4:	83 b7       	in	r24, 0x33	; 51
     ac6:	81 60       	ori	r24, 0x01	; 1
     ac8:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,1);
     aca:	83 b7       	in	r24, 0x33	; 51
     acc:	82 60       	ori	r24, 0x02	; 2
     ace:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,2);
     ad0:	83 b7       	in	r24, 0x33	; 51
     ad2:	8b 7f       	andi	r24, 0xFB	; 251
     ad4:	83 bf       	out	0x33, r24	; 51
				break;
     ad6:	08 95       	ret
				case f_cpu_clk_128:
				break;
				case f_cpu_clk_256:
				CLRBIT(TCCR0,0);
     ad8:	83 b7       	in	r24, 0x33	; 51
     ada:	8e 7f       	andi	r24, 0xFE	; 254
     adc:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
     ade:	83 b7       	in	r24, 0x33	; 51
     ae0:	8d 7f       	andi	r24, 0xFD	; 253
     ae2:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,2);
     ae4:	83 b7       	in	r24, 0x33	; 51
     ae6:	84 60       	ori	r24, 0x04	; 4
     ae8:	83 bf       	out	0x33, r24	; 51
				break;
     aea:	08 95       	ret
				case f_cpu_clk_1024:
				SETBIT(TCCR0,0);
     aec:	83 b7       	in	r24, 0x33	; 51
     aee:	81 60       	ori	r24, 0x01	; 1
     af0:	83 bf       	out	0x33, r24	; 51
				CLRBIT(TCCR0,1);
     af2:	83 b7       	in	r24, 0x33	; 51
     af4:	8d 7f       	andi	r24, 0xFD	; 253
     af6:	83 bf       	out	0x33, r24	; 51
				SETBIT(TCCR0,2);
     af8:	83 b7       	in	r24, 0x33	; 51
     afa:	84 60       	ori	r24, 0x04	; 4
     afc:	83 bf       	out	0x33, r24	; 51
				break;
     afe:	08 95       	ret
			}
		}
	}
	else if(conf->timer_num == timer1)
     b00:	81 30       	cpi	r24, 0x01	; 1
     b02:	09 f0       	breq	.+2      	; 0xb06 <Timer_init+0x174>
     b04:	bd c0       	rjmp	.+378    	; 0xc80 <Timer_init+0x2ee>
	{
		if(conf->timer_mode == normal)
     b06:	81 81       	ldd	r24, Z+1	; 0x01
     b08:	81 11       	cpse	r24, r1
     b0a:	58 c0       	rjmp	.+176    	; 0xbbc <Timer_init+0x22a>
		{
			TCNT1H = 0; //set timer initial value to 0
     b0c:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0;
     b0e:	1c bc       	out	0x2c, r1	; 44
			SETBIT(TIMSK,2); //enable overflow interrupt
     b10:	89 b7       	in	r24, 0x39	; 57
     b12:	84 60       	ori	r24, 0x04	; 4
     b14:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR1A,2); //non_pwm mode
     b16:	8f b5       	in	r24, 0x2f	; 47
     b18:	84 60       	ori	r24, 0x04	; 4
     b1a:	8f bd       	out	0x2f, r24	; 47
			SETBIT(TCCR1A,3); //non_pwm mode
     b1c:	8f b5       	in	r24, 0x2f	; 47
     b1e:	88 60       	ori	r24, 0x08	; 8
     b20:	8f bd       	out	0x2f, r24	; 47
			switch(conf->timer_preScale)
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	11 f1       	breq	.+68     	; 0xb6c <Timer_init+0x1da>
     b28:	28 f4       	brcc	.+10     	; 0xb34 <Timer_init+0x1a2>
     b2a:	88 23       	and	r24, r24
     b2c:	59 f0       	breq	.+22     	; 0xb44 <Timer_init+0x1b2>
     b2e:	81 30       	cpi	r24, 0x01	; 1
     b30:	99 f0       	breq	.+38     	; 0xb58 <Timer_init+0x1c6>
     b32:	08 95       	ret
     b34:	86 30       	cpi	r24, 0x06	; 6
     b36:	71 f1       	breq	.+92     	; 0xb94 <Timer_init+0x202>
     b38:	87 30       	cpi	r24, 0x07	; 7
     b3a:	b1 f1       	breq	.+108    	; 0xba8 <Timer_init+0x216>
     b3c:	85 30       	cpi	r24, 0x05	; 5
     b3e:	09 f0       	breq	.+2      	; 0xb42 <Timer_init+0x1b0>
     b40:	72 c1       	rjmp	.+740    	; 0xe26 <Timer_init+0x494>
     b42:	1e c0       	rjmp	.+60     	; 0xb80 <Timer_init+0x1ee>
			{
				case no_clock:
				CLRBIT(TCCR1B,0);
     b44:	8e b5       	in	r24, 0x2e	; 46
     b46:	8e 7f       	andi	r24, 0xFE	; 254
     b48:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     b4a:	8e b5       	in	r24, 0x2e	; 46
     b4c:	8d 7f       	andi	r24, 0xFD	; 253
     b4e:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     b50:	8e b5       	in	r24, 0x2e	; 46
     b52:	8b 7f       	andi	r24, 0xFB	; 251
     b54:	8e bd       	out	0x2e, r24	; 46
				break;
     b56:	08 95       	ret
				case f_cpu_clk:
				SETBIT(TCCR1B,0);
     b58:	8e b5       	in	r24, 0x2e	; 46
     b5a:	81 60       	ori	r24, 0x01	; 1
     b5c:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     b5e:	8e b5       	in	r24, 0x2e	; 46
     b60:	8d 7f       	andi	r24, 0xFD	; 253
     b62:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     b64:	8e b5       	in	r24, 0x2e	; 46
     b66:	8b 7f       	andi	r24, 0xFB	; 251
     b68:	8e bd       	out	0x2e, r24	; 46
				break;
     b6a:	08 95       	ret
				case f_cpu_clk_8:
				CLRBIT(TCCR1B,0);
     b6c:	8e b5       	in	r24, 0x2e	; 46
     b6e:	8e 7f       	andi	r24, 0xFE	; 254
     b70:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
     b72:	8e b5       	in	r24, 0x2e	; 46
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     b78:	8e b5       	in	r24, 0x2e	; 46
     b7a:	8b 7f       	andi	r24, 0xFB	; 251
     b7c:	8e bd       	out	0x2e, r24	; 46
				break;
     b7e:	08 95       	ret
				case f_cpu_clk_32:
				break;
				case f_cpu_clk_64:
				SETBIT(TCCR1B,0);
     b80:	8e b5       	in	r24, 0x2e	; 46
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
     b86:	8e b5       	in	r24, 0x2e	; 46
     b88:	82 60       	ori	r24, 0x02	; 2
     b8a:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     b8c:	8e b5       	in	r24, 0x2e	; 46
     b8e:	8b 7f       	andi	r24, 0xFB	; 251
     b90:	8e bd       	out	0x2e, r24	; 46
				break;
     b92:	08 95       	ret
				case f_cpu_clk_128:
				break;
				case f_cpu_clk_256:
				CLRBIT(TCCR1B,0);
     b94:	8e b5       	in	r24, 0x2e	; 46
     b96:	8e 7f       	andi	r24, 0xFE	; 254
     b98:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     b9a:	8e b5       	in	r24, 0x2e	; 46
     b9c:	8d 7f       	andi	r24, 0xFD	; 253
     b9e:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
     ba0:	8e b5       	in	r24, 0x2e	; 46
     ba2:	84 60       	ori	r24, 0x04	; 4
     ba4:	8e bd       	out	0x2e, r24	; 46
				break;
     ba6:	08 95       	ret
				case f_cpu_clk_1024:
				SETBIT(TCCR1B,0);
     ba8:	8e b5       	in	r24, 0x2e	; 46
     baa:	81 60       	ori	r24, 0x01	; 1
     bac:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     bae:	8e b5       	in	r24, 0x2e	; 46
     bb0:	8d 7f       	andi	r24, 0xFD	; 253
     bb2:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
     bb4:	8e b5       	in	r24, 0x2e	; 46
     bb6:	84 60       	ori	r24, 0x04	; 4
     bb8:	8e bd       	out	0x2e, r24	; 46
				break;
     bba:	08 95       	ret
			}
			
		}
		else if(conf->timer_mode == compare)
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <Timer_init+0x230>
     bc0:	32 c1       	rjmp	.+612    	; 0xe26 <Timer_init+0x494>
		{
			TCNT1H = 0; //set timer initial value to 0
     bc2:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0;
     bc4:	1c bc       	out	0x2c, r1	; 44
			SETBIT(TIMSK,4); //enable compare interrupt
     bc6:	89 b7       	in	r24, 0x39	; 57
     bc8:	80 61       	ori	r24, 0x10	; 16
     bca:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR1A,2); //non_pwm mode
     bcc:	8f b5       	in	r24, 0x2f	; 47
     bce:	84 60       	ori	r24, 0x04	; 4
     bd0:	8f bd       	out	0x2f, r24	; 47
			SETBIT(TCCR1A,3); //non_pwm mode
     bd2:	8f b5       	in	r24, 0x2f	; 47
     bd4:	88 60       	ori	r24, 0x08	; 8
     bd6:	8f bd       	out	0x2f, r24	; 47
			OCR1AH = (uint8_t) (conf->ticks_num >> 8);
     bd8:	84 81       	ldd	r24, Z+4	; 0x04
     bda:	8b bd       	out	0x2b, r24	; 43
			OCR1AL = (uint8_t)(conf->ticks_num & (0X00FF));
     bdc:	83 81       	ldd	r24, Z+3	; 0x03
     bde:	8a bd       	out	0x2a, r24	; 42
			SETBIT(TCCR1B,3);
     be0:	8e b5       	in	r24, 0x2e	; 46
     be2:	88 60       	ori	r24, 0x08	; 8
     be4:	8e bd       	out	0x2e, r24	; 46
			switch(conf->timer_preScale)
     be6:	82 81       	ldd	r24, Z+2	; 0x02
     be8:	82 30       	cpi	r24, 0x02	; 2
     bea:	11 f1       	breq	.+68     	; 0xc30 <Timer_init+0x29e>
     bec:	28 f4       	brcc	.+10     	; 0xbf8 <Timer_init+0x266>
     bee:	88 23       	and	r24, r24
     bf0:	59 f0       	breq	.+22     	; 0xc08 <Timer_init+0x276>
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	99 f0       	breq	.+38     	; 0xc1c <Timer_init+0x28a>
     bf6:	08 95       	ret
     bf8:	86 30       	cpi	r24, 0x06	; 6
     bfa:	71 f1       	breq	.+92     	; 0xc58 <Timer_init+0x2c6>
     bfc:	87 30       	cpi	r24, 0x07	; 7
     bfe:	b1 f1       	breq	.+108    	; 0xc6c <Timer_init+0x2da>
     c00:	85 30       	cpi	r24, 0x05	; 5
     c02:	09 f0       	breq	.+2      	; 0xc06 <Timer_init+0x274>
     c04:	10 c1       	rjmp	.+544    	; 0xe26 <Timer_init+0x494>
     c06:	1e c0       	rjmp	.+60     	; 0xc44 <Timer_init+0x2b2>
			{
				case no_clock:
				CLRBIT(TCCR1B,0);
     c08:	8e b5       	in	r24, 0x2e	; 46
     c0a:	8e 7f       	andi	r24, 0xFE	; 254
     c0c:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     c0e:	8e b5       	in	r24, 0x2e	; 46
     c10:	8d 7f       	andi	r24, 0xFD	; 253
     c12:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     c14:	8e b5       	in	r24, 0x2e	; 46
     c16:	8b 7f       	andi	r24, 0xFB	; 251
     c18:	8e bd       	out	0x2e, r24	; 46
				break;
     c1a:	08 95       	ret
				case f_cpu_clk:
				SETBIT(TCCR1B,0);
     c1c:	8e b5       	in	r24, 0x2e	; 46
     c1e:	81 60       	ori	r24, 0x01	; 1
     c20:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     c22:	8e b5       	in	r24, 0x2e	; 46
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     c28:	8e b5       	in	r24, 0x2e	; 46
     c2a:	8b 7f       	andi	r24, 0xFB	; 251
     c2c:	8e bd       	out	0x2e, r24	; 46
				break;
     c2e:	08 95       	ret
				case f_cpu_clk_8:
				CLRBIT(TCCR1B,0);
     c30:	8e b5       	in	r24, 0x2e	; 46
     c32:	8e 7f       	andi	r24, 0xFE	; 254
     c34:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
     c36:	8e b5       	in	r24, 0x2e	; 46
     c38:	82 60       	ori	r24, 0x02	; 2
     c3a:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     c3c:	8e b5       	in	r24, 0x2e	; 46
     c3e:	8b 7f       	andi	r24, 0xFB	; 251
     c40:	8e bd       	out	0x2e, r24	; 46
				break;
     c42:	08 95       	ret
				case f_cpu_clk_32:
				break;
				case f_cpu_clk_64:
				SETBIT(TCCR1B,0);
     c44:	8e b5       	in	r24, 0x2e	; 46
     c46:	81 60       	ori	r24, 0x01	; 1
     c48:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,1);
     c4a:	8e b5       	in	r24, 0x2e	; 46
     c4c:	82 60       	ori	r24, 0x02	; 2
     c4e:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,2);
     c50:	8e b5       	in	r24, 0x2e	; 46
     c52:	8b 7f       	andi	r24, 0xFB	; 251
     c54:	8e bd       	out	0x2e, r24	; 46
				break;
     c56:	08 95       	ret
				case f_cpu_clk_128:
				break;
				case f_cpu_clk_256:
				CLRBIT(TCCR1B,0);
     c58:	8e b5       	in	r24, 0x2e	; 46
     c5a:	8e 7f       	andi	r24, 0xFE	; 254
     c5c:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     c5e:	8e b5       	in	r24, 0x2e	; 46
     c60:	8d 7f       	andi	r24, 0xFD	; 253
     c62:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
     c64:	8e b5       	in	r24, 0x2e	; 46
     c66:	84 60       	ori	r24, 0x04	; 4
     c68:	8e bd       	out	0x2e, r24	; 46
				break;
     c6a:	08 95       	ret
				case f_cpu_clk_1024:
				SETBIT(TCCR1B,0);
     c6c:	8e b5       	in	r24, 0x2e	; 46
     c6e:	81 60       	ori	r24, 0x01	; 1
     c70:	8e bd       	out	0x2e, r24	; 46
				CLRBIT(TCCR1B,1);
     c72:	8e b5       	in	r24, 0x2e	; 46
     c74:	8d 7f       	andi	r24, 0xFD	; 253
     c76:	8e bd       	out	0x2e, r24	; 46
				SETBIT(TCCR1B,2);
     c78:	8e b5       	in	r24, 0x2e	; 46
     c7a:	84 60       	ori	r24, 0x04	; 4
     c7c:	8e bd       	out	0x2e, r24	; 46
				break;
     c7e:	08 95       	ret
			}
			
		}	
	}
	else if(conf->timer_num == timer2)
     c80:	82 30       	cpi	r24, 0x02	; 2
     c82:	09 f0       	breq	.+2      	; 0xc86 <Timer_init+0x2f4>
     c84:	d0 c0       	rjmp	.+416    	; 0xe26 <Timer_init+0x494>
	{
		if(conf->timer_mode == normal)
     c86:	81 81       	ldd	r24, Z+1	; 0x01
     c88:	81 11       	cpse	r24, r1
     c8a:	63 c0       	rjmp	.+198    	; 0xd52 <Timer_init+0x3c0>
		{
			TCNT2 = 0; //set timer initial value to 0
     c8c:	14 bc       	out	0x24, r1	; 36
			SETBIT(TIMSK,6); //enable overflow interrupt
     c8e:	89 b7       	in	r24, 0x39	; 57
     c90:	80 64       	ori	r24, 0x40	; 64
     c92:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR2,7); //set FOCO pin non_pwm mode
     c94:	85 b5       	in	r24, 0x25	; 37
     c96:	80 68       	ori	r24, 0x80	; 128
     c98:	85 bd       	out	0x25, r24	; 37
			switch(conf->timer_preScale)
     c9a:	e2 81       	ldd	r30, Z+2	; 0x02
     c9c:	8e 2f       	mov	r24, r30
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	88 30       	cpi	r24, 0x08	; 8
     ca2:	91 05       	cpc	r25, r1
     ca4:	08 f0       	brcs	.+2      	; 0xca8 <Timer_init+0x316>
     ca6:	bf c0       	rjmp	.+382    	; 0xe26 <Timer_init+0x494>
     ca8:	fc 01       	movw	r30, r24
     caa:	e6 5c       	subi	r30, 0xC6	; 198
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__tablejump2__>
			{
				case no_clock:
					CLRBIT(TCCR0,0);
     cb2:	83 b7       	in	r24, 0x33	; 51
     cb4:	8e 7f       	andi	r24, 0xFE	; 254
     cb6:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     cb8:	83 b7       	in	r24, 0x33	; 51
     cba:	8d 7f       	andi	r24, 0xFD	; 253
     cbc:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     cbe:	83 b7       	in	r24, 0x33	; 51
     cc0:	8b 7f       	andi	r24, 0xFB	; 251
     cc2:	83 bf       	out	0x33, r24	; 51
					break;
     cc4:	08 95       	ret
				case f_cpu_clk:
					SETBIT(TCCR0,0);
     cc6:	83 b7       	in	r24, 0x33	; 51
     cc8:	81 60       	ori	r24, 0x01	; 1
     cca:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     ccc:	83 b7       	in	r24, 0x33	; 51
     cce:	8d 7f       	andi	r24, 0xFD	; 253
     cd0:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     cd2:	83 b7       	in	r24, 0x33	; 51
     cd4:	8b 7f       	andi	r24, 0xFB	; 251
     cd6:	83 bf       	out	0x33, r24	; 51
					break;
     cd8:	08 95       	ret
				case f_cpu_clk_8:
					CLRBIT(TCCR0,0);
     cda:	83 b7       	in	r24, 0x33	; 51
     cdc:	8e 7f       	andi	r24, 0xFE	; 254
     cde:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     ce0:	83 b7       	in	r24, 0x33	; 51
     ce2:	82 60       	ori	r24, 0x02	; 2
     ce4:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     ce6:	83 b7       	in	r24, 0x33	; 51
     ce8:	8b 7f       	andi	r24, 0xFB	; 251
     cea:	83 bf       	out	0x33, r24	; 51
					break;
     cec:	08 95       	ret
				case f_cpu_clk_32:
					SETBIT(TCCR0,0);
     cee:	83 b7       	in	r24, 0x33	; 51
     cf0:	81 60       	ori	r24, 0x01	; 1
     cf2:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     cf4:	83 b7       	in	r24, 0x33	; 51
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     cfa:	83 b7       	in	r24, 0x33	; 51
     cfc:	8b 7f       	andi	r24, 0xFB	; 251
     cfe:	83 bf       	out	0x33, r24	; 51
					break;
     d00:	08 95       	ret
				case f_cpu_clk_64:
					CLRBIT(TCCR0,0);
     d02:	83 b7       	in	r24, 0x33	; 51
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     d08:	83 b7       	in	r24, 0x33	; 51
     d0a:	8d 7f       	andi	r24, 0xFD	; 253
     d0c:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     d0e:	83 b7       	in	r24, 0x33	; 51
     d10:	84 60       	ori	r24, 0x04	; 4
     d12:	83 bf       	out	0x33, r24	; 51
					break;
     d14:	08 95       	ret
				case f_cpu_clk_128:
					SETBIT(TCCR0,0);
     d16:	83 b7       	in	r24, 0x33	; 51
     d18:	81 60       	ori	r24, 0x01	; 1
     d1a:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     d1c:	83 b7       	in	r24, 0x33	; 51
     d1e:	8d 7f       	andi	r24, 0xFD	; 253
     d20:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     d22:	83 b7       	in	r24, 0x33	; 51
     d24:	84 60       	ori	r24, 0x04	; 4
     d26:	83 bf       	out	0x33, r24	; 51
					break;
     d28:	08 95       	ret
				case f_cpu_clk_256:
					CLRBIT(TCCR0,0);
     d2a:	83 b7       	in	r24, 0x33	; 51
     d2c:	8e 7f       	andi	r24, 0xFE	; 254
     d2e:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     d30:	83 b7       	in	r24, 0x33	; 51
     d32:	82 60       	ori	r24, 0x02	; 2
     d34:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     d36:	83 b7       	in	r24, 0x33	; 51
     d38:	84 60       	ori	r24, 0x04	; 4
     d3a:	83 bf       	out	0x33, r24	; 51
					break;
     d3c:	08 95       	ret
				case f_cpu_clk_1024:
					SETBIT(TCCR0,0);
     d3e:	83 b7       	in	r24, 0x33	; 51
     d40:	81 60       	ori	r24, 0x01	; 1
     d42:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     d44:	83 b7       	in	r24, 0x33	; 51
     d46:	82 60       	ori	r24, 0x02	; 2
     d48:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     d4a:	83 b7       	in	r24, 0x33	; 51
     d4c:	84 60       	ori	r24, 0x04	; 4
     d4e:	83 bf       	out	0x33, r24	; 51
					break;
     d50:	08 95       	ret
			}	
		}
		else if(conf->timer_mode == compare)
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	09 f0       	breq	.+2      	; 0xd58 <Timer_init+0x3c6>
     d56:	67 c0       	rjmp	.+206    	; 0xe26 <Timer_init+0x494>
		{
			TCNT2 = 0; //set timer initial value to 0
     d58:	14 bc       	out	0x24, r1	; 36
			SETBIT(TIMSK,7); //enable compare interrupt
     d5a:	89 b7       	in	r24, 0x39	; 57
     d5c:	80 68       	ori	r24, 0x80	; 128
     d5e:	89 bf       	out	0x39, r24	; 57
			SETBIT(TCCR2,3);//set FOCO pin non_pwm mode and WGM
     d60:	85 b5       	in	r24, 0x25	; 37
     d62:	88 60       	ori	r24, 0x08	; 8
     d64:	85 bd       	out	0x25, r24	; 37
			SETBIT(TCCR2,7);//set FOCO pin non_pwm mode and WGM
     d66:	85 b5       	in	r24, 0x25	; 37
     d68:	80 68       	ori	r24, 0x80	; 128
     d6a:	85 bd       	out	0x25, r24	; 37
			OCR2  = conf->ticks_num; //set the compare value
     d6c:	83 81       	ldd	r24, Z+3	; 0x03
     d6e:	83 bd       	out	0x23, r24	; 35
			switch(conf->timer_preScale)
     d70:	e2 81       	ldd	r30, Z+2	; 0x02
     d72:	8e 2f       	mov	r24, r30
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	88 30       	cpi	r24, 0x08	; 8
     d78:	91 05       	cpc	r25, r1
     d7a:	08 f0       	brcs	.+2      	; 0xd7e <Timer_init+0x3ec>
     d7c:	54 c0       	rjmp	.+168    	; 0xe26 <Timer_init+0x494>
     d7e:	fc 01       	movw	r30, r24
     d80:	ee 5b       	subi	r30, 0xBE	; 190
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__tablejump2__>
			{
				case no_clock:
					CLRBIT(TCCR0,0);
     d88:	83 b7       	in	r24, 0x33	; 51
     d8a:	8e 7f       	andi	r24, 0xFE	; 254
     d8c:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     d8e:	83 b7       	in	r24, 0x33	; 51
     d90:	8d 7f       	andi	r24, 0xFD	; 253
     d92:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     d94:	83 b7       	in	r24, 0x33	; 51
     d96:	8b 7f       	andi	r24, 0xFB	; 251
     d98:	83 bf       	out	0x33, r24	; 51
					break;
     d9a:	08 95       	ret
				case f_cpu_clk:
					SETBIT(TCCR0,0);
     d9c:	83 b7       	in	r24, 0x33	; 51
     d9e:	81 60       	ori	r24, 0x01	; 1
     da0:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     da2:	83 b7       	in	r24, 0x33	; 51
     da4:	8d 7f       	andi	r24, 0xFD	; 253
     da6:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     da8:	83 b7       	in	r24, 0x33	; 51
     daa:	8b 7f       	andi	r24, 0xFB	; 251
     dac:	83 bf       	out	0x33, r24	; 51
					break;
     dae:	08 95       	ret
				case f_cpu_clk_8:
					CLRBIT(TCCR0,0);
     db0:	83 b7       	in	r24, 0x33	; 51
     db2:	8e 7f       	andi	r24, 0xFE	; 254
     db4:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     db6:	83 b7       	in	r24, 0x33	; 51
     db8:	82 60       	ori	r24, 0x02	; 2
     dba:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     dbc:	83 b7       	in	r24, 0x33	; 51
     dbe:	8b 7f       	andi	r24, 0xFB	; 251
     dc0:	83 bf       	out	0x33, r24	; 51
					break;
     dc2:	08 95       	ret
				case f_cpu_clk_32:
					SETBIT(TCCR0,0);
     dc4:	83 b7       	in	r24, 0x33	; 51
     dc6:	81 60       	ori	r24, 0x01	; 1
     dc8:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     dca:	83 b7       	in	r24, 0x33	; 51
     dcc:	82 60       	ori	r24, 0x02	; 2
     dce:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,2);
     dd0:	83 b7       	in	r24, 0x33	; 51
     dd2:	8b 7f       	andi	r24, 0xFB	; 251
     dd4:	83 bf       	out	0x33, r24	; 51
					break;
     dd6:	08 95       	ret
				case f_cpu_clk_64:
					CLRBIT(TCCR0,0);
     dd8:	83 b7       	in	r24, 0x33	; 51
     dda:	8e 7f       	andi	r24, 0xFE	; 254
     ddc:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     dde:	83 b7       	in	r24, 0x33	; 51
     de0:	8d 7f       	andi	r24, 0xFD	; 253
     de2:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     de4:	83 b7       	in	r24, 0x33	; 51
     de6:	84 60       	ori	r24, 0x04	; 4
     de8:	83 bf       	out	0x33, r24	; 51
					break;
     dea:	08 95       	ret
				case f_cpu_clk_128:
					SETBIT(TCCR0,0);
     dec:	83 b7       	in	r24, 0x33	; 51
     dee:	81 60       	ori	r24, 0x01	; 1
     df0:	83 bf       	out	0x33, r24	; 51
					CLRBIT(TCCR0,1);
     df2:	83 b7       	in	r24, 0x33	; 51
     df4:	8d 7f       	andi	r24, 0xFD	; 253
     df6:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     df8:	83 b7       	in	r24, 0x33	; 51
     dfa:	84 60       	ori	r24, 0x04	; 4
     dfc:	83 bf       	out	0x33, r24	; 51
					break;
     dfe:	08 95       	ret
				case f_cpu_clk_256:
					CLRBIT(TCCR0,0);
     e00:	83 b7       	in	r24, 0x33	; 51
     e02:	8e 7f       	andi	r24, 0xFE	; 254
     e04:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     e06:	83 b7       	in	r24, 0x33	; 51
     e08:	82 60       	ori	r24, 0x02	; 2
     e0a:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     e0c:	83 b7       	in	r24, 0x33	; 51
     e0e:	84 60       	ori	r24, 0x04	; 4
     e10:	83 bf       	out	0x33, r24	; 51
					break;
     e12:	08 95       	ret
				case f_cpu_clk_1024:
					SETBIT(TCCR0,0);
     e14:	83 b7       	in	r24, 0x33	; 51
     e16:	81 60       	ori	r24, 0x01	; 1
     e18:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,1);
     e1a:	83 b7       	in	r24, 0x33	; 51
     e1c:	82 60       	ori	r24, 0x02	; 2
     e1e:	83 bf       	out	0x33, r24	; 51
					SETBIT(TCCR0,2);
     e20:	83 b7       	in	r24, 0x33	; 51
     e22:	84 60       	ori	r24, 0x04	; 4
     e24:	83 bf       	out	0x33, r24	; 51
     e26:	08 95       	ret

00000e28 <delay_ms>:
			}
		}
	}
}
void delay_ms(float time_ms)
{
     e28:	8f 92       	push	r8
     e2a:	9f 92       	push	r9
     e2c:	af 92       	push	r10
     e2e:	bf 92       	push	r11
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <delay_ms+0x14>
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <delay_ms+0x16>
     e3e:	1f 92       	push	r1
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	4b 01       	movw	r8, r22
     e46:	5c 01       	movw	r10, r24
	config conf = {timer0, normal, f_cpu_clk_1024};
     e48:	ce 01       	movw	r24, r28
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	25 e0       	ldi	r18, 0x05	; 5
     e4e:	fc 01       	movw	r30, r24
     e50:	11 92       	st	Z+, r1
     e52:	2a 95       	dec	r18
     e54:	e9 f7       	brne	.-6      	; 0xe50 <delay_ms+0x28>
     e56:	27 e0       	ldi	r18, 0x07	; 7
     e58:	2b 83       	std	Y+3, r18	; 0x03
	Timer_init(&conf);
     e5a:	0e 94 c9 04 	call	0x992	; 0x992 <Timer_init>
	uint8_t counter = 0; //initial value
     e5e:	f1 2c       	mov	r15, r1
	while(counter != (uint16_tm)(((float)(time_ms/millisecond)/time_period) / overflow_value))
     e60:	0b c0       	rjmp	.+22     	; 0xe78 <delay_ms+0x50>
	{
		if(GETBIT(TIFR,bit0))
     e62:	08 b6       	in	r0, 0x38	; 56
     e64:	00 fe       	sbrs	r0, 0
     e66:	08 c0       	rjmp	.+16     	; 0xe78 <delay_ms+0x50>
		{
			counter++;
     e68:	f3 94       	inc	r15
			SETBIT(TIFR,bit0); //CLEAR FLAG 
     e6a:	88 b7       	in	r24, 0x38	; 56
     e6c:	81 60       	ori	r24, 0x01	; 1
     e6e:	88 bf       	out	0x38, r24	; 56
			Timer_init(&conf);
     e70:	ce 01       	movw	r24, r28
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	0e 94 c9 04 	call	0x992	; 0x992 <Timer_init>
void delay_ms(float time_ms)
{
	config conf = {timer0, normal, f_cpu_clk_1024};
	Timer_init(&conf);
	uint8_t counter = 0; //initial value
	while(counter != (uint16_tm)(((float)(time_ms/millisecond)/time_period) / overflow_value))
     e78:	0f 2d       	mov	r16, r15
     e7a:	10 e0       	ldi	r17, 0x00	; 0
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	4a e7       	ldi	r20, 0x7A	; 122
     e82:	54 e4       	ldi	r21, 0x44	; 68
     e84:	c5 01       	movw	r24, r10
     e86:	b4 01       	movw	r22, r8
     e88:	0e 94 66 07 	call	0xecc	; 0xecc <__divsf3>
     e8c:	2d eb       	ldi	r18, 0xBD	; 189
     e8e:	37 e3       	ldi	r19, 0x37	; 55
     e90:	46 e8       	ldi	r20, 0x86	; 134
     e92:	5a e3       	ldi	r21, 0x3A	; 58
     e94:	0e 94 66 07 	call	0xecc	; 0xecc <__divsf3>
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	4f e7       	ldi	r20, 0x7F	; 127
     e9e:	53 e4       	ldi	r21, 0x43	; 67
     ea0:	0e 94 66 07 	call	0xecc	; 0xecc <__divsf3>
     ea4:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__fixunssfsi>
     ea8:	06 17       	cp	r16, r22
     eaa:	17 07       	cpc	r17, r23
     eac:	d1 f6       	brne	.-76     	; 0xe62 <delay_ms+0x3a>
			counter++;
			SETBIT(TIFR,bit0); //CLEAR FLAG 
			Timer_init(&conf);
		}
	}
}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	bf 90       	pop	r11
     ec4:	af 90       	pop	r10
     ec6:	9f 90       	pop	r9
     ec8:	8f 90       	pop	r8
     eca:	08 95       	ret

00000ecc <__divsf3>:
     ecc:	0e 94 7a 07 	call	0xef4	; 0xef4 <__divsf3x>
     ed0:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__fp_round>
     ed4:	0e 94 17 08 	call	0x102e	; 0x102e <__fp_pscB>
     ed8:	58 f0       	brcs	.+22     	; 0xef0 <__divsf3+0x24>
     eda:	0e 94 10 08 	call	0x1020	; 0x1020 <__fp_pscA>
     ede:	40 f0       	brcs	.+16     	; 0xef0 <__divsf3+0x24>
     ee0:	29 f4       	brne	.+10     	; 0xeec <__divsf3+0x20>
     ee2:	5f 3f       	cpi	r21, 0xFF	; 255
     ee4:	29 f0       	breq	.+10     	; 0xef0 <__divsf3+0x24>
     ee6:	0c 94 07 08 	jmp	0x100e	; 0x100e <__fp_inf>
     eea:	51 11       	cpse	r21, r1
     eec:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__fp_szero>
     ef0:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__fp_nan>

00000ef4 <__divsf3x>:
     ef4:	0e 94 2f 08 	call	0x105e	; 0x105e <__fp_split3>
     ef8:	68 f3       	brcs	.-38     	; 0xed4 <__divsf3+0x8>

00000efa <__divsf3_pse>:
     efa:	99 23       	and	r25, r25
     efc:	b1 f3       	breq	.-20     	; 0xeea <__divsf3+0x1e>
     efe:	55 23       	and	r21, r21
     f00:	91 f3       	breq	.-28     	; 0xee6 <__divsf3+0x1a>
     f02:	95 1b       	sub	r25, r21
     f04:	55 0b       	sbc	r21, r21
     f06:	bb 27       	eor	r27, r27
     f08:	aa 27       	eor	r26, r26
     f0a:	62 17       	cp	r22, r18
     f0c:	73 07       	cpc	r23, r19
     f0e:	84 07       	cpc	r24, r20
     f10:	38 f0       	brcs	.+14     	; 0xf20 <__divsf3_pse+0x26>
     f12:	9f 5f       	subi	r25, 0xFF	; 255
     f14:	5f 4f       	sbci	r21, 0xFF	; 255
     f16:	22 0f       	add	r18, r18
     f18:	33 1f       	adc	r19, r19
     f1a:	44 1f       	adc	r20, r20
     f1c:	aa 1f       	adc	r26, r26
     f1e:	a9 f3       	breq	.-22     	; 0xf0a <__divsf3_pse+0x10>
     f20:	35 d0       	rcall	.+106    	; 0xf8c <__divsf3_pse+0x92>
     f22:	0e 2e       	mov	r0, r30
     f24:	3a f0       	brmi	.+14     	; 0xf34 <__divsf3_pse+0x3a>
     f26:	e0 e8       	ldi	r30, 0x80	; 128
     f28:	32 d0       	rcall	.+100    	; 0xf8e <__divsf3_pse+0x94>
     f2a:	91 50       	subi	r25, 0x01	; 1
     f2c:	50 40       	sbci	r21, 0x00	; 0
     f2e:	e6 95       	lsr	r30
     f30:	00 1c       	adc	r0, r0
     f32:	ca f7       	brpl	.-14     	; 0xf26 <__divsf3_pse+0x2c>
     f34:	2b d0       	rcall	.+86     	; 0xf8c <__divsf3_pse+0x92>
     f36:	fe 2f       	mov	r31, r30
     f38:	29 d0       	rcall	.+82     	; 0xf8c <__divsf3_pse+0x92>
     f3a:	66 0f       	add	r22, r22
     f3c:	77 1f       	adc	r23, r23
     f3e:	88 1f       	adc	r24, r24
     f40:	bb 1f       	adc	r27, r27
     f42:	26 17       	cp	r18, r22
     f44:	37 07       	cpc	r19, r23
     f46:	48 07       	cpc	r20, r24
     f48:	ab 07       	cpc	r26, r27
     f4a:	b0 e8       	ldi	r27, 0x80	; 128
     f4c:	09 f0       	breq	.+2      	; 0xf50 <__divsf3_pse+0x56>
     f4e:	bb 0b       	sbc	r27, r27
     f50:	80 2d       	mov	r24, r0
     f52:	bf 01       	movw	r22, r30
     f54:	ff 27       	eor	r31, r31
     f56:	93 58       	subi	r25, 0x83	; 131
     f58:	5f 4f       	sbci	r21, 0xFF	; 255
     f5a:	3a f0       	brmi	.+14     	; 0xf6a <__divsf3_pse+0x70>
     f5c:	9e 3f       	cpi	r25, 0xFE	; 254
     f5e:	51 05       	cpc	r21, r1
     f60:	78 f0       	brcs	.+30     	; 0xf80 <__divsf3_pse+0x86>
     f62:	0c 94 07 08 	jmp	0x100e	; 0x100e <__fp_inf>
     f66:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__fp_szero>
     f6a:	5f 3f       	cpi	r21, 0xFF	; 255
     f6c:	e4 f3       	brlt	.-8      	; 0xf66 <__divsf3_pse+0x6c>
     f6e:	98 3e       	cpi	r25, 0xE8	; 232
     f70:	d4 f3       	brlt	.-12     	; 0xf66 <__divsf3_pse+0x6c>
     f72:	86 95       	lsr	r24
     f74:	77 95       	ror	r23
     f76:	67 95       	ror	r22
     f78:	b7 95       	ror	r27
     f7a:	f7 95       	ror	r31
     f7c:	9f 5f       	subi	r25, 0xFF	; 255
     f7e:	c9 f7       	brne	.-14     	; 0xf72 <__divsf3_pse+0x78>
     f80:	88 0f       	add	r24, r24
     f82:	91 1d       	adc	r25, r1
     f84:	96 95       	lsr	r25
     f86:	87 95       	ror	r24
     f88:	97 f9       	bld	r25, 7
     f8a:	08 95       	ret
     f8c:	e1 e0       	ldi	r30, 0x01	; 1
     f8e:	66 0f       	add	r22, r22
     f90:	77 1f       	adc	r23, r23
     f92:	88 1f       	adc	r24, r24
     f94:	bb 1f       	adc	r27, r27
     f96:	62 17       	cp	r22, r18
     f98:	73 07       	cpc	r23, r19
     f9a:	84 07       	cpc	r24, r20
     f9c:	ba 07       	cpc	r27, r26
     f9e:	20 f0       	brcs	.+8      	; 0xfa8 <__divsf3_pse+0xae>
     fa0:	62 1b       	sub	r22, r18
     fa2:	73 0b       	sbc	r23, r19
     fa4:	84 0b       	sbc	r24, r20
     fa6:	ba 0b       	sbc	r27, r26
     fa8:	ee 1f       	adc	r30, r30
     faa:	88 f7       	brcc	.-30     	; 0xf8e <__divsf3_pse+0x94>
     fac:	e0 95       	com	r30
     fae:	08 95       	ret

00000fb0 <__fixunssfsi>:
     fb0:	0e 94 37 08 	call	0x106e	; 0x106e <__fp_splitA>
     fb4:	88 f0       	brcs	.+34     	; 0xfd8 <__fixunssfsi+0x28>
     fb6:	9f 57       	subi	r25, 0x7F	; 127
     fb8:	98 f0       	brcs	.+38     	; 0xfe0 <__fixunssfsi+0x30>
     fba:	b9 2f       	mov	r27, r25
     fbc:	99 27       	eor	r25, r25
     fbe:	b7 51       	subi	r27, 0x17	; 23
     fc0:	b0 f0       	brcs	.+44     	; 0xfee <__fixunssfsi+0x3e>
     fc2:	e1 f0       	breq	.+56     	; 0xffc <__fixunssfsi+0x4c>
     fc4:	66 0f       	add	r22, r22
     fc6:	77 1f       	adc	r23, r23
     fc8:	88 1f       	adc	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	1a f0       	brmi	.+6      	; 0xfd4 <__fixunssfsi+0x24>
     fce:	ba 95       	dec	r27
     fd0:	c9 f7       	brne	.-14     	; 0xfc4 <__fixunssfsi+0x14>
     fd2:	14 c0       	rjmp	.+40     	; 0xffc <__fixunssfsi+0x4c>
     fd4:	b1 30       	cpi	r27, 0x01	; 1
     fd6:	91 f0       	breq	.+36     	; 0xffc <__fixunssfsi+0x4c>
     fd8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__fp_zero>
     fdc:	b1 e0       	ldi	r27, 0x01	; 1
     fde:	08 95       	ret
     fe0:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__fp_zero>
     fe4:	67 2f       	mov	r22, r23
     fe6:	78 2f       	mov	r23, r24
     fe8:	88 27       	eor	r24, r24
     fea:	b8 5f       	subi	r27, 0xF8	; 248
     fec:	39 f0       	breq	.+14     	; 0xffc <__fixunssfsi+0x4c>
     fee:	b9 3f       	cpi	r27, 0xF9	; 249
     ff0:	cc f3       	brlt	.-14     	; 0xfe4 <__fixunssfsi+0x34>
     ff2:	86 95       	lsr	r24
     ff4:	77 95       	ror	r23
     ff6:	67 95       	ror	r22
     ff8:	b3 95       	inc	r27
     ffa:	d9 f7       	brne	.-10     	; 0xff2 <__fixunssfsi+0x42>
     ffc:	3e f4       	brtc	.+14     	; 0x100c <__fixunssfsi+0x5c>
     ffe:	90 95       	com	r25
    1000:	80 95       	com	r24
    1002:	70 95       	com	r23
    1004:	61 95       	neg	r22
    1006:	7f 4f       	sbci	r23, 0xFF	; 255
    1008:	8f 4f       	sbci	r24, 0xFF	; 255
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	08 95       	ret

0000100e <__fp_inf>:
    100e:	97 f9       	bld	r25, 7
    1010:	9f 67       	ori	r25, 0x7F	; 127
    1012:	80 e8       	ldi	r24, 0x80	; 128
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	08 95       	ret

0000101a <__fp_nan>:
    101a:	9f ef       	ldi	r25, 0xFF	; 255
    101c:	80 ec       	ldi	r24, 0xC0	; 192
    101e:	08 95       	ret

00001020 <__fp_pscA>:
    1020:	00 24       	eor	r0, r0
    1022:	0a 94       	dec	r0
    1024:	16 16       	cp	r1, r22
    1026:	17 06       	cpc	r1, r23
    1028:	18 06       	cpc	r1, r24
    102a:	09 06       	cpc	r0, r25
    102c:	08 95       	ret

0000102e <__fp_pscB>:
    102e:	00 24       	eor	r0, r0
    1030:	0a 94       	dec	r0
    1032:	12 16       	cp	r1, r18
    1034:	13 06       	cpc	r1, r19
    1036:	14 06       	cpc	r1, r20
    1038:	05 06       	cpc	r0, r21
    103a:	08 95       	ret

0000103c <__fp_round>:
    103c:	09 2e       	mov	r0, r25
    103e:	03 94       	inc	r0
    1040:	00 0c       	add	r0, r0
    1042:	11 f4       	brne	.+4      	; 0x1048 <__fp_round+0xc>
    1044:	88 23       	and	r24, r24
    1046:	52 f0       	brmi	.+20     	; 0x105c <__fp_round+0x20>
    1048:	bb 0f       	add	r27, r27
    104a:	40 f4       	brcc	.+16     	; 0x105c <__fp_round+0x20>
    104c:	bf 2b       	or	r27, r31
    104e:	11 f4       	brne	.+4      	; 0x1054 <__fp_round+0x18>
    1050:	60 ff       	sbrs	r22, 0
    1052:	04 c0       	rjmp	.+8      	; 0x105c <__fp_round+0x20>
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	8f 4f       	sbci	r24, 0xFF	; 255
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	08 95       	ret

0000105e <__fp_split3>:
    105e:	57 fd       	sbrc	r21, 7
    1060:	90 58       	subi	r25, 0x80	; 128
    1062:	44 0f       	add	r20, r20
    1064:	55 1f       	adc	r21, r21
    1066:	59 f0       	breq	.+22     	; 0x107e <__fp_splitA+0x10>
    1068:	5f 3f       	cpi	r21, 0xFF	; 255
    106a:	71 f0       	breq	.+28     	; 0x1088 <__fp_splitA+0x1a>
    106c:	47 95       	ror	r20

0000106e <__fp_splitA>:
    106e:	88 0f       	add	r24, r24
    1070:	97 fb       	bst	r25, 7
    1072:	99 1f       	adc	r25, r25
    1074:	61 f0       	breq	.+24     	; 0x108e <__fp_splitA+0x20>
    1076:	9f 3f       	cpi	r25, 0xFF	; 255
    1078:	79 f0       	breq	.+30     	; 0x1098 <__fp_splitA+0x2a>
    107a:	87 95       	ror	r24
    107c:	08 95       	ret
    107e:	12 16       	cp	r1, r18
    1080:	13 06       	cpc	r1, r19
    1082:	14 06       	cpc	r1, r20
    1084:	55 1f       	adc	r21, r21
    1086:	f2 cf       	rjmp	.-28     	; 0x106c <__fp_split3+0xe>
    1088:	46 95       	lsr	r20
    108a:	f1 df       	rcall	.-30     	; 0x106e <__fp_splitA>
    108c:	08 c0       	rjmp	.+16     	; 0x109e <__fp_splitA+0x30>
    108e:	16 16       	cp	r1, r22
    1090:	17 06       	cpc	r1, r23
    1092:	18 06       	cpc	r1, r24
    1094:	99 1f       	adc	r25, r25
    1096:	f1 cf       	rjmp	.-30     	; 0x107a <__fp_splitA+0xc>
    1098:	86 95       	lsr	r24
    109a:	71 05       	cpc	r23, r1
    109c:	61 05       	cpc	r22, r1
    109e:	08 94       	sec
    10a0:	08 95       	ret

000010a2 <__fp_zero>:
    10a2:	e8 94       	clt

000010a4 <__fp_szero>:
    10a4:	bb 27       	eor	r27, r27
    10a6:	66 27       	eor	r22, r22
    10a8:	77 27       	eor	r23, r23
    10aa:	cb 01       	movw	r24, r22
    10ac:	97 f9       	bld	r25, 7
    10ae:	08 95       	ret

000010b0 <__divmodhi4>:
    10b0:	97 fb       	bst	r25, 7
    10b2:	07 2e       	mov	r0, r23
    10b4:	16 f4       	brtc	.+4      	; 0x10ba <__divmodhi4+0xa>
    10b6:	00 94       	com	r0
    10b8:	07 d0       	rcall	.+14     	; 0x10c8 <__divmodhi4_neg1>
    10ba:	77 fd       	sbrc	r23, 7
    10bc:	09 d0       	rcall	.+18     	; 0x10d0 <__divmodhi4_neg2>
    10be:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__udivmodhi4>
    10c2:	07 fc       	sbrc	r0, 7
    10c4:	05 d0       	rcall	.+10     	; 0x10d0 <__divmodhi4_neg2>
    10c6:	3e f4       	brtc	.+14     	; 0x10d6 <__divmodhi4_exit>

000010c8 <__divmodhi4_neg1>:
    10c8:	90 95       	com	r25
    10ca:	81 95       	neg	r24
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	08 95       	ret

000010d0 <__divmodhi4_neg2>:
    10d0:	70 95       	com	r23
    10d2:	61 95       	neg	r22
    10d4:	7f 4f       	sbci	r23, 0xFF	; 255

000010d6 <__divmodhi4_exit>:
    10d6:	08 95       	ret

000010d8 <__tablejump2__>:
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	05 90       	lpm	r0, Z+
    10de:	f4 91       	lpm	r31, Z
    10e0:	e0 2d       	mov	r30, r0
    10e2:	09 94       	ijmp

000010e4 <__udivmodhi4>:
    10e4:	aa 1b       	sub	r26, r26
    10e6:	bb 1b       	sub	r27, r27
    10e8:	51 e1       	ldi	r21, 0x11	; 17
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <__udivmodhi4_ep>

000010ec <__udivmodhi4_loop>:
    10ec:	aa 1f       	adc	r26, r26
    10ee:	bb 1f       	adc	r27, r27
    10f0:	a6 17       	cp	r26, r22
    10f2:	b7 07       	cpc	r27, r23
    10f4:	10 f0       	brcs	.+4      	; 0x10fa <__udivmodhi4_ep>
    10f6:	a6 1b       	sub	r26, r22
    10f8:	b7 0b       	sbc	r27, r23

000010fa <__udivmodhi4_ep>:
    10fa:	88 1f       	adc	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	5a 95       	dec	r21
    1100:	a9 f7       	brne	.-22     	; 0x10ec <__udivmodhi4_loop>
    1102:	80 95       	com	r24
    1104:	90 95       	com	r25
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	08 95       	ret

0000110c <do_rand>:
    110c:	8f 92       	push	r8
    110e:	9f 92       	push	r9
    1110:	af 92       	push	r10
    1112:	bf 92       	push	r11
    1114:	cf 92       	push	r12
    1116:	df 92       	push	r13
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	ec 01       	movw	r28, r24
    1122:	68 81       	ld	r22, Y
    1124:	79 81       	ldd	r23, Y+1	; 0x01
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	9b 81       	ldd	r25, Y+3	; 0x03
    112a:	61 15       	cp	r22, r1
    112c:	71 05       	cpc	r23, r1
    112e:	81 05       	cpc	r24, r1
    1130:	91 05       	cpc	r25, r1
    1132:	21 f4       	brne	.+8      	; 0x113c <do_rand+0x30>
    1134:	64 e2       	ldi	r22, 0x24	; 36
    1136:	79 ed       	ldi	r23, 0xD9	; 217
    1138:	8b e5       	ldi	r24, 0x5B	; 91
    113a:	97 e0       	ldi	r25, 0x07	; 7
    113c:	2d e1       	ldi	r18, 0x1D	; 29
    113e:	33 ef       	ldi	r19, 0xF3	; 243
    1140:	41 e0       	ldi	r20, 0x01	; 1
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__divmodsi4>
    1148:	49 01       	movw	r8, r18
    114a:	5a 01       	movw	r10, r20
    114c:	9b 01       	movw	r18, r22
    114e:	ac 01       	movw	r20, r24
    1150:	a7 ea       	ldi	r26, 0xA7	; 167
    1152:	b1 e4       	ldi	r27, 0x41	; 65
    1154:	0e 94 01 09 	call	0x1202	; 0x1202 <__muluhisi3>
    1158:	6b 01       	movw	r12, r22
    115a:	7c 01       	movw	r14, r24
    115c:	ac ee       	ldi	r26, 0xEC	; 236
    115e:	b4 ef       	ldi	r27, 0xF4	; 244
    1160:	a5 01       	movw	r20, r10
    1162:	94 01       	movw	r18, r8
    1164:	0e 94 0f 09 	call	0x121e	; 0x121e <__mulohisi3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	8c 0d       	add	r24, r12
    116e:	9d 1d       	adc	r25, r13
    1170:	ae 1d       	adc	r26, r14
    1172:	bf 1d       	adc	r27, r15
    1174:	b7 ff       	sbrs	r27, 7
    1176:	03 c0       	rjmp	.+6      	; 0x117e <do_rand+0x72>
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	a1 09       	sbc	r26, r1
    117c:	b0 48       	sbci	r27, 0x80	; 128
    117e:	88 83       	st	Y, r24
    1180:	99 83       	std	Y+1, r25	; 0x01
    1182:	aa 83       	std	Y+2, r26	; 0x02
    1184:	bb 83       	std	Y+3, r27	; 0x03
    1186:	9f 77       	andi	r25, 0x7F	; 127
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	bf 90       	pop	r11
    1196:	af 90       	pop	r10
    1198:	9f 90       	pop	r9
    119a:	8f 90       	pop	r8
    119c:	08 95       	ret

0000119e <rand_r>:
    119e:	0e 94 86 08 	call	0x110c	; 0x110c <do_rand>
    11a2:	08 95       	ret

000011a4 <rand>:
    11a4:	80 e6       	ldi	r24, 0x60	; 96
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 86 08 	call	0x110c	; 0x110c <do_rand>
    11ac:	08 95       	ret

000011ae <srand>:
    11ae:	a0 e0       	ldi	r26, 0x00	; 0
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    11b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    11ba:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    11be:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    11c2:	08 95       	ret

000011c4 <__divmodsi4>:
    11c4:	05 2e       	mov	r0, r21
    11c6:	97 fb       	bst	r25, 7
    11c8:	1e f4       	brtc	.+6      	; 0x11d0 <__divmodsi4+0xc>
    11ca:	00 94       	com	r0
    11cc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__negsi2>
    11d0:	57 fd       	sbrc	r21, 7
    11d2:	07 d0       	rcall	.+14     	; 0x11e2 <__divmodsi4_neg2>
    11d4:	0e 94 14 09 	call	0x1228	; 0x1228 <__udivmodsi4>
    11d8:	07 fc       	sbrc	r0, 7
    11da:	03 d0       	rcall	.+6      	; 0x11e2 <__divmodsi4_neg2>
    11dc:	4e f4       	brtc	.+18     	; 0x11f0 <__divmodsi4_exit>
    11de:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <__negsi2>

000011e2 <__divmodsi4_neg2>:
    11e2:	50 95       	com	r21
    11e4:	40 95       	com	r20
    11e6:	30 95       	com	r19
    11e8:	21 95       	neg	r18
    11ea:	3f 4f       	sbci	r19, 0xFF	; 255
    11ec:	4f 4f       	sbci	r20, 0xFF	; 255
    11ee:	5f 4f       	sbci	r21, 0xFF	; 255

000011f0 <__divmodsi4_exit>:
    11f0:	08 95       	ret

000011f2 <__negsi2>:
    11f2:	90 95       	com	r25
    11f4:	80 95       	com	r24
    11f6:	70 95       	com	r23
    11f8:	61 95       	neg	r22
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	8f 4f       	sbci	r24, 0xFF	; 255
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	08 95       	ret

00001202 <__muluhisi3>:
    1202:	0e 94 36 09 	call	0x126c	; 0x126c <__umulhisi3>
    1206:	a5 9f       	mul	r26, r21
    1208:	90 0d       	add	r25, r0
    120a:	b4 9f       	mul	r27, r20
    120c:	90 0d       	add	r25, r0
    120e:	a4 9f       	mul	r26, r20
    1210:	80 0d       	add	r24, r0
    1212:	91 1d       	adc	r25, r1
    1214:	11 24       	eor	r1, r1
    1216:	08 95       	ret

00001218 <__mulshisi3>:
    1218:	b7 ff       	sbrs	r27, 7
    121a:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__muluhisi3>

0000121e <__mulohisi3>:
    121e:	0e 94 01 09 	call	0x1202	; 0x1202 <__muluhisi3>
    1222:	82 1b       	sub	r24, r18
    1224:	93 0b       	sbc	r25, r19
    1226:	08 95       	ret

00001228 <__udivmodsi4>:
    1228:	a1 e2       	ldi	r26, 0x21	; 33
    122a:	1a 2e       	mov	r1, r26
    122c:	aa 1b       	sub	r26, r26
    122e:	bb 1b       	sub	r27, r27
    1230:	fd 01       	movw	r30, r26
    1232:	0d c0       	rjmp	.+26     	; 0x124e <__udivmodsi4_ep>

00001234 <__udivmodsi4_loop>:
    1234:	aa 1f       	adc	r26, r26
    1236:	bb 1f       	adc	r27, r27
    1238:	ee 1f       	adc	r30, r30
    123a:	ff 1f       	adc	r31, r31
    123c:	a2 17       	cp	r26, r18
    123e:	b3 07       	cpc	r27, r19
    1240:	e4 07       	cpc	r30, r20
    1242:	f5 07       	cpc	r31, r21
    1244:	20 f0       	brcs	.+8      	; 0x124e <__udivmodsi4_ep>
    1246:	a2 1b       	sub	r26, r18
    1248:	b3 0b       	sbc	r27, r19
    124a:	e4 0b       	sbc	r30, r20
    124c:	f5 0b       	sbc	r31, r21

0000124e <__udivmodsi4_ep>:
    124e:	66 1f       	adc	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	88 1f       	adc	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	1a 94       	dec	r1
    1258:	69 f7       	brne	.-38     	; 0x1234 <__udivmodsi4_loop>
    125a:	60 95       	com	r22
    125c:	70 95       	com	r23
    125e:	80 95       	com	r24
    1260:	90 95       	com	r25
    1262:	9b 01       	movw	r18, r22
    1264:	ac 01       	movw	r20, r24
    1266:	bd 01       	movw	r22, r26
    1268:	cf 01       	movw	r24, r30
    126a:	08 95       	ret

0000126c <__umulhisi3>:
    126c:	a2 9f       	mul	r26, r18
    126e:	b0 01       	movw	r22, r0
    1270:	b3 9f       	mul	r27, r19
    1272:	c0 01       	movw	r24, r0
    1274:	a3 9f       	mul	r26, r19
    1276:	70 0d       	add	r23, r0
    1278:	81 1d       	adc	r24, r1
    127a:	11 24       	eor	r1, r1
    127c:	91 1d       	adc	r25, r1
    127e:	b2 9f       	mul	r27, r18
    1280:	70 0d       	add	r23, r0
    1282:	81 1d       	adc	r24, r1
    1284:	11 24       	eor	r1, r1
    1286:	91 1d       	adc	r25, r1
    1288:	08 95       	ret

0000128a <_exit>:
    128a:	f8 94       	cli

0000128c <__stop_program>:
    128c:	ff cf       	rjmp	.-2      	; 0x128c <__stop_program>
